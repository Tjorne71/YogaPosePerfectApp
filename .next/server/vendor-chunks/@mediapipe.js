/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mediapipe";
exports.ids = ["vendor-chunks/@mediapipe"];
exports.modules = {

/***/ "(ssr)/./node_modules/@mediapipe/pose/pose.js":
/*!**********************************************!*\
  !*** ./node_modules/@mediapipe/pose/pose.js ***!
  \**********************************************/
/***/ (function() {

eval("(function() {\n    \"use strict\";\n    var x;\n    function aa(a) {\n        var b = 0;\n        return function() {\n            return b < a.length ? {\n                done: !1,\n                value: a[b++]\n            } : {\n                done: !0\n            };\n        };\n    }\n    var ba = \"function\" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {\n        if (a == Array.prototype || a == Object.prototype) return a;\n        a[b] = c.value;\n        return a;\n    };\n    function ca(a) {\n        a = [\n            \"object\" == typeof globalThis && globalThis,\n            a,\n             false && 0,\n            \"object\" == typeof self && self,\n            \"object\" == typeof global && global\n        ];\n        for(var b = 0; b < a.length; ++b){\n            var c = a[b];\n            if (c && c.Math == Math) return c;\n        }\n        throw Error(\"Cannot find global object\");\n    }\n    var y = ca(this);\n    function z(a, b) {\n        if (b) a: {\n            var c = y;\n            a = a.split(\".\");\n            for(var d = 0; d < a.length - 1; d++){\n                var e = a[d];\n                if (!(e in c)) break a;\n                c = c[e];\n            }\n            a = a[a.length - 1];\n            d = c[a];\n            b = b(d);\n            b != d && null != b && ba(c, a, {\n                configurable: !0,\n                writable: !0,\n                value: b\n            });\n        }\n    }\n    z(\"Symbol\", function(a) {\n        function b(g) {\n            if (this instanceof b) throw new TypeError(\"Symbol is not a constructor\");\n            return new c(d + (g || \"\") + \"_\" + e++, g);\n        }\n        function c(g, f) {\n            this.h = g;\n            ba(this, \"description\", {\n                configurable: !0,\n                writable: !0,\n                value: f\n            });\n        }\n        if (a) return a;\n        c.prototype.toString = function() {\n            return this.h;\n        };\n        var d = \"jscomp_symbol_\" + (1E9 * Math.random() >>> 0) + \"_\", e = 0;\n        return b;\n    });\n    z(\"Symbol.iterator\", function(a) {\n        if (a) return a;\n        a = Symbol(\"Symbol.iterator\");\n        for(var b = \"Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array\".split(\" \"), c = 0; c < b.length; c++){\n            var d = y[b[c]];\n            \"function\" === typeof d && \"function\" != typeof d.prototype[a] && ba(d.prototype, a, {\n                configurable: !0,\n                writable: !0,\n                value: function() {\n                    return da(aa(this));\n                }\n            });\n        }\n        return a;\n    });\n    function da(a) {\n        a = {\n            next: a\n        };\n        a[Symbol.iterator] = function() {\n            return this;\n        };\n        return a;\n    }\n    function A(a) {\n        var b = \"undefined\" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];\n        return b ? b.call(a) : {\n            next: aa(a)\n        };\n    }\n    function ea(a) {\n        if (!(a instanceof Array)) {\n            a = A(a);\n            for(var b, c = []; !(b = a.next()).done;)c.push(b.value);\n            a = c;\n        }\n        return a;\n    }\n    var fa = \"function\" == typeof Object.assign ? Object.assign : function(a, b) {\n        for(var c = 1; c < arguments.length; c++){\n            var d = arguments[c];\n            if (d) for(var e in d)Object.prototype.hasOwnProperty.call(d, e) && (a[e] = d[e]);\n        }\n        return a;\n    };\n    z(\"Object.assign\", function(a) {\n        return a || fa;\n    });\n    var ha = \"function\" == typeof Object.create ? Object.create : function(a) {\n        function b() {}\n        b.prototype = a;\n        return new b;\n    }, ia;\n    if (\"function\" == typeof Object.setPrototypeOf) ia = Object.setPrototypeOf;\n    else {\n        var ja;\n        a: {\n            var ka = {\n                a: !0\n            }, la = {};\n            try {\n                la.__proto__ = ka;\n                ja = la.a;\n                break a;\n            } catch (a) {}\n            ja = !1;\n        }\n        ia = ja ? function(a, b) {\n            a.__proto__ = b;\n            if (a.__proto__ !== b) throw new TypeError(a + \" is not extensible\");\n            return a;\n        } : null;\n    }\n    var ma = ia;\n    function na(a, b) {\n        a.prototype = ha(b.prototype);\n        a.prototype.constructor = a;\n        if (ma) ma(a, b);\n        else for(var c in b)if (\"prototype\" != c) if (Object.defineProperties) {\n            var d = Object.getOwnPropertyDescriptor(b, c);\n            d && Object.defineProperty(a, c, d);\n        } else a[c] = b[c];\n        a.za = b.prototype;\n    }\n    function oa() {\n        this.m = !1;\n        this.j = null;\n        this.i = void 0;\n        this.h = 1;\n        this.v = this.s = 0;\n        this.l = null;\n    }\n    function pa(a) {\n        if (a.m) throw new TypeError(\"Generator is already running\");\n        a.m = !0;\n    }\n    oa.prototype.u = function(a) {\n        this.i = a;\n    };\n    function qa(a, b) {\n        a.l = {\n            ma: b,\n            na: !0\n        };\n        a.h = a.s || a.v;\n    }\n    oa.prototype.return = function(a) {\n        this.l = {\n            return: a\n        };\n        this.h = this.v;\n    };\n    function D(a, b, c) {\n        a.h = c;\n        return {\n            value: b\n        };\n    }\n    function ra(a) {\n        this.h = new oa;\n        this.i = a;\n    }\n    function sa(a, b) {\n        pa(a.h);\n        var c = a.h.j;\n        if (c) return ta(a, \"return\" in c ? c[\"return\"] : function(d) {\n            return {\n                value: d,\n                done: !0\n            };\n        }, b, a.h.return);\n        a.h.return(b);\n        return ua(a);\n    }\n    function ta(a, b, c, d) {\n        try {\n            var e = b.call(a.h.j, c);\n            if (!(e instanceof Object)) throw new TypeError(\"Iterator result \" + e + \" is not an object\");\n            if (!e.done) return a.h.m = !1, e;\n            var g = e.value;\n        } catch (f) {\n            return a.h.j = null, qa(a.h, f), ua(a);\n        }\n        a.h.j = null;\n        d.call(a.h, g);\n        return ua(a);\n    }\n    function ua(a) {\n        for(; a.h.h;)try {\n            var b = a.i(a.h);\n            if (b) return a.h.m = !1, {\n                value: b.value,\n                done: !1\n            };\n        } catch (c) {\n            a.h.i = void 0, qa(a.h, c);\n        }\n        a.h.m = !1;\n        if (a.h.l) {\n            b = a.h.l;\n            a.h.l = null;\n            if (b.na) throw b.ma;\n            return {\n                value: b.return,\n                done: !0\n            };\n        }\n        return {\n            value: void 0,\n            done: !0\n        };\n    }\n    function va(a) {\n        this.next = function(b) {\n            pa(a.h);\n            a.h.j ? b = ta(a, a.h.j.next, b, a.h.u) : (a.h.u(b), b = ua(a));\n            return b;\n        };\n        this.throw = function(b) {\n            pa(a.h);\n            a.h.j ? b = ta(a, a.h.j[\"throw\"], b, a.h.u) : (qa(a.h, b), b = ua(a));\n            return b;\n        };\n        this.return = function(b) {\n            return sa(a, b);\n        };\n        this[Symbol.iterator] = function() {\n            return this;\n        };\n    }\n    function wa(a) {\n        function b(d) {\n            return a.next(d);\n        }\n        function c(d) {\n            return a.throw(d);\n        }\n        return new Promise(function(d, e) {\n            function g(f) {\n                f.done ? d(f.value) : Promise.resolve(f.value).then(b, c).then(g, e);\n            }\n            g(a.next());\n        });\n    }\n    function E(a) {\n        return wa(new va(new ra(a)));\n    }\n    z(\"Promise\", function(a) {\n        function b(f) {\n            this.i = 0;\n            this.j = void 0;\n            this.h = [];\n            this.u = !1;\n            var h = this.l();\n            try {\n                f(h.resolve, h.reject);\n            } catch (k) {\n                h.reject(k);\n            }\n        }\n        function c() {\n            this.h = null;\n        }\n        function d(f) {\n            return f instanceof b ? f : new b(function(h) {\n                h(f);\n            });\n        }\n        if (a) return a;\n        c.prototype.i = function(f) {\n            if (null == this.h) {\n                this.h = [];\n                var h = this;\n                this.j(function() {\n                    h.m();\n                });\n            }\n            this.h.push(f);\n        };\n        var e = y.setTimeout;\n        c.prototype.j = function(f) {\n            e(f, 0);\n        };\n        c.prototype.m = function() {\n            for(; this.h && this.h.length;){\n                var f = this.h;\n                this.h = [];\n                for(var h = 0; h < f.length; ++h){\n                    var k = f[h];\n                    f[h] = null;\n                    try {\n                        k();\n                    } catch (l) {\n                        this.l(l);\n                    }\n                }\n            }\n            this.h = null;\n        };\n        c.prototype.l = function(f) {\n            this.j(function() {\n                throw f;\n            });\n        };\n        b.prototype.l = function() {\n            function f(l) {\n                return function(m) {\n                    k || (k = !0, l.call(h, m));\n                };\n            }\n            var h = this, k = !1;\n            return {\n                resolve: f(this.I),\n                reject: f(this.m)\n            };\n        };\n        b.prototype.I = function(f) {\n            if (f === this) this.m(new TypeError(\"A Promise cannot resolve to itself\"));\n            else if (f instanceof b) this.L(f);\n            else {\n                a: switch(typeof f){\n                    case \"object\":\n                        var h = null != f;\n                        break a;\n                    case \"function\":\n                        h = !0;\n                        break a;\n                    default:\n                        h = !1;\n                }\n                h ? this.F(f) : this.s(f);\n            }\n        };\n        b.prototype.F = function(f) {\n            var h = void 0;\n            try {\n                h = f.then;\n            } catch (k) {\n                this.m(k);\n                return;\n            }\n            \"function\" == typeof h ? this.M(h, f) : this.s(f);\n        };\n        b.prototype.m = function(f) {\n            this.v(2, f);\n        };\n        b.prototype.s = function(f) {\n            this.v(1, f);\n        };\n        b.prototype.v = function(f, h) {\n            if (0 != this.i) throw Error(\"Cannot settle(\" + f + \", \" + h + \"): Promise already settled in state\" + this.i);\n            this.i = f;\n            this.j = h;\n            2 === this.i && this.K();\n            this.H();\n        };\n        b.prototype.K = function() {\n            var f = this;\n            e(function() {\n                if (f.D()) {\n                    var h = y.console;\n                    \"undefined\" !== typeof h && h.error(f.j);\n                }\n            }, 1);\n        };\n        b.prototype.D = function() {\n            if (this.u) return !1;\n            var f = y.CustomEvent, h = y.Event, k = y.dispatchEvent;\n            if (\"undefined\" === typeof k) return !0;\n            \"function\" === typeof f ? f = new f(\"unhandledrejection\", {\n                cancelable: !0\n            }) : \"function\" === typeof h ? f = new h(\"unhandledrejection\", {\n                cancelable: !0\n            }) : (f = y.document.createEvent(\"CustomEvent\"), f.initCustomEvent(\"unhandledrejection\", !1, !0, f));\n            f.promise = this;\n            f.reason = this.j;\n            return k(f);\n        };\n        b.prototype.H = function() {\n            if (null != this.h) {\n                for(var f = 0; f < this.h.length; ++f)g.i(this.h[f]);\n                this.h = null;\n            }\n        };\n        var g = new c;\n        b.prototype.L = function(f) {\n            var h = this.l();\n            f.T(h.resolve, h.reject);\n        };\n        b.prototype.M = function(f, h) {\n            var k = this.l();\n            try {\n                f.call(h, k.resolve, k.reject);\n            } catch (l) {\n                k.reject(l);\n            }\n        };\n        b.prototype.then = function(f, h) {\n            function k(p, n) {\n                return \"function\" == typeof p ? function(q) {\n                    try {\n                        l(p(q));\n                    } catch (t) {\n                        m(t);\n                    }\n                } : n;\n            }\n            var l, m, r = new b(function(p, n) {\n                l = p;\n                m = n;\n            });\n            this.T(k(f, l), k(h, m));\n            return r;\n        };\n        b.prototype.catch = function(f) {\n            return this.then(void 0, f);\n        };\n        b.prototype.T = function(f, h) {\n            function k() {\n                switch(l.i){\n                    case 1:\n                        f(l.j);\n                        break;\n                    case 2:\n                        h(l.j);\n                        break;\n                    default:\n                        throw Error(\"Unexpected state: \" + l.i);\n                }\n            }\n            var l = this;\n            null == this.h ? g.i(k) : this.h.push(k);\n            this.u = !0;\n        };\n        b.resolve = d;\n        b.reject = function(f) {\n            return new b(function(h, k) {\n                k(f);\n            });\n        };\n        b.race = function(f) {\n            return new b(function(h, k) {\n                for(var l = A(f), m = l.next(); !m.done; m = l.next())d(m.value).T(h, k);\n            });\n        };\n        b.all = function(f) {\n            var h = A(f), k = h.next();\n            return k.done ? d([]) : new b(function(l, m) {\n                function r(q) {\n                    return function(t) {\n                        p[q] = t;\n                        n--;\n                        0 == n && l(p);\n                    };\n                }\n                var p = [], n = 0;\n                do p.push(void 0), n++, d(k.value).T(r(p.length - 1), m), k = h.next();\n                while (!k.done);\n            });\n        };\n        return b;\n    });\n    function xa(a, b) {\n        a instanceof String && (a += \"\");\n        var c = 0, d = !1, e = {\n            next: function() {\n                if (!d && c < a.length) {\n                    var g = c++;\n                    return {\n                        value: b(g, a[g]),\n                        done: !1\n                    };\n                }\n                d = !0;\n                return {\n                    done: !0,\n                    value: void 0\n                };\n            }\n        };\n        e[Symbol.iterator] = function() {\n            return e;\n        };\n        return e;\n    }\n    z(\"Array.prototype.keys\", function(a) {\n        return a ? a : function() {\n            return xa(this, function(b) {\n                return b;\n            });\n        };\n    });\n    z(\"Array.prototype.fill\", function(a) {\n        return a ? a : function(b, c, d) {\n            var e = this.length || 0;\n            0 > c && (c = Math.max(0, e + c));\n            if (null == d || d > e) d = e;\n            d = Number(d);\n            0 > d && (d = Math.max(0, e + d));\n            for(c = Number(c || 0); c < d; c++)this[c] = b;\n            return this;\n        };\n    });\n    function F(a) {\n        return a ? a : Array.prototype.fill;\n    }\n    z(\"Int8Array.prototype.fill\", F);\n    z(\"Uint8Array.prototype.fill\", F);\n    z(\"Uint8ClampedArray.prototype.fill\", F);\n    z(\"Int16Array.prototype.fill\", F);\n    z(\"Uint16Array.prototype.fill\", F);\n    z(\"Int32Array.prototype.fill\", F);\n    z(\"Uint32Array.prototype.fill\", F);\n    z(\"Float32Array.prototype.fill\", F);\n    z(\"Float64Array.prototype.fill\", F);\n    z(\"Object.is\", function(a) {\n        return a ? a : function(b, c) {\n            return b === c ? 0 !== b || 1 / b === 1 / c : b !== b && c !== c;\n        };\n    });\n    z(\"Array.prototype.includes\", function(a) {\n        return a ? a : function(b, c) {\n            var d = this;\n            d instanceof String && (d = String(d));\n            var e = d.length;\n            c = c || 0;\n            for(0 > c && (c = Math.max(c + e, 0)); c < e; c++){\n                var g = d[c];\n                if (g === b || Object.is(g, b)) return !0;\n            }\n            return !1;\n        };\n    });\n    z(\"String.prototype.includes\", function(a) {\n        return a ? a : function(b, c) {\n            if (null == this) throw new TypeError(\"The 'this' value for String.prototype.includes must not be null or undefined\");\n            if (b instanceof RegExp) throw new TypeError(\"First argument to String.prototype.includes must not be a regular expression\");\n            return -1 !== this.indexOf(b, c || 0);\n        };\n    });\n    var ya = this || self;\n    function G(a, b) {\n        a = a.split(\".\");\n        var c = ya;\n        a[0] in c || \"undefined\" == typeof c.execScript || c.execScript(\"var \" + a[0]);\n        for(var d; a.length && (d = a.shift());)a.length || void 0 === b ? c[d] && c[d] !== Object.prototype[d] ? c = c[d] : c = c[d] = {} : c[d] = b;\n    }\n    ;\n    function Aa(a) {\n        var b;\n        a: {\n            if (b = ya.navigator) {\n                if (b = b.userAgent) break a;\n            }\n            b = \"\";\n        }\n        return -1 != b.indexOf(a);\n    }\n    ;\n    var Ba = Array.prototype.map ? function(a, b) {\n        return Array.prototype.map.call(a, b, void 0);\n    } : function(a, b) {\n        for(var c = a.length, d = Array(c), e = \"string\" === typeof a ? a.split(\"\") : a, g = 0; g < c; g++)g in e && (d[g] = b.call(void 0, e[g], g, a));\n        return d;\n    };\n    var Ca = {}, Da = null;\n    function Ea(a) {\n        var b = a.length, c = 3 * b / 4;\n        c % 3 ? c = Math.floor(c) : -1 != \"=.\".indexOf(a[b - 1]) && (c = -1 != \"=.\".indexOf(a[b - 2]) ? c - 2 : c - 1);\n        var d = new Uint8Array(c), e = 0;\n        Fa(a, function(g) {\n            d[e++] = g;\n        });\n        return e !== c ? d.subarray(0, e) : d;\n    }\n    function Fa(a, b) {\n        function c(k) {\n            for(; d < a.length;){\n                var l = a.charAt(d++), m = Da[l];\n                if (null != m) return m;\n                if (!/^[\\s\\xa0]*$/.test(l)) throw Error(\"Unknown base64 encoding at char: \" + l);\n            }\n            return k;\n        }\n        Ga();\n        for(var d = 0;;){\n            var e = c(-1), g = c(0), f = c(64), h = c(64);\n            if (64 === h && -1 === e) break;\n            b(e << 2 | g >> 4);\n            64 != f && (b(g << 4 & 240 | f >> 2), 64 != h && b(f << 6 & 192 | h));\n        }\n    }\n    function Ga() {\n        if (!Da) {\n            Da = {};\n            for(var a = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split(\"\"), b = [\n                \"+/=\",\n                \"+/\",\n                \"-_=\",\n                \"-_.\",\n                \"-_\"\n            ], c = 0; 5 > c; c++){\n                var d = a.concat(b[c].split(\"\"));\n                Ca[c] = d;\n                for(var e = 0; e < d.length; e++){\n                    var g = d[e];\n                    void 0 === Da[g] && (Da[g] = e);\n                }\n            }\n        }\n    }\n    ;\n    var Ha = \"undefined\" !== typeof Uint8Array, Ia = !(Aa(\"Trident\") || Aa(\"MSIE\")) && \"function\" === typeof ya.btoa;\n    function Ja(a) {\n        if (!Ia) {\n            var b;\n            void 0 === b && (b = 0);\n            Ga();\n            b = Ca[b];\n            for(var c = Array(Math.floor(a.length / 3)), d = b[64] || \"\", e = 0, g = 0; e < a.length - 2; e += 3){\n                var f = a[e], h = a[e + 1], k = a[e + 2], l = b[f >> 2];\n                f = b[(f & 3) << 4 | h >> 4];\n                h = b[(h & 15) << 2 | k >> 6];\n                k = b[k & 63];\n                c[g++] = l + f + h + k;\n            }\n            l = 0;\n            k = d;\n            switch(a.length - e){\n                case 2:\n                    l = a[e + 1], k = b[(l & 15) << 2] || d;\n                case 1:\n                    a = a[e], c[g] = b[a >> 2] + b[(a & 3) << 4 | l >> 4] + k + d;\n            }\n            return c.join(\"\");\n        }\n        for(b = \"\"; 10240 < a.length;)b += String.fromCharCode.apply(null, a.subarray(0, 10240)), a = a.subarray(10240);\n        b += String.fromCharCode.apply(null, a);\n        return btoa(b);\n    }\n    var Ka = RegExp(\"[-_.]\", \"g\");\n    function La(a) {\n        switch(a){\n            case \"-\":\n                return \"+\";\n            case \"_\":\n                return \"/\";\n            case \".\":\n                return \"=\";\n            default:\n                return \"\";\n        }\n    }\n    function Ma(a) {\n        if (!Ia) return Ea(a);\n        Ka.test(a) && (a = a.replace(Ka, La));\n        a = atob(a);\n        for(var b = new Uint8Array(a.length), c = 0; c < a.length; c++)b[c] = a.charCodeAt(c);\n        return b;\n    }\n    var Na;\n    function Oa() {\n        return Na || (Na = new Uint8Array(0));\n    }\n    var Pa = {};\n    var Qa = \"function\" === typeof Uint8Array.prototype.slice, H = 0, K = 0;\n    function Ra(a) {\n        var b = 0 > a;\n        a = Math.abs(a);\n        var c = a >>> 0;\n        a = Math.floor((a - c) / 4294967296);\n        b && (c = A(Sa(c, a)), b = c.next().value, a = c.next().value, c = b);\n        H = c >>> 0;\n        K = a >>> 0;\n    }\n    var Ta = \"function\" === typeof BigInt;\n    function Sa(a, b) {\n        b = ~b;\n        a ? a = ~a + 1 : b += 1;\n        return [\n            a,\n            b\n        ];\n    }\n    ;\n    function Ua(a, b) {\n        this.i = a >>> 0;\n        this.h = b >>> 0;\n    }\n    function Va(a) {\n        if (!a) return Wa || (Wa = new Ua(0, 0));\n        if (!/^-?\\d+$/.test(a)) return null;\n        if (16 > a.length) Ra(Number(a));\n        else if (Ta) a = BigInt(a), H = Number(a & BigInt(4294967295)) >>> 0, K = Number(a >> BigInt(32) & BigInt(4294967295));\n        else {\n            var b = +(\"-\" === a[0]);\n            K = H = 0;\n            for(var c = a.length, d = b, e = (c - b) % 6 + b; e <= c; d = e, e += 6)d = Number(a.slice(d, e)), K *= 1E6, H = 1E6 * H + d, 4294967296 <= H && (K += H / 4294967296 | 0, H %= 4294967296);\n            b && (b = A(Sa(H, K)), a = b.next().value, b = b.next().value, H = a, K = b);\n        }\n        return new Ua(H, K);\n    }\n    var Wa;\n    function Xa(a, b) {\n        return Error(\"Invalid wire type: \" + a + \" (at position \" + b + \")\");\n    }\n    function Ya() {\n        return Error(\"Failed to read varint, encoding is invalid.\");\n    }\n    function Za(a, b) {\n        return Error(\"Tried to read past the end of the data \" + b + \" > \" + a);\n    }\n    ;\n    function L() {\n        throw Error(\"Invalid UTF8\");\n    }\n    function $a(a, b) {\n        b = String.fromCharCode.apply(null, b);\n        return null == a ? b : a + b;\n    }\n    var ab = void 0, bb, cb = \"undefined\" !== typeof TextDecoder, db, eb = \"undefined\" !== typeof TextEncoder;\n    var fb;\n    function gb(a) {\n        if (a !== Pa) throw Error(\"illegal external caller\");\n    }\n    function hb(a, b) {\n        gb(b);\n        this.V = a;\n        if (null != a && 0 === a.length) throw Error(\"ByteString should be constructed with non-empty values\");\n    }\n    function ib() {\n        return fb || (fb = new hb(null, Pa));\n    }\n    function jb(a) {\n        gb(Pa);\n        var b = a.V;\n        b = null == b || Ha && null != b && b instanceof Uint8Array ? b : \"string\" === typeof b ? Ma(b) : null;\n        return null == b ? b : a.V = b;\n    }\n    ;\n    function kb(a) {\n        if (\"string\" === typeof a) return {\n            buffer: Ma(a),\n            C: !1\n        };\n        if (Array.isArray(a)) return {\n            buffer: new Uint8Array(a),\n            C: !1\n        };\n        if (a.constructor === Uint8Array) return {\n            buffer: a,\n            C: !1\n        };\n        if (a.constructor === ArrayBuffer) return {\n            buffer: new Uint8Array(a),\n            C: !1\n        };\n        if (a.constructor === hb) return {\n            buffer: jb(a) || Oa(),\n            C: !0\n        };\n        if (a instanceof Uint8Array) return {\n            buffer: new Uint8Array(a.buffer, a.byteOffset, a.byteLength),\n            C: !1\n        };\n        throw Error(\"Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, a ByteString or an Array of numbers\");\n    }\n    ;\n    function lb(a, b) {\n        this.i = null;\n        this.m = !1;\n        this.h = this.j = this.l = 0;\n        mb(this, a, b);\n    }\n    function mb(a, b, c) {\n        c = void 0 === c ? {} : c;\n        a.S = void 0 === c.S ? !1 : c.S;\n        b && (b = kb(b), a.i = b.buffer, a.m = b.C, a.l = 0, a.j = a.i.length, a.h = a.l);\n    }\n    lb.prototype.reset = function() {\n        this.h = this.l;\n    };\n    function M(a, b) {\n        a.h = b;\n        if (b > a.j) throw Za(a.j, b);\n    }\n    function nb(a) {\n        var b = a.i, c = a.h, d = b[c++], e = d & 127;\n        if (d & 128 && (d = b[c++], e |= (d & 127) << 7, d & 128 && (d = b[c++], e |= (d & 127) << 14, d & 128 && (d = b[c++], e |= (d & 127) << 21, d & 128 && (d = b[c++], e |= d << 28, d & 128 && b[c++] & 128 && b[c++] & 128 && b[c++] & 128 && b[c++] & 128 && b[c++] & 128))))) throw Ya();\n        M(a, c);\n        return e;\n    }\n    function ob(a, b) {\n        if (0 > b) throw Error(\"Tried to read a negative byte length: \" + b);\n        var c = a.h, d = c + b;\n        if (d > a.j) throw Za(b, a.j - c);\n        a.h = d;\n        return c;\n    }\n    var pb = [];\n    function qb() {\n        this.h = [];\n    }\n    qb.prototype.length = function() {\n        return this.h.length;\n    };\n    qb.prototype.end = function() {\n        var a = this.h;\n        this.h = [];\n        return a;\n    };\n    function rb(a, b, c) {\n        for(; 0 < c || 127 < b;)a.h.push(b & 127 | 128), b = (b >>> 7 | c << 25) >>> 0, c >>>= 7;\n        a.h.push(b);\n    }\n    function N(a, b) {\n        for(; 127 < b;)a.h.push(b & 127 | 128), b >>>= 7;\n        a.h.push(b);\n    }\n    ;\n    function sb(a, b) {\n        if (pb.length) {\n            var c = pb.pop();\n            mb(c, a, b);\n            a = c;\n        } else a = new lb(a, b);\n        this.h = a;\n        this.j = this.h.h;\n        this.i = this.l = -1;\n        this.setOptions(b);\n    }\n    sb.prototype.setOptions = function(a) {\n        a = void 0 === a ? {} : a;\n        this.ca = void 0 === a.ca ? !1 : a.ca;\n    };\n    sb.prototype.reset = function() {\n        this.h.reset();\n        this.j = this.h.h;\n        this.i = this.l = -1;\n    };\n    function tb(a) {\n        var b = a.h;\n        if (b.h == b.j) return !1;\n        a.j = a.h.h;\n        var c = nb(a.h) >>> 0;\n        b = c >>> 3;\n        c &= 7;\n        if (!(0 <= c && 5 >= c)) throw Xa(c, a.j);\n        if (1 > b) throw Error(\"Invalid field number: \" + b + \" (at position \" + a.j + \")\");\n        a.l = b;\n        a.i = c;\n        return !0;\n    }\n    function ub(a) {\n        switch(a.i){\n            case 0:\n                if (0 != a.i) ub(a);\n                else a: {\n                    a = a.h;\n                    for(var b = a.h, c = b + 10, d = a.i; b < c;)if (0 === (d[b++] & 128)) {\n                        M(a, b);\n                        break a;\n                    }\n                    throw Ya();\n                }\n                break;\n            case 1:\n                a = a.h;\n                M(a, a.h + 8);\n                break;\n            case 2:\n                2 != a.i ? ub(a) : (b = nb(a.h) >>> 0, a = a.h, M(a, a.h + b));\n                break;\n            case 5:\n                a = a.h;\n                M(a, a.h + 4);\n                break;\n            case 3:\n                b = a.l;\n                do {\n                    if (!tb(a)) throw Error(\"Unmatched start-group tag: stream EOF\");\n                    if (4 == a.i) {\n                        if (a.l != b) throw Error(\"Unmatched end-group tag\");\n                        break;\n                    }\n                    ub(a);\n                }while (1);\n                break;\n            default:\n                throw Xa(a.i, a.j);\n        }\n    }\n    var vb = [];\n    function wb() {\n        this.j = [];\n        this.i = 0;\n        this.h = new qb;\n    }\n    function O(a, b) {\n        0 !== b.length && (a.j.push(b), a.i += b.length);\n    }\n    function xb(a, b) {\n        if (b = b.R) {\n            O(a, a.h.end());\n            for(var c = 0; c < b.length; c++)O(a, jb(b[c]) || Oa());\n        }\n    }\n    ;\n    var P = \"function\" === typeof Symbol && \"symbol\" === typeof Symbol() ? Symbol() : void 0;\n    function Q(a, b) {\n        if (P) return a[P] |= b;\n        if (void 0 !== a.A) return a.A |= b;\n        Object.defineProperties(a, {\n            A: {\n                value: b,\n                configurable: !0,\n                writable: !0,\n                enumerable: !1\n            }\n        });\n        return b;\n    }\n    function yb(a, b) {\n        P ? a[P] && (a[P] &= ~b) : void 0 !== a.A && (a.A &= ~b);\n    }\n    function R(a) {\n        var b;\n        P ? b = a[P] : b = a.A;\n        return null == b ? 0 : b;\n    }\n    function S(a, b) {\n        P ? a[P] = b : void 0 !== a.A ? a.A = b : Object.defineProperties(a, {\n            A: {\n                value: b,\n                configurable: !0,\n                writable: !0,\n                enumerable: !1\n            }\n        });\n    }\n    function zb(a) {\n        Q(a, 1);\n        return a;\n    }\n    function Ab(a, b) {\n        S(b, (a | 0) & -51);\n    }\n    function Bb(a, b) {\n        S(b, (a | 18) & -41);\n    }\n    ;\n    var Cb = {};\n    function Db(a) {\n        return null !== a && \"object\" === typeof a && !Array.isArray(a) && a.constructor === Object;\n    }\n    var Eb, Fb = [];\n    S(Fb, 23);\n    Eb = Object.freeze(Fb);\n    function Gb(a) {\n        if (R(a.o) & 2) throw Error(\"Cannot mutate an immutable Message\");\n    }\n    function Hb(a) {\n        var b = a.length;\n        (b = b ? a[b - 1] : void 0) && Db(b) ? b.g = 1 : (b = {}, a.push((b.g = 1, b)));\n    }\n    ;\n    function Ib(a) {\n        var b = a.i + a.G;\n        return a.B || (a.B = a.o[b] = {});\n    }\n    function T(a, b) {\n        return -1 === b ? null : b >= a.i ? a.B ? a.B[b] : void 0 : a.o[b + a.G];\n    }\n    function V(a, b, c, d) {\n        Gb(a);\n        Jb(a, b, c, d);\n    }\n    function Jb(a, b, c, d) {\n        a.j && (a.j = void 0);\n        b >= a.i || d ? Ib(a)[b] = c : (a.o[b + a.G] = c, (a = a.B) && b in a && delete a[b]);\n    }\n    function Kb(a, b, c, d) {\n        var e = T(a, b);\n        Array.isArray(e) || (e = Eb);\n        var g = R(e);\n        g & 1 || zb(e);\n        if (d) g & 2 || Q(e, 2), c & 1 || Object.freeze(e);\n        else {\n            d = !(c & 2);\n            var f = g & 2;\n            c & 1 || !f ? d && g & 16 && !f && yb(e, 16) : (e = zb(Array.prototype.slice.call(e)), Jb(a, b, e));\n        }\n        return e;\n    }\n    function Lb(a, b) {\n        var c = T(a, b);\n        var d = null == c ? c : \"number\" === typeof c || \"NaN\" === c || \"Infinity\" === c || \"-Infinity\" === c ? Number(c) : void 0;\n        null != d && d !== c && Jb(a, b, d);\n        return d;\n    }\n    function Mb(a, b, c, d, e) {\n        a.h || (a.h = {});\n        var g = a.h[c], f = Kb(a, c, 3, e);\n        if (!g) {\n            var h = f;\n            g = [];\n            var k = !!(R(a.o) & 16);\n            f = !!(R(h) & 2);\n            var l = h;\n            !e && f && (h = Array.prototype.slice.call(h));\n            for(var m = f, r = 0; r < h.length; r++){\n                var p = h[r];\n                var n = b, q = !1;\n                q = void 0 === q ? !1 : q;\n                p = Array.isArray(p) ? new n(p) : q ? new n : void 0;\n                if (void 0 !== p) {\n                    n = p.o;\n                    var t = q = R(n);\n                    f && (t |= 2);\n                    k && (t |= 16);\n                    t != q && S(n, t);\n                    n = t;\n                    m = m || !!(2 & n);\n                    g.push(p);\n                }\n            }\n            a.h[c] = g;\n            k = R(h);\n            b = k | 33;\n            b = m ? b & -9 : b | 8;\n            k != b && (m = h, Object.isFrozen(m) && (m = Array.prototype.slice.call(m)), S(m, b), h = m);\n            l !== h && Jb(a, c, h);\n            (e || d && f) && Q(g, 2);\n            d && Object.freeze(g);\n            return g;\n        }\n        e || (e = Object.isFrozen(g), d && !e ? Object.freeze(g) : !d && e && (g = Array.prototype.slice.call(g), a.h[c] = g));\n        return g;\n    }\n    function Nb(a, b, c) {\n        var d = !!(R(a.o) & 2);\n        b = Mb(a, b, c, d, d);\n        a = Kb(a, c, 3, d);\n        if (!(d || R(a) & 8)) {\n            for(d = 0; d < b.length; d++){\n                c = b[d];\n                if (R(c.o) & 2) {\n                    var e = Ob(c, !1);\n                    e.j = c;\n                } else e = c;\n                c !== e && (b[d] = e, a[d] = e.o);\n            }\n            Q(a, 8);\n        }\n        return b;\n    }\n    function W(a, b, c) {\n        if (null != c && \"number\" !== typeof c) throw Error(\"Value of float/double field must be a number|null|undefined, found \" + typeof c + \": \" + c);\n        V(a, b, c);\n    }\n    function Pb(a, b, c, d, e) {\n        Gb(a);\n        var g = Mb(a, c, b, !1, !1);\n        c = null != d ? d : new c;\n        a = Kb(a, b, 2, !1);\n        void 0 != e ? (g.splice(e, 0, c), a.splice(e, 0, c.o)) : (g.push(c), a.push(c.o));\n        c.C() && yb(a, 8);\n        return c;\n    }\n    function Qb(a, b) {\n        return null == a ? b : a;\n    }\n    function X(a, b, c) {\n        c = void 0 === c ? 0 : c;\n        return Qb(Lb(a, b), c);\n    }\n    ;\n    var Rb;\n    function Sb(a) {\n        switch(typeof a){\n            case \"number\":\n                return isFinite(a) ? a : String(a);\n            case \"object\":\n                if (a) if (Array.isArray(a)) {\n                    if (0 !== (R(a) & 128)) return a = Array.prototype.slice.call(a), Hb(a), a;\n                } else {\n                    if (Ha && null != a && a instanceof Uint8Array) return Ja(a);\n                    if (a instanceof hb) {\n                        var b = a.V;\n                        return null == b ? \"\" : \"string\" === typeof b ? b : a.V = Ja(b);\n                    }\n                }\n        }\n        return a;\n    }\n    ;\n    function Tb(a, b, c, d) {\n        if (null != a) {\n            if (Array.isArray(a)) a = Ub(a, b, c, void 0 !== d);\n            else if (Db(a)) {\n                var e = {}, g;\n                for(g in a)e[g] = Tb(a[g], b, c, d);\n                a = e;\n            } else a = b(a, d);\n            return a;\n        }\n    }\n    function Ub(a, b, c, d) {\n        var e = R(a);\n        d = d ? !!(e & 16) : void 0;\n        a = Array.prototype.slice.call(a);\n        for(var g = 0; g < a.length; g++)a[g] = Tb(a[g], b, c, d);\n        c(e, a);\n        return a;\n    }\n    function Vb(a) {\n        return a.ja === Cb ? a.toJSON() : Sb(a);\n    }\n    function Wb(a, b) {\n        a & 128 && Hb(b);\n    }\n    ;\n    function Xb(a, b, c) {\n        c = void 0 === c ? Bb : c;\n        if (null != a) {\n            if (Ha && a instanceof Uint8Array) return a.length ? new hb(new Uint8Array(a), Pa) : ib();\n            if (Array.isArray(a)) {\n                var d = R(a);\n                if (d & 2) return a;\n                if (b && !(d & 32) && (d & 16 || 0 === d)) return S(a, d | 2), a;\n                a = Ub(a, Xb, d & 4 ? Bb : c, !0);\n                b = R(a);\n                b & 4 && b & 2 && Object.freeze(a);\n                return a;\n            }\n            return a.ja === Cb ? Yb(a) : a;\n        }\n    }\n    function Zb(a, b, c, d, e, g, f) {\n        if (a = a.h && a.h[c]) {\n            d = R(a);\n            d & 2 ? d = a : (g = Ba(a, Yb), Bb(d, g), Object.freeze(g), d = g);\n            Gb(b);\n            f = null == d ? Eb : zb([]);\n            if (null != d) {\n                g = !!d.length;\n                for(a = 0; a < d.length; a++){\n                    var h = d[a];\n                    g = g && !(R(h.o) & 2);\n                    f[a] = h.o;\n                }\n                g = (g ? 8 : 0) | 1;\n                a = R(f);\n                (a & g) !== g && (Object.isFrozen(f) && (f = Array.prototype.slice.call(f)), S(f, a | g));\n                b.h || (b.h = {});\n                b.h[c] = d;\n            } else b.h && (b.h[c] = void 0);\n            Jb(b, c, f, e);\n        } else V(b, c, Xb(d, g, f), e);\n    }\n    function Yb(a) {\n        if (R(a.o) & 2) return a;\n        a = Ob(a, !0);\n        Q(a.o, 2);\n        return a;\n    }\n    function Ob(a, b) {\n        var c = a.o, d = [];\n        Q(d, 16);\n        var e = a.constructor.h;\n        e && d.push(e);\n        e = a.B;\n        if (e) {\n            d.length = c.length;\n            d.fill(void 0, d.length, c.length);\n            var g = {};\n            d[d.length - 1] = g;\n        }\n        0 !== (R(c) & 128) && Hb(d);\n        b = b || a.C() ? Bb : Ab;\n        g = a.constructor;\n        Rb = d;\n        d = new g(d);\n        Rb = void 0;\n        a.R && (d.R = a.R.slice());\n        g = !!(R(c) & 16);\n        for(var f = e ? c.length - 1 : c.length, h = 0; h < f; h++)Zb(a, d, h - a.G, c[h], !1, g, b);\n        if (e) for(var k in e)Zb(a, d, +k, e[k], !0, g, b);\n        return d;\n    }\n    ;\n    function Y(a, b, c) {\n        null == a && (a = Rb);\n        Rb = void 0;\n        var d = this.constructor.i || 0, e = 0 < d, g = this.constructor.h, f = !1;\n        if (null == a) {\n            a = g ? [\n                g\n            ] : [];\n            var h = 48;\n            var k = !0;\n            e && (d = 0, h |= 128);\n            S(a, h);\n        } else {\n            if (!Array.isArray(a)) throw Error();\n            if (g && g !== a[0]) throw Error();\n            var l = h = Q(a, 0);\n            if (k = 0 !== (16 & l)) (f = 0 !== (32 & l)) || (l |= 32);\n            if (e) if (128 & l) d = 0;\n            else {\n                if (0 < a.length) {\n                    var m = a[a.length - 1];\n                    if (Db(m) && \"g\" in m) {\n                        d = 0;\n                        l |= 128;\n                        delete m.g;\n                        var r = !0, p;\n                        for(p in m){\n                            r = !1;\n                            break;\n                        }\n                        r && a.pop();\n                    }\n                }\n            }\n            else if (128 & l) throw Error();\n            h !== l && S(a, l);\n        }\n        this.G = (g ? 0 : -1) - d;\n        this.h = void 0;\n        this.o = a;\n        a: {\n            g = this.o.length;\n            d = g - 1;\n            if (g && (g = this.o[d], Db(g))) {\n                this.B = g;\n                this.i = d - this.G;\n                break a;\n            }\n            void 0 !== b && -1 < b ? (this.i = Math.max(b, d + 1 - this.G), this.B = void 0) : this.i = Number.MAX_VALUE;\n        }\n        if (!e && this.B && \"g\" in this.B) throw Error('Unexpected \"g\" flag in sparse object of message that is not a group type.');\n        if (c) {\n            b = k && !f && !0;\n            e = this.i;\n            var n;\n            for(k = 0; k < c.length; k++)f = c[k], f < e ? (f += this.G, (d = a[f]) ? $b(d, b) : a[f] = Eb) : (n || (n = Ib(this)), (d = n[f]) ? $b(d, b) : n[f] = Eb);\n        }\n    }\n    Y.prototype.toJSON = function() {\n        return Ub(this.o, Vb, Wb);\n    };\n    Y.prototype.C = function() {\n        return !!(R(this.o) & 2);\n    };\n    function $b(a, b) {\n        if (Array.isArray(a)) {\n            var c = R(a), d = 1;\n            !b || c & 2 || (d |= 16);\n            (c & d) !== d && S(a, c | d);\n        }\n    }\n    Y.prototype.ja = Cb;\n    Y.prototype.toString = function() {\n        return this.o.toString();\n    };\n    function ac(a, b, c) {\n        if (c) {\n            var d = {}, e;\n            for(e in c){\n                var g = c[e], f = g.ra;\n                f || (d.J = g.xa || g.oa.W, g.ia ? (d.aa = bc(g.ia), f = function(h) {\n                    return function(k, l, m) {\n                        return h.J(k, l, m, h.aa);\n                    };\n                }(d)) : g.ka ? (d.Z = cc(g.da.P, g.ka), f = function(h) {\n                    return function(k, l, m) {\n                        return h.J(k, l, m, h.Z);\n                    };\n                }(d)) : f = d.J, g.ra = f);\n                f(b, a, g.da);\n                d = {\n                    J: d.J,\n                    aa: d.aa,\n                    Z: d.Z\n                };\n            }\n        }\n        xb(b, a);\n    }\n    var dc = Symbol();\n    function ec(a, b, c) {\n        return a[dc] || (a[dc] = function(d, e) {\n            return b(d, e, c);\n        });\n    }\n    function fc(a) {\n        var b = a[dc];\n        if (!b) {\n            var c = gc(a);\n            b = function(d, e) {\n                return hc(d, e, c);\n            };\n            a[dc] = b;\n        }\n        return b;\n    }\n    function ic(a) {\n        var b = a.ia;\n        if (b) return fc(b);\n        if (b = a.wa) return ec(a.da.P, b, a.ka);\n    }\n    function jc(a) {\n        var b = ic(a), c = a.da, d = a.oa.U;\n        return b ? function(e, g) {\n            return d(e, g, c, b);\n        } : function(e, g) {\n            return d(e, g, c);\n        };\n    }\n    function kc(a, b) {\n        var c = a[b];\n        \"function\" == typeof c && 0 === c.length && (c = c(), a[b] = c);\n        return Array.isArray(c) && (lc in c || mc in c || 0 < c.length && \"function\" == typeof c[0]) ? c : void 0;\n    }\n    function nc(a, b, c, d, e, g) {\n        b.P = a[0];\n        var f = 1;\n        if (a.length > f && \"number\" !== typeof a[f]) {\n            var h = a[f++];\n            c(b, h);\n        }\n        for(; f < a.length;){\n            c = a[f++];\n            for(var k = f + 1; k < a.length && \"number\" !== typeof a[k];)k++;\n            h = a[f++];\n            k -= f;\n            switch(k){\n                case 0:\n                    d(b, c, h);\n                    break;\n                case 1:\n                    (k = kc(a, f)) ? (f++, e(b, c, h, k)) : d(b, c, h, a[f++]);\n                    break;\n                case 2:\n                    k = f++;\n                    k = kc(a, k);\n                    e(b, c, h, k, a[f++]);\n                    break;\n                case 3:\n                    g(b, c, h, a[f++], a[f++], a[f++]);\n                    break;\n                case 4:\n                    g(b, c, h, a[f++], a[f++], a[f++], a[f++]);\n                    break;\n                default:\n                    throw Error(\"unexpected number of binary field arguments: \" + k);\n            }\n        }\n        return b;\n    }\n    var oc = Symbol();\n    function bc(a) {\n        var b = a[oc];\n        if (!b) {\n            var c = pc(a);\n            b = function(d, e) {\n                return qc(d, e, c);\n            };\n            a[oc] = b;\n        }\n        return b;\n    }\n    function cc(a, b) {\n        var c = a[oc];\n        c || (c = function(d, e) {\n            return ac(d, e, b);\n        }, a[oc] = c);\n        return c;\n    }\n    var mc = Symbol();\n    function rc(a, b) {\n        a.push(b);\n    }\n    function sc(a, b, c) {\n        a.push(b, c.W);\n    }\n    function tc(a, b, c, d) {\n        var e = bc(d), g = pc(d).P, f = c.W;\n        a.push(b, function(h, k, l) {\n            return f(h, k, l, g, e);\n        });\n    }\n    function uc(a, b, c, d, e, g) {\n        var f = cc(d, g), h = c.W;\n        a.push(b, function(k, l, m) {\n            return h(k, l, m, d, f);\n        });\n    }\n    function pc(a) {\n        var b = a[mc];\n        if (b) return b;\n        b = nc(a, a[mc] = [], rc, sc, tc, uc);\n        lc in a && mc in a && (a.length = 0);\n        return b;\n    }\n    var lc = Symbol();\n    function vc(a, b) {\n        a[0] = b;\n    }\n    function wc(a, b, c, d) {\n        var e = c.U;\n        a[b] = d ? function(g, f, h) {\n            return e(g, f, h, d);\n        } : e;\n    }\n    function xc(a, b, c, d, e) {\n        var g = c.U, f = fc(d), h = gc(d).P;\n        a[b] = function(k, l, m) {\n            return g(k, l, m, h, f, e);\n        };\n    }\n    function yc(a, b, c, d, e, g, f) {\n        var h = c.U, k = ec(d, e, g);\n        a[b] = function(l, m, r) {\n            return h(l, m, r, d, k, f);\n        };\n    }\n    function gc(a) {\n        var b = a[lc];\n        if (b) return b;\n        b = nc(a, a[lc] = {}, vc, wc, xc, yc);\n        lc in a && mc in a && (a.length = 0);\n        return b;\n    }\n    function hc(a, b, c) {\n        for(; tb(b) && 4 != b.i;){\n            var d = b.l, e = c[d];\n            if (!e) {\n                var g = c[0];\n                g && (g = g[d]) && (e = c[d] = jc(g));\n            }\n            if (!e || !e(b, a, d)) {\n                e = b;\n                d = a;\n                g = e.j;\n                ub(e);\n                var f = e;\n                if (!f.ca) {\n                    e = f.h.h - g;\n                    f.h.h = g;\n                    f = f.h;\n                    if (0 == e) e = ib();\n                    else {\n                        g = ob(f, e);\n                        if (f.S && f.m) e = f.i.subarray(g, g + e);\n                        else {\n                            f = f.i;\n                            var h = g;\n                            e = g + e;\n                            e = h === e ? Oa() : Qa ? f.slice(h, e) : new Uint8Array(f.subarray(h, e));\n                        }\n                        e = 0 == e.length ? ib() : new hb(e, Pa);\n                    }\n                    (g = d.R) ? g.push(e) : d.R = [\n                        e\n                    ];\n                }\n            }\n        }\n        return a;\n    }\n    function qc(a, b, c) {\n        for(var d = c.length, e = 1 == d % 2, g = e ? 1 : 0; g < d; g += 2)(0, c[g + 1])(b, a, c[g]);\n        ac(a, b, e ? c[0] : void 0);\n    }\n    function zc(a, b) {\n        return {\n            U: a,\n            W: b\n        };\n    }\n    var Z = zc(function(a, b, c) {\n        if (5 !== a.i) return !1;\n        a = a.h;\n        var d = a.i, e = a.h, g = d[e];\n        var f = d[e + 1];\n        var h = d[e + 2];\n        d = d[e + 3];\n        M(a, a.h + 4);\n        f = (g << 0 | f << 8 | h << 16 | d << 24) >>> 0;\n        a = 2 * (f >> 31) + 1;\n        g = f >>> 23 & 255;\n        f &= 8388607;\n        V(b, c, 255 == g ? f ? NaN : Infinity * a : 0 == g ? a * Math.pow(2, -149) * f : a * Math.pow(2, g - 150) * (f + Math.pow(2, 23)));\n        return !0;\n    }, function(a, b, c) {\n        b = Lb(b, c);\n        if (null != b) {\n            N(a.h, 8 * c + 5);\n            a = a.h;\n            var d = +b;\n            0 === d ? 0 < 1 / d ? H = K = 0 : (K = 0, H = 2147483648) : isNaN(d) ? (K = 0, H = 2147483647) : (d = (c = 0 > d ? -2147483648 : 0) ? -d : d, 3.4028234663852886E38 < d ? (K = 0, H = (c | 2139095040) >>> 0) : 1.1754943508222875E-38 > d ? (d = Math.round(d / Math.pow(2, -149)), K = 0, H = (c | d) >>> 0) : (b = Math.floor(Math.log(d) / Math.LN2), d *= Math.pow(2, -b), d = Math.round(8388608 * d), 16777216 <= d && ++b, K = 0, H = (c | b + 127 << 23 | d & 8388607) >>> 0));\n            c = H;\n            a.h.push(c >>> 0 & 255);\n            a.h.push(c >>> 8 & 255);\n            a.h.push(c >>> 16 & 255);\n            a.h.push(c >>> 24 & 255);\n        }\n    }), Ac = zc(function(a, b, c) {\n        if (0 !== a.i) return !1;\n        var d = a.h, e = 0, g = a = 0, f = d.i, h = d.h;\n        do {\n            var k = f[h++];\n            e |= (k & 127) << g;\n            g += 7;\n        }while (32 > g && k & 128);\n        32 < g && (a |= (k & 127) >> 4);\n        for(g = 3; 32 > g && k & 128; g += 7)k = f[h++], a |= (k & 127) << g;\n        M(d, h);\n        if (128 > k) {\n            d = e >>> 0;\n            k = a >>> 0;\n            if (a = k & 2147483648) d = ~d + 1 >>> 0, k = ~k >>> 0, 0 == d && (k = k + 1 >>> 0);\n            d = 4294967296 * k + (d >>> 0);\n        } else throw Ya();\n        V(b, c, a ? -d : d);\n        return !0;\n    }, function(a, b, c) {\n        b = T(b, c);\n        null != b && (\"string\" === typeof b && Va(b), null != b && (N(a.h, 8 * c), \"number\" === typeof b ? (a = a.h, Ra(b), rb(a, H, K)) : (c = Va(b), rb(a.h, c.i, c.h))));\n    }), Bc = zc(function(a, b, c) {\n        if (0 !== a.i) return !1;\n        V(b, c, nb(a.h));\n        return !0;\n    }, function(a, b, c) {\n        b = T(b, c);\n        if (null != b && null != b) if (N(a.h, 8 * c), a = a.h, c = b, 0 <= c) N(a, c);\n        else {\n            for(b = 0; 9 > b; b++)a.h.push(c & 127 | 128), c >>= 7;\n            a.h.push(1);\n        }\n    }), Cc = zc(function(a, b, c) {\n        if (2 !== a.i) return !1;\n        var d = nb(a.h) >>> 0;\n        a = a.h;\n        var e = ob(a, d);\n        a = a.i;\n        if (cb) {\n            var g = a, f;\n            (f = bb) || (f = bb = new TextDecoder(\"utf-8\", {\n                fatal: !0\n            }));\n            a = e + d;\n            g = 0 === e && a === g.length ? g : g.subarray(e, a);\n            try {\n                var h = f.decode(g);\n            } catch (r) {\n                if (void 0 === ab) {\n                    try {\n                        f.decode(new Uint8Array([\n                            128\n                        ]));\n                    } catch (p) {}\n                    try {\n                        f.decode(new Uint8Array([\n                            97\n                        ])), ab = !0;\n                    } catch (p) {\n                        ab = !1;\n                    }\n                }\n                !ab && (bb = void 0);\n                throw r;\n            }\n        } else {\n            h = e;\n            d = h + d;\n            e = [];\n            for(var k = null, l, m; h < d;)l = a[h++], 128 > l ? e.push(l) : 224 > l ? h >= d ? L() : (m = a[h++], 194 > l || 128 !== (m & 192) ? (h--, L()) : e.push((l & 31) << 6 | m & 63)) : 240 > l ? h >= d - 1 ? L() : (m = a[h++], 128 !== (m & 192) || 224 === l && 160 > m || 237 === l && 160 <= m || 128 !== ((g = a[h++]) & 192) ? (h--, L()) : e.push((l & 15) << 12 | (m & 63) << 6 | g & 63)) : 244 >= l ? h >= d - 2 ? L() : (m = a[h++], 128 !== (m & 192) || 0 !== (l << 28) + (m - 144) >> 30 || 128 !== ((g = a[h++]) & 192) || 128 !== ((f = a[h++]) & 192) ? (h--, L()) : (l = (l & 7) << 18 | (m & 63) << 12 | (g & 63) << 6 | f & 63, l -= 65536, e.push((l >> 10 & 1023) + 55296, (l & 1023) + 56320))) : L(), 8192 <= e.length && (k = $a(k, e), e.length = 0);\n            h = $a(k, e);\n        }\n        V(b, c, h);\n        return !0;\n    }, function(a, b, c) {\n        b = T(b, c);\n        if (null != b) {\n            var d = !1;\n            d = void 0 === d ? !1 : d;\n            if (eb) {\n                if (d && /(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])/.test(b)) throw Error(\"Found an unpaired surrogate\");\n                b = (db || (db = new TextEncoder)).encode(b);\n            } else {\n                for(var e = 0, g = new Uint8Array(3 * b.length), f = 0; f < b.length; f++){\n                    var h = b.charCodeAt(f);\n                    if (128 > h) g[e++] = h;\n                    else {\n                        if (2048 > h) g[e++] = h >> 6 | 192;\n                        else {\n                            if (55296 <= h && 57343 >= h) {\n                                if (56319 >= h && f < b.length) {\n                                    var k = b.charCodeAt(++f);\n                                    if (56320 <= k && 57343 >= k) {\n                                        h = 1024 * (h - 55296) + k - 56320 + 65536;\n                                        g[e++] = h >> 18 | 240;\n                                        g[e++] = h >> 12 & 63 | 128;\n                                        g[e++] = h >> 6 & 63 | 128;\n                                        g[e++] = h & 63 | 128;\n                                        continue;\n                                    } else f--;\n                                }\n                                if (d) throw Error(\"Found an unpaired surrogate\");\n                                h = 65533;\n                            }\n                            g[e++] = h >> 12 | 224;\n                            g[e++] = h >> 6 & 63 | 128;\n                        }\n                        g[e++] = h & 63 | 128;\n                    }\n                }\n                b = e === g.length ? g : g.subarray(0, e);\n            }\n            N(a.h, 8 * c + 2);\n            N(a.h, b.length);\n            O(a, a.h.end());\n            O(a, b);\n        }\n    }), Dc = zc(function(a, b, c, d, e) {\n        if (2 !== a.i) return !1;\n        b = Pb(b, c, d);\n        c = a.h.j;\n        d = nb(a.h) >>> 0;\n        var g = a.h.h + d, f = g - c;\n        0 >= f && (a.h.j = g, e(b, a, void 0, void 0, void 0), f = g - a.h.h);\n        if (f) throw Error(\"Message parsing ended unexpectedly. Expected to read \" + (d + \" bytes, instead read \" + (d - f) + \" bytes, either the data ended unexpectedly or the message misreported its own length\"));\n        a.h.h = g;\n        a.h.j = c;\n        return !0;\n    }, function(a, b, c, d, e) {\n        b = Nb(b, d, c);\n        if (null != b) for(d = 0; d < b.length; d++){\n            var g = a;\n            N(g.h, 8 * c + 2);\n            var f = g.h.end();\n            O(g, f);\n            f.push(g.i);\n            g = f;\n            e(b[d], a);\n            f = a;\n            var h = g.pop();\n            for(h = f.i + f.h.length() - h; 127 < h;)g.push(h & 127 | 128), h >>>= 7, f.i++;\n            g.push(h);\n            f.i++;\n        }\n    });\n    function Ec(a) {\n        return function(b, c) {\n            a: {\n                if (vb.length) {\n                    var d = vb.pop();\n                    d.setOptions(c);\n                    mb(d.h, b, c);\n                    b = d;\n                } else b = new sb(b, c);\n                try {\n                    var e = gc(a);\n                    var g = hc(new e.P, b, e);\n                    break a;\n                } finally{\n                    e = b.h, e.i = null, e.m = !1, e.l = 0, e.j = 0, e.h = 0, e.S = !1, b.l = -1, b.i = -1, 100 > vb.length && vb.push(b);\n                }\n                g = void 0;\n            }\n            return g;\n        };\n    }\n    function Fc(a) {\n        return function() {\n            var b = new wb;\n            qc(this, b, pc(a));\n            O(b, b.h.end());\n            for(var c = new Uint8Array(b.i), d = b.j, e = d.length, g = 0, f = 0; f < e; f++){\n                var h = d[f];\n                c.set(h, g);\n                g += h.length;\n            }\n            b.j = [\n                c\n            ];\n            return c;\n        };\n    }\n    ;\n    function Gc(a) {\n        Y.call(this, a);\n    }\n    na(Gc, Y);\n    var Hc = [\n        Gc,\n        1,\n        Bc,\n        2,\n        Z,\n        3,\n        Cc,\n        4,\n        Cc\n    ];\n    Gc.prototype.l = Fc(Hc);\n    function Ic(a) {\n        Y.call(this, a, -1, Jc);\n    }\n    na(Ic, Y);\n    Ic.prototype.addClassification = function(a, b) {\n        Pb(this, 1, Gc, a, b);\n        return this;\n    };\n    var Jc = [\n        1\n    ], Kc = Ec([\n        Ic,\n        1,\n        Dc,\n        Hc\n    ]);\n    function Lc(a) {\n        Y.call(this, a);\n    }\n    na(Lc, Y);\n    var Mc = [\n        Lc,\n        1,\n        Z,\n        2,\n        Z,\n        3,\n        Z,\n        4,\n        Z,\n        5,\n        Z\n    ];\n    Lc.prototype.l = Fc(Mc);\n    function Nc(a) {\n        Y.call(this, a, -1, Oc);\n    }\n    na(Nc, Y);\n    var Oc = [\n        1\n    ], Pc = Ec([\n        Nc,\n        1,\n        Dc,\n        Mc\n    ]);\n    function Qc(a) {\n        Y.call(this, a);\n    }\n    na(Qc, Y);\n    var Rc = [\n        Qc,\n        1,\n        Z,\n        2,\n        Z,\n        3,\n        Z,\n        4,\n        Z,\n        5,\n        Z,\n        6,\n        Ac\n    ], Sc = Ec(Rc);\n    Qc.prototype.l = Fc(Rc);\n    function Tc(a, b, c) {\n        c = a.createShader(0 === c ? a.VERTEX_SHADER : a.FRAGMENT_SHADER);\n        a.shaderSource(c, b);\n        a.compileShader(c);\n        if (!a.getShaderParameter(c, a.COMPILE_STATUS)) throw Error(\"Could not compile WebGL shader.\\n\\n\" + a.getShaderInfoLog(c));\n        return c;\n    }\n    ;\n    function Uc(a) {\n        return Nb(a, Gc, 1).map(function(b) {\n            var c = T(b, 1);\n            return {\n                index: null == c ? 0 : c,\n                qa: X(b, 2),\n                label: null != T(b, 3) ? Qb(T(b, 3), \"\") : void 0,\n                displayName: null != T(b, 4) ? Qb(T(b, 4), \"\") : void 0\n            };\n        });\n    }\n    ;\n    function Vc(a) {\n        return {\n            x: X(a, 1),\n            y: X(a, 2),\n            z: X(a, 3),\n            visibility: null != Lb(a, 4) ? X(a, 4) : void 0\n        };\n    }\n    function Wc(a) {\n        return Nb(Pc(a), Lc, 1).map(Vc);\n    }\n    ;\n    function Xc(a, b) {\n        this.i = a;\n        this.h = b;\n        this.m = 0;\n    }\n    function Yc(a, b, c) {\n        Zc(a, b);\n        if (\"function\" === typeof a.h.canvas.transferToImageBitmap) return Promise.resolve(a.h.canvas.transferToImageBitmap());\n        if (c) return Promise.resolve(a.h.canvas);\n        if (\"function\" === typeof createImageBitmap) return createImageBitmap(a.h.canvas);\n        void 0 === a.j && (a.j = document.createElement(\"canvas\"));\n        return new Promise(function(d) {\n            a.j.height = a.h.canvas.height;\n            a.j.width = a.h.canvas.width;\n            a.j.getContext(\"2d\", {}).drawImage(a.h.canvas, 0, 0, a.h.canvas.width, a.h.canvas.height);\n            d(a.j);\n        });\n    }\n    function Zc(a, b) {\n        var c = a.h;\n        if (void 0 === a.s) {\n            var d = Tc(c, \"\\n  attribute vec2 aVertex;\\n  attribute vec2 aTex;\\n  varying vec2 vTex;\\n  void main(void) {\\n    gl_Position = vec4(aVertex, 0.0, 1.0);\\n    vTex = aTex;\\n  }\", 0), e = Tc(c, \"\\n  precision mediump float;\\n  varying vec2 vTex;\\n  uniform sampler2D sampler0;\\n  void main(){\\n    gl_FragColor = texture2D(sampler0, vTex);\\n  }\", 1), g = c.createProgram();\n            c.attachShader(g, d);\n            c.attachShader(g, e);\n            c.linkProgram(g);\n            if (!c.getProgramParameter(g, c.LINK_STATUS)) throw Error(\"Could not compile WebGL program.\\n\\n\" + c.getProgramInfoLog(g));\n            d = a.s = g;\n            c.useProgram(d);\n            e = c.getUniformLocation(d, \"sampler0\");\n            a.l = {\n                O: c.getAttribLocation(d, \"aVertex\"),\n                N: c.getAttribLocation(d, \"aTex\"),\n                ya: e\n            };\n            a.v = c.createBuffer();\n            c.bindBuffer(c.ARRAY_BUFFER, a.v);\n            c.enableVertexAttribArray(a.l.O);\n            c.vertexAttribPointer(a.l.O, 2, c.FLOAT, !1, 0, 0);\n            c.bufferData(c.ARRAY_BUFFER, new Float32Array([\n                -1,\n                -1,\n                -1,\n                1,\n                1,\n                1,\n                1,\n                -1\n            ]), c.STATIC_DRAW);\n            c.bindBuffer(c.ARRAY_BUFFER, null);\n            a.u = c.createBuffer();\n            c.bindBuffer(c.ARRAY_BUFFER, a.u);\n            c.enableVertexAttribArray(a.l.N);\n            c.vertexAttribPointer(a.l.N, 2, c.FLOAT, !1, 0, 0);\n            c.bufferData(c.ARRAY_BUFFER, new Float32Array([\n                0,\n                1,\n                0,\n                0,\n                1,\n                0,\n                1,\n                1\n            ]), c.STATIC_DRAW);\n            c.bindBuffer(c.ARRAY_BUFFER, null);\n            c.uniform1i(e, 0);\n        }\n        d = a.l;\n        c.useProgram(a.s);\n        c.canvas.width = b.width;\n        c.canvas.height = b.height;\n        c.viewport(0, 0, b.width, b.height);\n        c.activeTexture(c.TEXTURE0);\n        a.i.bindTexture2d(b.glName);\n        c.enableVertexAttribArray(d.O);\n        c.bindBuffer(c.ARRAY_BUFFER, a.v);\n        c.vertexAttribPointer(d.O, 2, c.FLOAT, !1, 0, 0);\n        c.enableVertexAttribArray(d.N);\n        c.bindBuffer(c.ARRAY_BUFFER, a.u);\n        c.vertexAttribPointer(d.N, 2, c.FLOAT, !1, 0, 0);\n        c.bindFramebuffer(c.DRAW_FRAMEBUFFER ? c.DRAW_FRAMEBUFFER : c.FRAMEBUFFER, null);\n        c.clearColor(0, 0, 0, 0);\n        c.clear(c.COLOR_BUFFER_BIT);\n        c.colorMask(!0, !0, !0, !0);\n        c.drawArrays(c.TRIANGLE_FAN, 0, 4);\n        c.disableVertexAttribArray(d.O);\n        c.disableVertexAttribArray(d.N);\n        c.bindBuffer(c.ARRAY_BUFFER, null);\n        a.i.bindTexture2d(0);\n    }\n    function $c(a) {\n        this.h = a;\n    }\n    ;\n    var ad = new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        10,\n        9,\n        1,\n        7,\n        0,\n        65,\n        0,\n        253,\n        15,\n        26,\n        11\n    ]);\n    function bd(a, b) {\n        return b + a;\n    }\n    function cd(a, b) {\n        window[a] = b;\n    }\n    function dd(a) {\n        var b = document.createElement(\"script\");\n        b.setAttribute(\"src\", a);\n        b.setAttribute(\"crossorigin\", \"anonymous\");\n        return new Promise(function(c) {\n            b.addEventListener(\"load\", function() {\n                c();\n            }, !1);\n            b.addEventListener(\"error\", function() {\n                c();\n            }, !1);\n            document.body.appendChild(b);\n        });\n    }\n    function ed() {\n        return E(function(a) {\n            switch(a.h){\n                case 1:\n                    return a.s = 2, D(a, WebAssembly.instantiate(ad), 4);\n                case 4:\n                    a.h = 3;\n                    a.s = 0;\n                    break;\n                case 2:\n                    return a.s = 0, a.l = null, a.return(!1);\n                case 3:\n                    return a.return(!0);\n            }\n        });\n    }\n    function fd(a) {\n        this.h = a;\n        this.listeners = {};\n        this.l = {};\n        this.L = {};\n        this.s = {};\n        this.v = {};\n        this.M = this.u = this.ga = !0;\n        this.I = Promise.resolve();\n        this.fa = \"\";\n        this.D = {};\n        this.locateFile = a && a.locateFile || bd;\n        if (false) { var b; }\n        else if (\"undefined\" !== typeof location) b = location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf(\"/\")) + \"/\";\n        else throw Error(\"solutions can only be loaded on a web page or in a web worker\");\n        this.ha = b;\n        if (a.options) {\n            b = A(Object.keys(a.options));\n            for(var c = b.next(); !c.done; c = b.next()){\n                c = c.value;\n                var d = a.options[c].default;\n                void 0 !== d && (this.l[c] = \"function\" === typeof d ? d() : d);\n            }\n        }\n    }\n    x = fd.prototype;\n    x.close = function() {\n        this.j && this.j.delete();\n        return Promise.resolve();\n    };\n    function gd(a) {\n        var b, c, d, e, g, f, h, k, l, m, r;\n        return E(function(p) {\n            switch(p.h){\n                case 1:\n                    if (!a.ga) return p.return();\n                    b = void 0 === a.h.files ? [] : \"function\" === typeof a.h.files ? a.h.files(a.l) : a.h.files;\n                    return D(p, ed(), 2);\n                case 2:\n                    c = p.i;\n                    if (false) {}\n                    if (\"function\" !== typeof importScripts) throw Error(\"solutions can only be loaded on a web page or in a web worker\");\n                    d = b.filter(function(n) {\n                        return void 0 === n.simd || n.simd && c || !n.simd && !c;\n                    }).map(function(n) {\n                        return a.locateFile(n.url, a.ha);\n                    });\n                    importScripts.apply(null, ea(d));\n                    e = a;\n                    return D(p, createMediapipeSolutionsWasm(Module), 6);\n                case 6:\n                    e.i = p.i;\n                    a.m = new OffscreenCanvas(1, 1);\n                    a.i.canvas = a.m;\n                    g = a.i.GL.createContext(a.m, {\n                        antialias: !1,\n                        alpha: !1,\n                        va: \"undefined\" !== typeof WebGL2RenderingContext ? 2 : 1\n                    });\n                    a.i.GL.makeContextCurrent(g);\n                    p.h = 4;\n                    break;\n                case 7:\n                    a.m = document.createElement(\"canvas\");\n                    r = a.m.getContext(\"webgl2\", {});\n                    if (!r && (r = a.m.getContext(\"webgl\", {}), !r)) return alert(\"Failed to create WebGL canvas context when passing video frame.\"), p.return();\n                    a.K = r;\n                    a.i.canvas = a.m;\n                    a.i.createContext(a.m, !0, !0, {});\n                case 4:\n                    a.j = new a.i.SolutionWasm, a.ga = !1, p.h = 0;\n            }\n        });\n    }\n    function id(a) {\n        var b, c, d, e, g, f, h, k;\n        return E(function(l) {\n            if (1 == l.h) {\n                if (a.h.graph && a.h.graph.url && a.fa === a.h.graph.url) return l.return();\n                a.u = !0;\n                if (!a.h.graph || !a.h.graph.url) {\n                    l.h = 2;\n                    return;\n                }\n                a.fa = a.h.graph.url;\n                return D(l, hd(a, a.h.graph.url), 3);\n            }\n            2 != l.h && (b = l.i, a.j.loadGraph(b));\n            c = A(Object.keys(a.D));\n            for(d = c.next(); !d.done; d = c.next())e = d.value, a.j.overrideFile(e, a.D[e]);\n            a.D = {};\n            if (a.h.listeners) for(g = A(a.h.listeners), f = g.next(); !f.done; f = g.next())h = f.value, jd(a, h);\n            k = a.l;\n            a.l = {};\n            a.setOptions(k);\n            l.h = 0;\n        });\n    }\n    x.reset = function() {\n        var a = this;\n        return E(function(b) {\n            a.j && (a.j.reset(), a.s = {}, a.v = {});\n            b.h = 0;\n        });\n    };\n    x.setOptions = function(a, b) {\n        var c = this;\n        if (b = b || this.h.options) {\n            for(var d = [], e = [], g = {}, f = A(Object.keys(a)), h = f.next(); !h.done; g = {\n                X: g.X,\n                Y: g.Y\n            }, h = f.next())if (h = h.value, !(h in this.l && this.l[h] === a[h])) {\n                this.l[h] = a[h];\n                var k = b[h];\n                void 0 !== k && (k.onChange && (g.X = k.onChange, g.Y = a[h], d.push(function(l) {\n                    return function() {\n                        var m;\n                        return E(function(r) {\n                            if (1 == r.h) return D(r, l.X(l.Y), 2);\n                            m = r.i;\n                            !0 === m && (c.u = !0);\n                            r.h = 0;\n                        });\n                    };\n                }(g))), k.graphOptionXref && (h = Object.assign({}, {\n                    calculatorName: \"\",\n                    calculatorIndex: 0\n                }, k.graphOptionXref, {\n                    valueNumber: 1 === k.type ? a[h] : 0,\n                    valueBoolean: 0 === k.type ? a[h] : !1,\n                    valueString: 2 === k.type ? a[h] : \"\"\n                }), e.push(h)));\n            }\n            if (0 !== d.length || 0 !== e.length) this.u = !0, this.H = (void 0 === this.H ? [] : this.H).concat(e), this.F = (void 0 === this.F ? [] : this.F).concat(d);\n        }\n    };\n    function kd(a) {\n        var b, c, d, e, g, f, h;\n        return E(function(k) {\n            switch(k.h){\n                case 1:\n                    if (!a.u) return k.return();\n                    if (!a.F) {\n                        k.h = 2;\n                        break;\n                    }\n                    b = A(a.F);\n                    c = b.next();\n                case 3:\n                    if (c.done) {\n                        k.h = 5;\n                        break;\n                    }\n                    d = c.value;\n                    return D(k, d(), 4);\n                case 4:\n                    c = b.next();\n                    k.h = 3;\n                    break;\n                case 5:\n                    a.F = void 0;\n                case 2:\n                    if (a.H) {\n                        e = new a.i.GraphOptionChangeRequestList;\n                        g = A(a.H);\n                        for(f = g.next(); !f.done; f = g.next())h = f.value, e.push_back(h);\n                        a.j.changeOptions(e);\n                        e.delete();\n                        a.H = void 0;\n                    }\n                    a.u = !1;\n                    k.h = 0;\n            }\n        });\n    }\n    x.initialize = function() {\n        var a = this;\n        return E(function(b) {\n            return 1 == b.h ? D(b, gd(a), 2) : 3 != b.h ? D(b, id(a), 3) : D(b, kd(a), 0);\n        });\n    };\n    function hd(a, b) {\n        var c, d;\n        return E(function(e) {\n            if (b in a.L) return e.return(a.L[b]);\n            c = a.locateFile(b, \"\");\n            d = fetch(c).then(function(g) {\n                return g.arrayBuffer();\n            });\n            a.L[b] = d;\n            return e.return(d);\n        });\n    }\n    x.overrideFile = function(a, b) {\n        this.j ? this.j.overrideFile(a, b) : this.D[a] = b;\n    };\n    x.clearOverriddenFiles = function() {\n        this.D = {};\n        this.j && this.j.clearOverriddenFiles();\n    };\n    x.send = function(a, b) {\n        var c = this, d, e, g, f, h, k, l, m, r;\n        return E(function(p) {\n            switch(p.h){\n                case 1:\n                    if (!c.h.inputs) return p.return();\n                    d = 1E3 * (void 0 === b || null === b ? performance.now() : b);\n                    return D(p, c.I, 2);\n                case 2:\n                    return D(p, c.initialize(), 3);\n                case 3:\n                    e = new c.i.PacketDataList;\n                    g = A(Object.keys(a));\n                    for(f = g.next(); !f.done; f = g.next())if (h = f.value, k = c.h.inputs[h]) {\n                        a: {\n                            var n = a[h];\n                            switch(k.type){\n                                case \"video\":\n                                    var q = c.s[k.stream];\n                                    q || (q = new Xc(c.i, c.K), c.s[k.stream] = q);\n                                    0 === q.m && (q.m = q.i.createTexture());\n                                    if (\"undefined\" !== typeof HTMLVideoElement && n instanceof HTMLVideoElement) {\n                                        var t = n.videoWidth;\n                                        var w = n.videoHeight;\n                                    } else \"undefined\" !== typeof HTMLImageElement && n instanceof HTMLImageElement ? (t = n.naturalWidth, w = n.naturalHeight) : (t = n.width, w = n.height);\n                                    w = {\n                                        glName: q.m,\n                                        width: t,\n                                        height: w\n                                    };\n                                    t = q.h;\n                                    t.canvas.width = w.width;\n                                    t.canvas.height = w.height;\n                                    t.activeTexture(t.TEXTURE0);\n                                    q.i.bindTexture2d(q.m);\n                                    t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, t.RGBA, t.UNSIGNED_BYTE, n);\n                                    q.i.bindTexture2d(0);\n                                    q = w;\n                                    break a;\n                                case \"detections\":\n                                    q = c.s[k.stream];\n                                    q || (q = new $c(c.i), c.s[k.stream] = q);\n                                    q.data || (q.data = new q.h.DetectionListData);\n                                    q.data.reset(n.length);\n                                    for(w = 0; w < n.length; ++w){\n                                        t = n[w];\n                                        var v = q.data, B = v.setBoundingBox, J = w;\n                                        var I = t.la;\n                                        var u = new Qc;\n                                        W(u, 1, I.sa);\n                                        W(u, 2, I.ta);\n                                        W(u, 3, I.height);\n                                        W(u, 4, I.width);\n                                        W(u, 5, I.rotation);\n                                        V(u, 6, I.pa);\n                                        I = u.l();\n                                        B.call(v, J, I);\n                                        if (t.ea) for(v = 0; v < t.ea.length; ++v){\n                                            u = t.ea[v];\n                                            B = q.data;\n                                            J = B.addNormalizedLandmark;\n                                            I = w;\n                                            u = Object.assign({}, u, {\n                                                visibility: u.visibility ? u.visibility : 0\n                                            });\n                                            var C = new Lc;\n                                            W(C, 1, u.x);\n                                            W(C, 2, u.y);\n                                            W(C, 3, u.z);\n                                            u.visibility && W(C, 4, u.visibility);\n                                            u = C.l();\n                                            J.call(B, I, u);\n                                        }\n                                        if (t.ba) for(v = 0; v < t.ba.length; ++v)B = q.data, J = B.addClassification, I = w, u = t.ba[v], C = new Gc, W(C, 2, u.qa), u.index && V(C, 1, u.index), u.label && V(C, 3, u.label), u.displayName && V(C, 4, u.displayName), u = C.l(), J.call(B, I, u);\n                                    }\n                                    q = q.data;\n                                    break a;\n                                default:\n                                    q = {};\n                            }\n                        }\n                        l = q;\n                        m = k.stream;\n                        switch(k.type){\n                            case \"video\":\n                                e.pushTexture2d(Object.assign({}, l, {\n                                    stream: m,\n                                    timestamp: d\n                                }));\n                                break;\n                            case \"detections\":\n                                r = l;\n                                r.stream = m;\n                                r.timestamp = d;\n                                e.pushDetectionList(r);\n                                break;\n                            default:\n                                throw Error(\"Unknown input config type: '\" + k.type + \"'\");\n                        }\n                    }\n                    c.j.send(e);\n                    return D(p, c.I, 4);\n                case 4:\n                    e.delete(), p.h = 0;\n            }\n        });\n    };\n    function ld(a, b, c) {\n        var d, e, g, f, h, k, l, m, r, p, n, q, t, w;\n        return E(function(v) {\n            switch(v.h){\n                case 1:\n                    if (!c) return v.return(b);\n                    d = {};\n                    e = 0;\n                    g = A(Object.keys(c));\n                    for(f = g.next(); !f.done; f = g.next())h = f.value, k = c[h], \"string\" !== typeof k && \"texture\" === k.type && void 0 !== b[k.stream] && ++e;\n                    1 < e && (a.M = !1);\n                    l = A(Object.keys(c));\n                    f = l.next();\n                case 2:\n                    if (f.done) {\n                        v.h = 4;\n                        break;\n                    }\n                    m = f.value;\n                    r = c[m];\n                    if (\"string\" === typeof r) return t = d, w = m, D(v, md(a, m, b[r]), 14);\n                    p = b[r.stream];\n                    if (\"detection_list\" === r.type) {\n                        if (p) {\n                            var B = p.getRectList();\n                            for(var J = p.getLandmarksList(), I = p.getClassificationsList(), u = [], C = 0; C < B.size(); ++C){\n                                var U = Sc(B.get(C)), pd = X(U, 1), qd = X(U, 2), rd = X(U, 3), sd = X(U, 4), td = X(U, 5, 0), za = void 0;\n                                za = void 0 === za ? 0 : za;\n                                U = {\n                                    la: {\n                                        sa: pd,\n                                        ta: qd,\n                                        height: rd,\n                                        width: sd,\n                                        rotation: td,\n                                        pa: Qb(T(U, 6), za)\n                                    },\n                                    ea: Wc(J.get(C)),\n                                    ba: Uc(Kc(I.get(C)))\n                                };\n                                u.push(U);\n                            }\n                            B = u;\n                        } else B = [];\n                        d[m] = B;\n                        v.h = 7;\n                        break;\n                    }\n                    if (\"proto_list\" === r.type) {\n                        if (p) {\n                            B = Array(p.size());\n                            for(J = 0; J < p.size(); J++)B[J] = p.get(J);\n                            p.delete();\n                        } else B = [];\n                        d[m] = B;\n                        v.h = 7;\n                        break;\n                    }\n                    if (void 0 === p) {\n                        v.h = 3;\n                        break;\n                    }\n                    if (\"float_list\" === r.type) {\n                        d[m] = p;\n                        v.h = 7;\n                        break;\n                    }\n                    if (\"proto\" === r.type) {\n                        d[m] = p;\n                        v.h = 7;\n                        break;\n                    }\n                    if (\"texture\" !== r.type) throw Error(\"Unknown output config type: '\" + r.type + \"'\");\n                    n = a.v[m];\n                    n || (n = new Xc(a.i, a.K), a.v[m] = n);\n                    return D(v, Yc(n, p, a.M), 13);\n                case 13:\n                    q = v.i, d[m] = q;\n                case 7:\n                    r.transform && d[m] && (d[m] = r.transform(d[m]));\n                    v.h = 3;\n                    break;\n                case 14:\n                    t[w] = v.i;\n                case 3:\n                    f = l.next();\n                    v.h = 2;\n                    break;\n                case 4:\n                    return v.return(d);\n            }\n        });\n    }\n    function md(a, b, c) {\n        var d;\n        return E(function(e) {\n            return \"number\" === typeof c || c instanceof Uint8Array || c instanceof a.i.Uint8BlobList ? e.return(c) : c instanceof a.i.Texture2dDataOut ? (d = a.v[b], d || (d = new Xc(a.i, a.K), a.v[b] = d), e.return(Yc(d, c, a.M))) : e.return(void 0);\n        });\n    }\n    function jd(a, b) {\n        for(var c = b.name || \"$\", d = [].concat(ea(b.wants)), e = new a.i.StringList, g = A(b.wants), f = g.next(); !f.done; f = g.next())e.push_back(f.value);\n        g = a.i.PacketListener.implement({\n            onResults: function(h) {\n                for(var k = {}, l = 0; l < b.wants.length; ++l)k[d[l]] = h.get(l);\n                var m = a.listeners[c];\n                m && (a.I = ld(a, k, b.outs).then(function(r) {\n                    r = m(r);\n                    for(var p = 0; p < b.wants.length; ++p){\n                        var n = k[d[p]];\n                        \"object\" === typeof n && n.hasOwnProperty && n.hasOwnProperty(\"delete\") && n.delete();\n                    }\n                    r && (a.I = r);\n                }));\n            }\n        });\n        a.j.attachMultiListener(e, g);\n        e.delete();\n    }\n    x.onResults = function(a, b) {\n        this.listeners[b || \"$\"] = a;\n    };\n    G(\"Solution\", fd);\n    G(\"OptionType\", {\n        BOOL: 0,\n        NUMBER: 1,\n        ua: 2,\n        0: \"BOOL\",\n        1: \"NUMBER\",\n        2: \"STRING\"\n    });\n    function nd(a) {\n        void 0 === a && (a = 0);\n        switch(a){\n            case 1:\n                return \"pose_landmark_full.tflite\";\n            case 2:\n                return \"pose_landmark_heavy.tflite\";\n            default:\n                return \"pose_landmark_lite.tflite\";\n        }\n    }\n    function od(a) {\n        var b = this;\n        a = a || {};\n        this.h = new fd({\n            locateFile: a.locateFile,\n            files: function(c) {\n                return [\n                    {\n                        url: \"pose_solution_packed_assets_loader.js\"\n                    },\n                    {\n                        simd: !1,\n                        url: \"pose_solution_wasm_bin.js\"\n                    },\n                    {\n                        simd: !0,\n                        url: \"pose_solution_simd_wasm_bin.js\"\n                    },\n                    {\n                        data: !0,\n                        url: nd(c.modelComplexity)\n                    }\n                ];\n            },\n            graph: {\n                url: \"pose_web.binarypb\"\n            },\n            listeners: [\n                {\n                    wants: [\n                        \"pose_landmarks\",\n                        \"world_landmarks\",\n                        \"segmentation_mask\",\n                        \"image_transformed\"\n                    ],\n                    outs: {\n                        image: {\n                            type: \"texture\",\n                            stream: \"image_transformed\"\n                        },\n                        poseLandmarks: {\n                            type: \"proto\",\n                            stream: \"pose_landmarks\",\n                            transform: Wc\n                        },\n                        poseWorldLandmarks: {\n                            type: \"proto\",\n                            stream: \"world_landmarks\",\n                            transform: Wc\n                        },\n                        segmentationMask: {\n                            type: \"texture\",\n                            stream: \"segmentation_mask\"\n                        }\n                    }\n                }\n            ],\n            inputs: {\n                image: {\n                    type: \"video\",\n                    stream: \"input_frames_gpu\"\n                }\n            },\n            options: {\n                useCpuInference: {\n                    type: 0,\n                    graphOptionXref: {\n                        calculatorType: \"InferenceCalculator\",\n                        fieldName: \"use_cpu_inference\"\n                    },\n                    default:  true ? !1 : 0\n                },\n                selfieMode: {\n                    type: 0,\n                    graphOptionXref: {\n                        calculatorType: \"GlScalerCalculator\",\n                        calculatorIndex: 1,\n                        fieldName: \"flip_horizontal\"\n                    }\n                },\n                modelComplexity: {\n                    type: 1,\n                    graphOptionXref: {\n                        calculatorType: \"ConstantSidePacketCalculator\",\n                        calculatorName: \"ConstantSidePacketCalculatorModelComplexity\",\n                        fieldName: \"int_value\"\n                    },\n                    onChange: function(c) {\n                        var d, e, g;\n                        return E(function(f) {\n                            if (1 == f.h) return d = nd(c), e = \"third_party/mediapipe/modules/pose_landmark/\" + d, D(f, hd(b.h, d), 2);\n                            g = f.i;\n                            b.h.overrideFile(e, g);\n                            return f.return(!0);\n                        });\n                    }\n                },\n                smoothLandmarks: {\n                    type: 0,\n                    graphOptionXref: {\n                        calculatorType: \"ConstantSidePacketCalculator\",\n                        calculatorName: \"ConstantSidePacketCalculatorSmoothLandmarks\",\n                        fieldName: \"bool_value\"\n                    }\n                },\n                enableSegmentation: {\n                    type: 0,\n                    graphOptionXref: {\n                        calculatorType: \"ConstantSidePacketCalculator\",\n                        calculatorName: \"ConstantSidePacketCalculatorEnableSegmentation\",\n                        fieldName: \"bool_value\"\n                    }\n                },\n                smoothSegmentation: {\n                    type: 0,\n                    graphOptionXref: {\n                        calculatorType: \"ConstantSidePacketCalculator\",\n                        calculatorName: \"ConstantSidePacketCalculatorSmoothSegmentation\",\n                        fieldName: \"bool_value\"\n                    }\n                },\n                minDetectionConfidence: {\n                    type: 1,\n                    graphOptionXref: {\n                        calculatorType: \"TensorsToDetectionsCalculator\",\n                        calculatorName: \"poselandmarkgpu__posedetectiongpu__TensorsToDetectionsCalculator\",\n                        fieldName: \"min_score_thresh\"\n                    }\n                },\n                minTrackingConfidence: {\n                    type: 1,\n                    graphOptionXref: {\n                        calculatorType: \"ThresholdingCalculator\",\n                        calculatorName: \"poselandmarkgpu__poselandmarkbyroigpu__tensorstoposelandmarksandsegmentation__ThresholdingCalculator\",\n                        fieldName: \"threshold\"\n                    }\n                }\n            }\n        });\n    }\n    x = od.prototype;\n    x.reset = function() {\n        this.h.reset();\n    };\n    x.close = function() {\n        this.h.close();\n        return Promise.resolve();\n    };\n    x.onResults = function(a) {\n        this.h.onResults(a);\n    };\n    x.initialize = function() {\n        var a = this;\n        return E(function(b) {\n            return D(b, a.h.initialize(), 0);\n        });\n    };\n    x.send = function(a, b) {\n        var c = this;\n        return E(function(d) {\n            return D(d, c.h.send(a, b), 0);\n        });\n    };\n    x.setOptions = function(a) {\n        this.h.setOptions(a);\n    };\n    G(\"Pose\", od);\n    G(\"POSE_CONNECTIONS\", [\n        [\n            0,\n            1\n        ],\n        [\n            1,\n            2\n        ],\n        [\n            2,\n            3\n        ],\n        [\n            3,\n            7\n        ],\n        [\n            0,\n            4\n        ],\n        [\n            4,\n            5\n        ],\n        [\n            5,\n            6\n        ],\n        [\n            6,\n            8\n        ],\n        [\n            9,\n            10\n        ],\n        [\n            11,\n            12\n        ],\n        [\n            11,\n            13\n        ],\n        [\n            13,\n            15\n        ],\n        [\n            15,\n            17\n        ],\n        [\n            15,\n            19\n        ],\n        [\n            15,\n            21\n        ],\n        [\n            17,\n            19\n        ],\n        [\n            12,\n            14\n        ],\n        [\n            14,\n            16\n        ],\n        [\n            16,\n            18\n        ],\n        [\n            16,\n            20\n        ],\n        [\n            16,\n            22\n        ],\n        [\n            18,\n            20\n        ],\n        [\n            11,\n            23\n        ],\n        [\n            12,\n            24\n        ],\n        [\n            23,\n            24\n        ],\n        [\n            23,\n            25\n        ],\n        [\n            24,\n            26\n        ],\n        [\n            25,\n            27\n        ],\n        [\n            26,\n            28\n        ],\n        [\n            27,\n            29\n        ],\n        [\n            28,\n            30\n        ],\n        [\n            29,\n            31\n        ],\n        [\n            30,\n            32\n        ],\n        [\n            27,\n            31\n        ],\n        [\n            28,\n            32\n        ]\n    ]);\n    G(\"POSE_LANDMARKS\", {\n        NOSE: 0,\n        LEFT_EYE_INNER: 1,\n        LEFT_EYE: 2,\n        LEFT_EYE_OUTER: 3,\n        RIGHT_EYE_INNER: 4,\n        RIGHT_EYE: 5,\n        RIGHT_EYE_OUTER: 6,\n        LEFT_EAR: 7,\n        RIGHT_EAR: 8,\n        LEFT_RIGHT: 9,\n        RIGHT_LEFT: 10,\n        LEFT_SHOULDER: 11,\n        RIGHT_SHOULDER: 12,\n        LEFT_ELBOW: 13,\n        RIGHT_ELBOW: 14,\n        LEFT_WRIST: 15,\n        RIGHT_WRIST: 16,\n        LEFT_PINKY: 17,\n        RIGHT_PINKY: 18,\n        LEFT_INDEX: 19,\n        RIGHT_INDEX: 20,\n        LEFT_THUMB: 21,\n        RIGHT_THUMB: 22,\n        LEFT_HIP: 23,\n        RIGHT_HIP: 24,\n        LEFT_KNEE: 25,\n        RIGHT_KNEE: 26,\n        LEFT_ANKLE: 27,\n        RIGHT_ANKLE: 28,\n        LEFT_HEEL: 29,\n        RIGHT_HEEL: 30,\n        LEFT_FOOT_INDEX: 31,\n        RIGHT_FOOT_INDEX: 32\n    });\n    G(\"POSE_LANDMARKS_LEFT\", {\n        LEFT_EYE_INNER: 1,\n        LEFT_EYE: 2,\n        LEFT_EYE_OUTER: 3,\n        LEFT_EAR: 7,\n        LEFT_RIGHT: 9,\n        LEFT_SHOULDER: 11,\n        LEFT_ELBOW: 13,\n        LEFT_WRIST: 15,\n        LEFT_PINKY: 17,\n        LEFT_INDEX: 19,\n        LEFT_THUMB: 21,\n        LEFT_HIP: 23,\n        LEFT_KNEE: 25,\n        LEFT_ANKLE: 27,\n        LEFT_HEEL: 29,\n        LEFT_FOOT_INDEX: 31\n    });\n    G(\"POSE_LANDMARKS_RIGHT\", {\n        RIGHT_EYE_INNER: 4,\n        RIGHT_EYE: 5,\n        RIGHT_EYE_OUTER: 6,\n        RIGHT_EAR: 8,\n        RIGHT_LEFT: 10,\n        RIGHT_SHOULDER: 12,\n        RIGHT_ELBOW: 14,\n        RIGHT_WRIST: 16,\n        RIGHT_PINKY: 18,\n        RIGHT_INDEX: 20,\n        RIGHT_THUMB: 22,\n        RIGHT_HIP: 24,\n        RIGHT_KNEE: 26,\n        RIGHT_ANKLE: 28,\n        RIGHT_HEEL: 30,\n        RIGHT_FOOT_INDEX: 32\n    });\n    G(\"POSE_LANDMARKS_NEUTRAL\", {\n        NOSE: 0\n    });\n    G(\"VERSION\", \"0.5.1675469404\");\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mediapipe/pose/pose.js\n");

/***/ })

};
;