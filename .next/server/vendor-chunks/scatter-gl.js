"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/scatter-gl";
exports.ids = ["vendor-chunks/scatter-gl"];
exports.modules = {

/***/ "(ssr)/./node_modules/scatter-gl/dist/color.js":
/*!***********************************************!*\
  !*** ./node_modules/scatter-gl/dist/color.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __read = (void 0) && (void 0).__read || function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\nvar cache = new Map();\nvar regex = /^(rgba|hsla)\\((\\d+),\\s*(\\d+%?),\\s*(\\d+%?)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/;\nfunction parseOpacity(colorString) {\n    var result = regex.exec(colorString);\n    if (result) {\n        var _a = __read(result, 6), _ = _a[0], rgbaOrHsla = _a[1], rh = _a[2], gs = _a[3], bl = _a[4], opacity = _a[5];\n        var colorString_1 = rgbaOrHsla.replace(\"a\", \"\") + \"(\" + rh + \",\" + gs + \",\" + bl + \")\";\n        return {\n            colorString: colorString_1,\n            opacity: parseFloat(opacity)\n        };\n    }\n    return {\n        colorString: colorString,\n        opacity: 1\n    };\n}\nfunction parseColor(inputColorString) {\n    if (cache.has(inputColorString)) return cache.get(inputColorString);\n    var _a = parseOpacity(inputColorString), colorString = _a.colorString, opacity = _a.opacity;\n    var color = new THREE.Color(colorString);\n    var r = color.r, g = color.g, b = color.b;\n    var item = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: opacity\n    };\n    cache.set(inputColorString, item);\n    return item;\n}\nexports.parseColor = parseColor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2NhdHRlci1nbC9kaXN0L2NvbG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsU0FBUyxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLE1BQU0sSUFBSyxTQUFVQyxDQUFDLEVBQUVDLENBQUM7SUFDaEQsSUFBSUMsSUFBSSxPQUFPQyxXQUFXLGNBQWNILENBQUMsQ0FBQ0csT0FBT0MsUUFBUSxDQUFDO0lBQzFELElBQUksQ0FBQ0YsR0FBRyxPQUFPRjtJQUNmLElBQUlLLElBQUlILEVBQUVJLElBQUksQ0FBQ04sSUFBSU8sR0FBR0MsS0FBSyxFQUFFLEVBQUVDO0lBQy9CLElBQUk7UUFDQSxNQUFPLENBQUNSLE1BQU0sS0FBSyxLQUFLQSxNQUFNLE1BQU0sQ0FBQyxDQUFDTSxJQUFJRixFQUFFSyxJQUFJLEVBQUMsRUFBR0MsSUFBSSxDQUFFSCxHQUFHSSxJQUFJLENBQUNMLEVBQUVNLEtBQUs7SUFDN0UsRUFDQSxPQUFPQyxPQUFPO1FBQUVMLElBQUk7WUFBRUssT0FBT0E7UUFBTTtJQUFHLFNBQzlCO1FBQ0osSUFBSTtZQUNBLElBQUlQLEtBQUssQ0FBQ0EsRUFBRUksSUFBSSxJQUFLVCxDQUFBQSxJQUFJRyxDQUFDLENBQUMsU0FBUyxHQUFHSCxFQUFFSSxJQUFJLENBQUNEO1FBQ2xELFNBQ1E7WUFBRSxJQUFJSSxHQUFHLE1BQU1BLEVBQUVLLEtBQUs7UUFBRTtJQUNwQztJQUNBLE9BQU9OO0FBQ1g7QUFDQU8sOENBQTZDO0lBQUVGLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsSUFBSUssUUFBUUMsbUJBQU9BLENBQUMsK0RBQU87QUFDM0IsSUFBSUMsUUFBUSxJQUFJQztBQUNoQixJQUFJQyxRQUFRO0FBQ1osU0FBU0MsYUFBYUMsV0FBVztJQUM3QixJQUFJQyxTQUFTSCxNQUFNSSxJQUFJLENBQUNGO0lBQ3hCLElBQUlDLFFBQVE7UUFDUixJQUFJRSxLQUFLNUIsT0FBTzBCLFFBQVEsSUFBSUcsSUFBSUQsRUFBRSxDQUFDLEVBQUUsRUFBRUUsYUFBYUYsRUFBRSxDQUFDLEVBQUUsRUFBRUcsS0FBS0gsRUFBRSxDQUFDLEVBQUUsRUFBRUksS0FBS0osRUFBRSxDQUFDLEVBQUUsRUFBRUssS0FBS0wsRUFBRSxDQUFDLEVBQUUsRUFBRU0sVUFBVU4sRUFBRSxDQUFDLEVBQUU7UUFDOUcsSUFBSU8sZ0JBQWdCTCxXQUFXTSxPQUFPLENBQUMsS0FBSyxNQUFNLE1BQU1MLEtBQUssTUFBTUMsS0FBSyxNQUFNQyxLQUFLO1FBQ25GLE9BQU87WUFBRVIsYUFBYVU7WUFBZUQsU0FBU0csV0FBV0g7UUFBUztJQUN0RTtJQUNBLE9BQU87UUFBRVQsYUFBYUE7UUFBYVMsU0FBUztJQUFFO0FBQ2xEO0FBQ0EsU0FBU0ksV0FBV0MsZ0JBQWdCO0lBQ2hDLElBQUlsQixNQUFNbUIsR0FBRyxDQUFDRCxtQkFDVixPQUFPbEIsTUFBTW9CLEdBQUcsQ0FBQ0Y7SUFDckIsSUFBSVgsS0FBS0osYUFBYWUsbUJBQW1CZCxjQUFjRyxHQUFHSCxXQUFXLEVBQUVTLFVBQVVOLEdBQUdNLE9BQU87SUFDM0YsSUFBSVEsUUFBUSxJQUFJdkIsTUFBTXdCLEtBQUssQ0FBQ2xCO0lBQzVCLElBQUlqQixJQUFJa0MsTUFBTWxDLENBQUMsRUFBRW9DLElBQUlGLE1BQU1FLENBQUMsRUFBRUMsSUFBSUgsTUFBTUcsQ0FBQztJQUN6QyxJQUFJQyxPQUFPO1FBQUV0QyxHQUFHQTtRQUFHb0MsR0FBR0E7UUFBR0MsR0FBR0E7UUFBR1gsU0FBU0E7SUFBUTtJQUNoRGIsTUFBTTBCLEdBQUcsQ0FBQ1Isa0JBQWtCTztJQUM1QixPQUFPQTtBQUNYO0FBQ0E1QixrQkFBa0IsR0FBR29CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veW9nYXBvc2VwZXJmZWN0Ly4vbm9kZV9tb2R1bGVzL3NjYXR0ZXItZ2wvZGlzdC9jb2xvci5qcz83M2U3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFRIUkVFID0gcmVxdWlyZShcInRocmVlXCIpO1xudmFyIGNhY2hlID0gbmV3IE1hcCgpO1xudmFyIHJlZ2V4ID0gL14ocmdiYXxoc2xhKVxcKChcXGQrKSxcXHMqKFxcZCslPyksXFxzKihcXGQrJT8pKD86LFxccyooXFxkKyg/OlxcLlxcZCspPykpP1xcKSQvO1xuZnVuY3Rpb24gcGFyc2VPcGFjaXR5KGNvbG9yU3RyaW5nKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlZ2V4LmV4ZWMoY29sb3JTdHJpbmcpO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgdmFyIF9hID0gX19yZWFkKHJlc3VsdCwgNiksIF8gPSBfYVswXSwgcmdiYU9ySHNsYSA9IF9hWzFdLCByaCA9IF9hWzJdLCBncyA9IF9hWzNdLCBibCA9IF9hWzRdLCBvcGFjaXR5ID0gX2FbNV07XG4gICAgICAgIHZhciBjb2xvclN0cmluZ18xID0gcmdiYU9ySHNsYS5yZXBsYWNlKCdhJywgJycpICsgXCIoXCIgKyByaCArIFwiLFwiICsgZ3MgKyBcIixcIiArIGJsICsgXCIpXCI7XG4gICAgICAgIHJldHVybiB7IGNvbG9yU3RyaW5nOiBjb2xvclN0cmluZ18xLCBvcGFjaXR5OiBwYXJzZUZsb2F0KG9wYWNpdHkpIH07XG4gICAgfVxuICAgIHJldHVybiB7IGNvbG9yU3RyaW5nOiBjb2xvclN0cmluZywgb3BhY2l0eTogMSB9O1xufVxuZnVuY3Rpb24gcGFyc2VDb2xvcihpbnB1dENvbG9yU3RyaW5nKSB7XG4gICAgaWYgKGNhY2hlLmhhcyhpbnB1dENvbG9yU3RyaW5nKSlcbiAgICAgICAgcmV0dXJuIGNhY2hlLmdldChpbnB1dENvbG9yU3RyaW5nKTtcbiAgICB2YXIgX2EgPSBwYXJzZU9wYWNpdHkoaW5wdXRDb2xvclN0cmluZyksIGNvbG9yU3RyaW5nID0gX2EuY29sb3JTdHJpbmcsIG9wYWNpdHkgPSBfYS5vcGFjaXR5O1xuICAgIHZhciBjb2xvciA9IG5ldyBUSFJFRS5Db2xvcihjb2xvclN0cmluZyk7XG4gICAgdmFyIHIgPSBjb2xvci5yLCBnID0gY29sb3IuZywgYiA9IGNvbG9yLmI7XG4gICAgdmFyIGl0ZW0gPSB7IHI6IHIsIGc6IGcsIGI6IGIsIG9wYWNpdHk6IG9wYWNpdHkgfTtcbiAgICBjYWNoZS5zZXQoaW5wdXRDb2xvclN0cmluZywgaXRlbSk7XG4gICAgcmV0dXJuIGl0ZW07XG59XG5leHBvcnRzLnBhcnNlQ29sb3IgPSBwYXJzZUNvbG9yO1xuIl0sIm5hbWVzIjpbIl9fcmVhZCIsIm8iLCJuIiwibSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiaSIsImNhbGwiLCJyIiwiYXIiLCJlIiwibmV4dCIsImRvbmUiLCJwdXNoIiwidmFsdWUiLCJlcnJvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsIlRIUkVFIiwicmVxdWlyZSIsImNhY2hlIiwiTWFwIiwicmVnZXgiLCJwYXJzZU9wYWNpdHkiLCJjb2xvclN0cmluZyIsInJlc3VsdCIsImV4ZWMiLCJfYSIsIl8iLCJyZ2JhT3JIc2xhIiwicmgiLCJncyIsImJsIiwib3BhY2l0eSIsImNvbG9yU3RyaW5nXzEiLCJyZXBsYWNlIiwicGFyc2VGbG9hdCIsInBhcnNlQ29sb3IiLCJpbnB1dENvbG9yU3RyaW5nIiwiaGFzIiwiZ2V0IiwiY29sb3IiLCJDb2xvciIsImciLCJiIiwiaXRlbSIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/color.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/constants.js":
/*!***************************************************!*\
  !*** ./node_modules/scatter-gl/dist/constants.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RGB_NUM_ELEMENTS = 3;\nexports.RGBA_NUM_ELEMENTS = 4;\nexports.XYZ_NUM_ELEMENTS = 3;\nexports.UV_NUM_ELEMENTS = 2;\nexports.INDEX_NUM_ELEMENTS = 1;\nexports.SCATTER_PLOT_CUBE_LENGTH = 2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2NhdHRlci1nbC9kaXN0L2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUc7QUFDM0JBLHlCQUF5QixHQUFHO0FBQzVCQSx3QkFBd0IsR0FBRztBQUMzQkEsdUJBQXVCLEdBQUc7QUFDMUJBLDBCQUEwQixHQUFHO0FBQzdCQSxnQ0FBZ0MsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL3lvZ2Fwb3NlcGVyZmVjdC8uL25vZGVfbW9kdWxlcy9zY2F0dGVyLWdsL2Rpc3QvY29uc3RhbnRzLmpzP2FjZTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJHQl9OVU1fRUxFTUVOVFMgPSAzO1xuZXhwb3J0cy5SR0JBX05VTV9FTEVNRU5UUyA9IDQ7XG5leHBvcnRzLlhZWl9OVU1fRUxFTUVOVFMgPSAzO1xuZXhwb3J0cy5VVl9OVU1fRUxFTUVOVFMgPSAyO1xuZXhwb3J0cy5JTkRFWF9OVU1fRUxFTUVOVFMgPSAxO1xuZXhwb3J0cy5TQ0FUVEVSX1BMT1RfQ1VCRV9MRU5HVEggPSAyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUkdCX05VTV9FTEVNRU5UUyIsIlJHQkFfTlVNX0VMRU1FTlRTIiwiWFlaX05VTV9FTEVNRU5UUyIsIlVWX05VTV9FTEVNRU5UUyIsIklOREVYX05VTV9FTEVNRU5UUyIsIlNDQVRURVJfUExPVF9DVUJFX0xFTkdUSCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/data.js":
/*!**********************************************!*\
  !*** ./node_modules/scatter-gl/dist/data.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar __values = (void 0) && (void 0).__values || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar DIMENSIONALITY_ERROR_MESSAGE = \"Points must be an array of either 2 or 3 dimensional number arrays\";\nvar Dataset = function() {\n    function Dataset(points, metadata) {\n        var e_1, _a;\n        if (metadata === void 0) {\n            metadata = [];\n        }\n        this.points = points;\n        this.metadata = metadata;\n        var dimensions = points[0].length;\n        if (!(dimensions === 2 || dimensions === 3)) {\n            throw new Error(DIMENSIONALITY_ERROR_MESSAGE);\n        }\n        try {\n            for(var points_1 = __values(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()){\n                var point = points_1_1.value;\n                if (dimensions !== point.length) {\n                    throw new Error(DIMENSIONALITY_ERROR_MESSAGE);\n                }\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (points_1_1 && !points_1_1.done && (_a = points_1.return)) _a.call(points_1);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n        this.dimensions = dimensions;\n    }\n    Dataset.prototype.setSpriteMetadata = function(spriteMetadata) {\n        this.spriteMetadata = spriteMetadata;\n    };\n    return Dataset;\n}();\nexports.Dataset = Dataset;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2NhdHRlci1nbC9kaXN0L2RhdGEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxXQUFXLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsUUFBUSxJQUFLLFNBQVNDLENBQUM7SUFDaEQsSUFBSUMsSUFBSSxPQUFPQyxXQUFXLGNBQWNBLE9BQU9DLFFBQVEsRUFBRUMsSUFBSUgsS0FBS0QsQ0FBQyxDQUFDQyxFQUFFLEVBQUVJLElBQUk7SUFDNUUsSUFBSUQsR0FBRyxPQUFPQSxFQUFFRSxJQUFJLENBQUNOO0lBQ3JCLElBQUlBLEtBQUssT0FBT0EsRUFBRU8sTUFBTSxLQUFLLFVBQVUsT0FBTztRQUMxQ0MsTUFBTTtZQUNGLElBQUlSLEtBQUtLLEtBQUtMLEVBQUVPLE1BQU0sRUFBRVAsSUFBSSxLQUFLO1lBQ2pDLE9BQU87Z0JBQUVTLE9BQU9ULEtBQUtBLENBQUMsQ0FBQ0ssSUFBSTtnQkFBRUssTUFBTSxDQUFDVjtZQUFFO1FBQzFDO0lBQ0o7SUFDQSxNQUFNLElBQUlXLFVBQVVWLElBQUksNEJBQTRCO0FBQ3hEO0FBQ0FXLDhDQUE2QztJQUFFSCxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlNLCtCQUErQjtBQUNuQyxJQUFJQyxVQUFXO0lBQ1gsU0FBU0EsUUFBUUMsTUFBTSxFQUFFQyxRQUFRO1FBQzdCLElBQUlDLEtBQUtDO1FBQ1QsSUFBSUYsYUFBYSxLQUFLLEdBQUc7WUFBRUEsV0FBVyxFQUFFO1FBQUU7UUFDMUMsSUFBSSxDQUFDRCxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxRQUFRLEdBQUdBO1FBQ2hCLElBQUlHLGFBQWFKLE1BQU0sQ0FBQyxFQUFFLENBQUNWLE1BQU07UUFDakMsSUFBSSxDQUFFYyxDQUFBQSxlQUFlLEtBQUtBLGVBQWUsSUFBSTtZQUN6QyxNQUFNLElBQUlDLE1BQU1QO1FBQ3BCO1FBQ0EsSUFBSTtZQUNBLElBQUssSUFBSVEsV0FBV3hCLFNBQVNrQixTQUFTTyxhQUFhRCxTQUFTZixJQUFJLElBQUksQ0FBQ2dCLFdBQVdkLElBQUksRUFBRWMsYUFBYUQsU0FBU2YsSUFBSSxHQUFJO2dCQUNoSCxJQUFJaUIsUUFBUUQsV0FBV2YsS0FBSztnQkFDNUIsSUFBSVksZUFBZUksTUFBTWxCLE1BQU0sRUFBRTtvQkFDN0IsTUFBTSxJQUFJZSxNQUFNUDtnQkFDcEI7WUFDSjtRQUNKLEVBQ0EsT0FBT1csT0FBTztZQUFFUCxNQUFNO2dCQUFFUSxPQUFPRDtZQUFNO1FBQUcsU0FDaEM7WUFDSixJQUFJO2dCQUNBLElBQUlGLGNBQWMsQ0FBQ0EsV0FBV2QsSUFBSSxJQUFLVSxDQUFBQSxLQUFLRyxTQUFTSyxNQUFNLEdBQUdSLEdBQUdkLElBQUksQ0FBQ2lCO1lBQzFFLFNBQ1E7Z0JBQUUsSUFBSUosS0FBSyxNQUFNQSxJQUFJUSxLQUFLO1lBQUU7UUFDeEM7UUFDQSxJQUFJLENBQUNOLFVBQVUsR0FBR0E7SUFDdEI7SUFDQUwsUUFBUWEsU0FBUyxDQUFDQyxpQkFBaUIsR0FBRyxTQUFVQyxjQUFjO1FBQzFELElBQUksQ0FBQ0EsY0FBYyxHQUFHQTtJQUMxQjtJQUNBLE9BQU9mO0FBQ1g7QUFDQUYsZUFBZSxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3lvZ2Fwb3NlcGVyZmVjdC8uL25vZGVfbW9kdWxlcy9zY2F0dGVyLWdsL2Rpc3QvZGF0YS5qcz8xNzhhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fdmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIERJTUVOU0lPTkFMSVRZX0VSUk9SX01FU1NBR0UgPSAnUG9pbnRzIG11c3QgYmUgYW4gYXJyYXkgb2YgZWl0aGVyIDIgb3IgMyBkaW1lbnNpb25hbCBudW1iZXIgYXJyYXlzJztcbnZhciBEYXRhc2V0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEYXRhc2V0KHBvaW50cywgbWV0YWRhdGEpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIGlmIChtZXRhZGF0YSA9PT0gdm9pZCAwKSB7IG1ldGFkYXRhID0gW107IH1cbiAgICAgICAgdGhpcy5wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgdmFyIGRpbWVuc2lvbnMgPSBwb2ludHNbMF0ubGVuZ3RoO1xuICAgICAgICBpZiAoIShkaW1lbnNpb25zID09PSAyIHx8IGRpbWVuc2lvbnMgPT09IDMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRElNRU5TSU9OQUxJVFlfRVJST1JfTUVTU0FHRSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIHBvaW50c18xID0gX192YWx1ZXMocG9pbnRzKSwgcG9pbnRzXzFfMSA9IHBvaW50c18xLm5leHQoKTsgIXBvaW50c18xXzEuZG9uZTsgcG9pbnRzXzFfMSA9IHBvaW50c18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBwb2ludCA9IHBvaW50c18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGRpbWVuc2lvbnMgIT09IHBvaW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRElNRU5TSU9OQUxJVFlfRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAocG9pbnRzXzFfMSAmJiAhcG9pbnRzXzFfMS5kb25lICYmIChfYSA9IHBvaW50c18xLnJldHVybikpIF9hLmNhbGwocG9pbnRzXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucyA9IGRpbWVuc2lvbnM7XG4gICAgfVxuICAgIERhdGFzZXQucHJvdG90eXBlLnNldFNwcml0ZU1ldGFkYXRhID0gZnVuY3Rpb24gKHNwcml0ZU1ldGFkYXRhKSB7XG4gICAgICAgIHRoaXMuc3ByaXRlTWV0YWRhdGEgPSBzcHJpdGVNZXRhZGF0YTtcbiAgICB9O1xuICAgIHJldHVybiBEYXRhc2V0O1xufSgpKTtcbmV4cG9ydHMuRGF0YXNldCA9IERhdGFzZXQ7XG4iXSwibmFtZXMiOlsiX192YWx1ZXMiLCJvIiwicyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibSIsImkiLCJjYWxsIiwibGVuZ3RoIiwibmV4dCIsInZhbHVlIiwiZG9uZSIsIlR5cGVFcnJvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsIkRJTUVOU0lPTkFMSVRZX0VSUk9SX01FU1NBR0UiLCJEYXRhc2V0IiwicG9pbnRzIiwibWV0YWRhdGEiLCJlXzEiLCJfYSIsImRpbWVuc2lvbnMiLCJFcnJvciIsInBvaW50c18xIiwicG9pbnRzXzFfMSIsInBvaW50IiwiZV8xXzEiLCJlcnJvciIsInJldHVybiIsInByb3RvdHlwZSIsInNldFNwcml0ZU1ldGFkYXRhIiwic3ByaXRlTWV0YWRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/scatter-gl/dist/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar scatter_gl_1 = __webpack_require__(/*! ./scatter_gl */ \"(ssr)/./node_modules/scatter-gl/dist/scatter_gl.js\");\nexports.ScatterGL = scatter_gl_1.ScatterGL;\nvar data_1 = __webpack_require__(/*! ./data */ \"(ssr)/./node_modules/scatter-gl/dist/data.js\");\nexports.Dataset = data_1.Dataset;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2NhdHRlci1nbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlDLGVBQWVDLG1CQUFPQSxDQUFDLHdFQUFjO0FBQ3pDSCxpQkFBaUIsR0FBR0UsYUFBYUUsU0FBUztBQUMxQyxJQUFJQyxTQUFTRixtQkFBT0EsQ0FBQyw0REFBUTtBQUM3QkgsZUFBZSxHQUFHSyxPQUFPQyxPQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veW9nYXBvc2VwZXJmZWN0Ly4vbm9kZV9tb2R1bGVzL3NjYXR0ZXItZ2wvZGlzdC9pbmRleC5qcz9mNjkxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHNjYXR0ZXJfZ2xfMSA9IHJlcXVpcmUoXCIuL3NjYXR0ZXJfZ2xcIik7XG5leHBvcnRzLlNjYXR0ZXJHTCA9IHNjYXR0ZXJfZ2xfMS5TY2F0dGVyR0w7XG52YXIgZGF0YV8xID0gcmVxdWlyZShcIi4vZGF0YVwiKTtcbmV4cG9ydHMuRGF0YXNldCA9IGRhdGFfMS5EYXRhc2V0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic2NhdHRlcl9nbF8xIiwicmVxdWlyZSIsIlNjYXR0ZXJHTCIsImRhdGFfMSIsIkRhdGFzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/label.js":
/*!***********************************************!*\
  !*** ./node_modules/scatter-gl/dist/label.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar CollisionGrid = function() {\n    function CollisionGrid(bound, cellWidth, cellHeight) {\n        this.bound = bound;\n        this.cellWidth = cellWidth;\n        this.cellHeight = cellHeight;\n        this.numHorizCells = Math.ceil(this.boundWidth(bound) / cellWidth);\n        this.numVertCells = Math.ceil(this.boundHeight(bound) / cellHeight);\n        this.grid = new Array(this.numHorizCells * this.numVertCells);\n    }\n    CollisionGrid.prototype.boundWidth = function(bound) {\n        return bound.hiX - bound.loX;\n    };\n    CollisionGrid.prototype.boundHeight = function(bound) {\n        return bound.hiY - bound.loY;\n    };\n    CollisionGrid.prototype.boundsIntersect = function(a, b) {\n        return !(a.loX > b.hiX || a.loY > b.hiY || a.hiX < b.loX || a.hiY < b.loY);\n    };\n    CollisionGrid.prototype.insert = function(bound, justTest) {\n        if (justTest === void 0) {\n            justTest = false;\n        }\n        if (bound.hiX < this.bound.loX || bound.loX > this.bound.hiX || bound.hiY < this.bound.loY || bound.loY > this.bound.hiY) {\n            return false;\n        }\n        var minCellX = this.getCellX(bound.loX);\n        var maxCellX = this.getCellX(bound.hiX);\n        var minCellY = this.getCellY(bound.loY);\n        var maxCellY = this.getCellY(bound.hiY);\n        var baseIdx = minCellY * this.numHorizCells + minCellX;\n        var idx = baseIdx;\n        for(var j = minCellY; j <= maxCellY; j++){\n            for(var i = minCellX; i <= maxCellX; i++){\n                var cell = this.grid[idx++];\n                if (cell) {\n                    for(var k = 0; k < cell.length; k++){\n                        if (this.boundsIntersect(bound, cell[k])) {\n                            return false;\n                        }\n                    }\n                }\n            }\n            idx += this.numHorizCells - (maxCellX - minCellX + 1);\n        }\n        if (justTest) {\n            return true;\n        }\n        idx = baseIdx;\n        for(var j = minCellY; j <= maxCellY; j++){\n            for(var i = minCellX; i <= maxCellX; i++){\n                if (!this.grid[idx]) {\n                    this.grid[idx] = [\n                        bound\n                    ];\n                } else {\n                    this.grid[idx].push(bound);\n                }\n                idx++;\n            }\n            idx += this.numHorizCells - (maxCellX - minCellX + 1);\n        }\n        return true;\n    };\n    CollisionGrid.prototype.getCellX = function(x) {\n        return Math.floor((x - this.bound.loX) / this.cellWidth);\n    };\n    CollisionGrid.prototype.getCellY = function(y) {\n        return Math.floor((y - this.bound.loY) / this.cellHeight);\n    };\n    return CollisionGrid;\n}();\nexports.CollisionGrid = CollisionGrid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/label.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/render.js":
/*!************************************************!*\
  !*** ./node_modules/scatter-gl/dist/render.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar LabelRenderParams = function() {\n    function LabelRenderParams(pointIndices, labelStrings, scaleFactors, useSceneOpacityFlags, defaultFontSize, fillColors, strokeColors) {\n        this.pointIndices = pointIndices;\n        this.labelStrings = labelStrings;\n        this.scaleFactors = scaleFactors;\n        this.useSceneOpacityFlags = useSceneOpacityFlags;\n        this.defaultFontSize = defaultFontSize;\n        this.fillColors = fillColors;\n        this.strokeColors = strokeColors;\n    }\n    return LabelRenderParams;\n}();\nexports.LabelRenderParams = LabelRenderParams;\nvar CameraType;\n(function(CameraType) {\n    CameraType[CameraType[\"Perspective\"] = 0] = \"Perspective\";\n    CameraType[CameraType[\"Orthographic\"] = 1] = \"Orthographic\";\n})(CameraType = exports.CameraType || (exports.CameraType = {}));\nvar RenderContext = function() {\n    function RenderContext(camera, cameraType, cameraTarget, screenWidth, screenHeight, nearestCameraSpacePointZ, farthestCameraSpacePointZ, backgroundColor, pointColors, pointScaleFactors, labels, polylineColors, polylineOpacities, polylineWidths) {\n        this.camera = camera;\n        this.cameraType = cameraType;\n        this.cameraTarget = cameraTarget;\n        this.screenWidth = screenWidth;\n        this.screenHeight = screenHeight;\n        this.nearestCameraSpacePointZ = nearestCameraSpacePointZ;\n        this.farthestCameraSpacePointZ = farthestCameraSpacePointZ;\n        this.backgroundColor = backgroundColor;\n        this.pointColors = pointColors;\n        this.pointScaleFactors = pointScaleFactors;\n        this.labels = labels;\n        this.polylineColors = polylineColors;\n        this.polylineOpacities = polylineOpacities;\n        this.polylineWidths = polylineWidths;\n    }\n    return RenderContext;\n}();\nexports.RenderContext = RenderContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2NhdHRlci1nbC9kaXN0L3JlbmRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxJQUFJQyxvQkFBcUI7SUFDckIsU0FBU0Esa0JBQWtCQyxZQUFZLEVBQUVDLFlBQVksRUFBRUMsWUFBWSxFQUFFQyxvQkFBb0IsRUFBRUMsZUFBZSxFQUFFQyxVQUFVLEVBQUVDLFlBQVk7UUFDaEksSUFBSSxDQUFDTixZQUFZLEdBQUdBO1FBQ3BCLElBQUksQ0FBQ0MsWUFBWSxHQUFHQTtRQUNwQixJQUFJLENBQUNDLFlBQVksR0FBR0E7UUFDcEIsSUFBSSxDQUFDQyxvQkFBb0IsR0FBR0E7UUFDNUIsSUFBSSxDQUFDQyxlQUFlLEdBQUdBO1FBQ3ZCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNDLFlBQVksR0FBR0E7SUFDeEI7SUFDQSxPQUFPUDtBQUNYO0FBQ0FGLHlCQUF5QixHQUFHRTtBQUM1QixJQUFJUTtBQUNILFVBQVVBLFVBQVU7SUFDakJBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLGNBQWMsR0FBRyxFQUFFLEdBQUc7SUFDNUNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLGVBQWUsR0FBRyxFQUFFLEdBQUc7QUFDakQsR0FBR0EsYUFBYVYsUUFBUVUsVUFBVSxJQUFLVixDQUFBQSxrQkFBa0IsR0FBRyxDQUFDO0FBQzdELElBQUlXLGdCQUFpQjtJQUNqQixTQUFTQSxjQUFjQyxNQUFNLEVBQUVDLFVBQVUsRUFBRUMsWUFBWSxFQUFFQyxXQUFXLEVBQUVDLFlBQVksRUFBRUMsd0JBQXdCLEVBQUVDLHlCQUF5QixFQUFFQyxlQUFlLEVBQUVDLFdBQVcsRUFBRUMsaUJBQWlCLEVBQUVDLE1BQU0sRUFBRUMsY0FBYyxFQUFFQyxpQkFBaUIsRUFBRUMsY0FBYztRQUMvTyxJQUFJLENBQUNiLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDQyxZQUFZLEdBQUdBO1FBQ3BCLElBQUksQ0FBQ0MsV0FBVyxHQUFHQTtRQUNuQixJQUFJLENBQUNDLFlBQVksR0FBR0E7UUFDcEIsSUFBSSxDQUFDQyx3QkFBd0IsR0FBR0E7UUFDaEMsSUFBSSxDQUFDQyx5QkFBeUIsR0FBR0E7UUFDakMsSUFBSSxDQUFDQyxlQUFlLEdBQUdBO1FBQ3ZCLElBQUksQ0FBQ0MsV0FBVyxHQUFHQTtRQUNuQixJQUFJLENBQUNDLGlCQUFpQixHQUFHQTtRQUN6QixJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLGNBQWMsR0FBR0E7UUFDdEIsSUFBSSxDQUFDQyxpQkFBaUIsR0FBR0E7UUFDekIsSUFBSSxDQUFDQyxjQUFjLEdBQUdBO0lBQzFCO0lBQ0EsT0FBT2Q7QUFDWDtBQUNBWCxxQkFBcUIsR0FBR1ciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95b2dhcG9zZXBlcmZlY3QvLi9ub2RlX21vZHVsZXMvc2NhdHRlci1nbC9kaXN0L3JlbmRlci5qcz9jY2FiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIExhYmVsUmVuZGVyUGFyYW1zID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMYWJlbFJlbmRlclBhcmFtcyhwb2ludEluZGljZXMsIGxhYmVsU3RyaW5ncywgc2NhbGVGYWN0b3JzLCB1c2VTY2VuZU9wYWNpdHlGbGFncywgZGVmYXVsdEZvbnRTaXplLCBmaWxsQ29sb3JzLCBzdHJva2VDb2xvcnMpIHtcbiAgICAgICAgdGhpcy5wb2ludEluZGljZXMgPSBwb2ludEluZGljZXM7XG4gICAgICAgIHRoaXMubGFiZWxTdHJpbmdzID0gbGFiZWxTdHJpbmdzO1xuICAgICAgICB0aGlzLnNjYWxlRmFjdG9ycyA9IHNjYWxlRmFjdG9ycztcbiAgICAgICAgdGhpcy51c2VTY2VuZU9wYWNpdHlGbGFncyA9IHVzZVNjZW5lT3BhY2l0eUZsYWdzO1xuICAgICAgICB0aGlzLmRlZmF1bHRGb250U2l6ZSA9IGRlZmF1bHRGb250U2l6ZTtcbiAgICAgICAgdGhpcy5maWxsQ29sb3JzID0gZmlsbENvbG9ycztcbiAgICAgICAgdGhpcy5zdHJva2VDb2xvcnMgPSBzdHJva2VDb2xvcnM7XG4gICAgfVxuICAgIHJldHVybiBMYWJlbFJlbmRlclBhcmFtcztcbn0oKSk7XG5leHBvcnRzLkxhYmVsUmVuZGVyUGFyYW1zID0gTGFiZWxSZW5kZXJQYXJhbXM7XG52YXIgQ2FtZXJhVHlwZTtcbihmdW5jdGlvbiAoQ2FtZXJhVHlwZSkge1xuICAgIENhbWVyYVR5cGVbQ2FtZXJhVHlwZVtcIlBlcnNwZWN0aXZlXCJdID0gMF0gPSBcIlBlcnNwZWN0aXZlXCI7XG4gICAgQ2FtZXJhVHlwZVtDYW1lcmFUeXBlW1wiT3J0aG9ncmFwaGljXCJdID0gMV0gPSBcIk9ydGhvZ3JhcGhpY1wiO1xufSkoQ2FtZXJhVHlwZSA9IGV4cG9ydHMuQ2FtZXJhVHlwZSB8fCAoZXhwb3J0cy5DYW1lcmFUeXBlID0ge30pKTtcbnZhciBSZW5kZXJDb250ZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZW5kZXJDb250ZXh0KGNhbWVyYSwgY2FtZXJhVHlwZSwgY2FtZXJhVGFyZ2V0LCBzY3JlZW5XaWR0aCwgc2NyZWVuSGVpZ2h0LCBuZWFyZXN0Q2FtZXJhU3BhY2VQb2ludFosIGZhcnRoZXN0Q2FtZXJhU3BhY2VQb2ludFosIGJhY2tncm91bmRDb2xvciwgcG9pbnRDb2xvcnMsIHBvaW50U2NhbGVGYWN0b3JzLCBsYWJlbHMsIHBvbHlsaW5lQ29sb3JzLCBwb2x5bGluZU9wYWNpdGllcywgcG9seWxpbmVXaWR0aHMpIHtcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XG4gICAgICAgIHRoaXMuY2FtZXJhVHlwZSA9IGNhbWVyYVR5cGU7XG4gICAgICAgIHRoaXMuY2FtZXJhVGFyZ2V0ID0gY2FtZXJhVGFyZ2V0O1xuICAgICAgICB0aGlzLnNjcmVlbldpZHRoID0gc2NyZWVuV2lkdGg7XG4gICAgICAgIHRoaXMuc2NyZWVuSGVpZ2h0ID0gc2NyZWVuSGVpZ2h0O1xuICAgICAgICB0aGlzLm5lYXJlc3RDYW1lcmFTcGFjZVBvaW50WiA9IG5lYXJlc3RDYW1lcmFTcGFjZVBvaW50WjtcbiAgICAgICAgdGhpcy5mYXJ0aGVzdENhbWVyYVNwYWNlUG9pbnRaID0gZmFydGhlc3RDYW1lcmFTcGFjZVBvaW50WjtcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIHRoaXMucG9pbnRDb2xvcnMgPSBwb2ludENvbG9ycztcbiAgICAgICAgdGhpcy5wb2ludFNjYWxlRmFjdG9ycyA9IHBvaW50U2NhbGVGYWN0b3JzO1xuICAgICAgICB0aGlzLmxhYmVscyA9IGxhYmVscztcbiAgICAgICAgdGhpcy5wb2x5bGluZUNvbG9ycyA9IHBvbHlsaW5lQ29sb3JzO1xuICAgICAgICB0aGlzLnBvbHlsaW5lT3BhY2l0aWVzID0gcG9seWxpbmVPcGFjaXRpZXM7XG4gICAgICAgIHRoaXMucG9seWxpbmVXaWR0aHMgPSBwb2x5bGluZVdpZHRocztcbiAgICB9XG4gICAgcmV0dXJuIFJlbmRlckNvbnRleHQ7XG59KCkpO1xuZXhwb3J0cy5SZW5kZXJDb250ZXh0ID0gUmVuZGVyQ29udGV4dDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkxhYmVsUmVuZGVyUGFyYW1zIiwicG9pbnRJbmRpY2VzIiwibGFiZWxTdHJpbmdzIiwic2NhbGVGYWN0b3JzIiwidXNlU2NlbmVPcGFjaXR5RmxhZ3MiLCJkZWZhdWx0Rm9udFNpemUiLCJmaWxsQ29sb3JzIiwic3Ryb2tlQ29sb3JzIiwiQ2FtZXJhVHlwZSIsIlJlbmRlckNvbnRleHQiLCJjYW1lcmEiLCJjYW1lcmFUeXBlIiwiY2FtZXJhVGFyZ2V0Iiwic2NyZWVuV2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJuZWFyZXN0Q2FtZXJhU3BhY2VQb2ludFoiLCJmYXJ0aGVzdENhbWVyYVNwYWNlUG9pbnRaIiwiYmFja2dyb3VuZENvbG9yIiwicG9pbnRDb2xvcnMiLCJwb2ludFNjYWxlRmFjdG9ycyIsImxhYmVscyIsInBvbHlsaW5lQ29sb3JzIiwicG9seWxpbmVPcGFjaXRpZXMiLCJwb2x5bGluZVdpZHRocyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/render.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/scatter_gl.js":
/*!****************************************************!*\
  !*** ./node_modules/scatter-gl/dist/scatter_gl.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __read = (void 0) && (void 0).__read || function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nvar __spread = (void 0) && (void 0).__spread || function() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (void 0) && (void 0).__values || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar scatter_plot_1 = __webpack_require__(/*! ./scatter_plot */ \"(ssr)/./node_modules/scatter-gl/dist/scatter_plot.js\");\nvar color_1 = __webpack_require__(/*! ./color */ \"(ssr)/./node_modules/scatter-gl/dist/color.js\");\nvar data_1 = __webpack_require__(/*! ./data */ \"(ssr)/./node_modules/scatter-gl/dist/data.js\");\nvar render_1 = __webpack_require__(/*! ./render */ \"(ssr)/./node_modules/scatter-gl/dist/render.js\");\nvar styles_1 = __webpack_require__(/*! ./styles */ \"(ssr)/./node_modules/scatter-gl/dist/styles.js\");\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/scatter-gl/dist/util.js\");\nvar constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/scatter-gl/dist/constants.js\");\nvar scatter_plot_visualizer_3d_labels_1 = __webpack_require__(/*! ./scatter_plot_visualizer_3d_labels */ \"(ssr)/./node_modules/scatter-gl/dist/scatter_plot_visualizer_3d_labels.js\");\nvar scatter_plot_visualizer_sprites_1 = __webpack_require__(/*! ./scatter_plot_visualizer_sprites */ \"(ssr)/./node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js\");\nvar scatter_plot_visualizer_canvas_labels_1 = __webpack_require__(/*! ./scatter_plot_visualizer_canvas_labels */ \"(ssr)/./node_modules/scatter-gl/dist/scatter_plot_visualizer_canvas_labels.js\");\nvar scatter_plot_visualizer_polylines_1 = __webpack_require__(/*! ./scatter_plot_visualizer_polylines */ \"(ssr)/./node_modules/scatter-gl/dist/scatter_plot_visualizer_polylines.js\");\nvar ScatterGL = function() {\n    function ScatterGL(containerElement, params) {\n        var _this = this;\n        if (params === void 0) {\n            params = {};\n        }\n        this.pointColorer = null;\n        this.sequences = [];\n        this.renderMode = \"POINT\";\n        this.rotateOnStart = true;\n        this.selectEnabled = true;\n        this.showLabelsOnHover = true;\n        this.hoverPointIndex = null;\n        this.selectedPointIndices = new Set();\n        this.clickCallback = function() {};\n        this.hoverCallback = function() {};\n        this.selectCallback = function() {};\n        this.cameraMoveCallback = function() {};\n        this.onHover = function(pointIndex) {\n            _this.hoverCallback(pointIndex);\n            _this.hoverPointIndex = pointIndex;\n            _this.updateScatterPlotAttributes();\n            _this.renderScatterPlot();\n        };\n        this.onClick = function(pointIndex) {\n            _this.clickCallback(pointIndex);\n        };\n        this.select = function(pointIndices) {\n            if (!_this.selectEnabled) return;\n            _this.selectedPointIndices = new Set(pointIndices);\n            _this.updateScatterPlotAttributes();\n            _this.renderScatterPlot();\n        };\n        this.onSelect = function(pointIndices) {\n            if (!_this.selectEnabled) return;\n            _this.selectCallback(pointIndices);\n            _this.select(pointIndices);\n        };\n        this.containerElement = containerElement;\n        this.styles = styles_1.makeStyles(params.styles);\n        this.setParameters(params);\n        this.scatterPlot = new scatter_plot_1.ScatterPlot(containerElement, {\n            camera: params.camera,\n            onClick: this.onClick,\n            onHover: this.onHover,\n            onSelect: this.onSelect,\n            selectEnabled: this.selectEnabled,\n            styles: this.styles,\n            orbitControlParams: params.orbitControls\n        });\n        this.scatterPlot.onCameraMove(this.cameraMoveCallback);\n    }\n    ScatterGL.prototype.setParameters = function(p) {\n        if (p.onClick !== undefined) this.clickCallback = p.onClick;\n        if (p.onHover !== undefined) this.hoverCallback = p.onHover;\n        if (p.onSelect !== undefined) this.selectCallback = p.onSelect;\n        if (p.onCameraMove !== undefined) this.cameraMoveCallback = p.onCameraMove;\n        if (p.pointColorer !== undefined) this.pointColorer = p.pointColorer;\n        if (p.renderMode !== undefined) this.renderMode = p.renderMode;\n        if (p.rotateOnStart !== undefined) this.rotateOnStart = p.rotateOnStart;\n        if (p.selectEnabled !== undefined) this.selectEnabled = p.selectEnabled;\n        if (p.showLabelsOnHover !== undefined) this.showLabelsOnHover = p.showLabelsOnHover;\n    };\n    ScatterGL.prototype.render = function(dataset) {\n        this.updateDataset(dataset);\n        this.clearVisualizers();\n        this.setVisualizers();\n        if (this.rotateOnStart) {\n            this.scatterPlot.startOrbitAnimation();\n        }\n    };\n    ScatterGL.prototype.clearVisualizers = function() {\n        this.canvasLabelsVisualizer = undefined;\n        this.labels3DVisualizer = undefined;\n        this.pointVisualizer = undefined;\n        this.polylineVisualizer = undefined;\n        this.spritesheetVisualizer = undefined;\n        this.scatterPlot.disposeAllVisualizers();\n    };\n    ScatterGL.prototype.renderScatterPlot = function() {\n        if (this.dataset) this.scatterPlot.render();\n    };\n    ScatterGL.prototype.resetZoom = function() {\n        this.scatterPlot.resetZoom();\n    };\n    ScatterGL.prototype.setRenderMode = function(renderMode) {\n        this.renderMode = renderMode;\n        this.setVisualizers();\n        this.updateScatterPlotAttributes();\n        this.updateScatterPlotPositions();\n    };\n    ScatterGL.prototype.setTextRenderMode = function() {\n        this.setRenderMode(\"TEXT\");\n        this.renderScatterPlot();\n    };\n    ScatterGL.prototype.setPointRenderMode = function() {\n        this.setRenderMode(\"POINT\");\n        this.renderScatterPlot();\n    };\n    ScatterGL.prototype.setSpriteRenderMode = function() {\n        if (this.dataset && this.dataset.spriteMetadata) {\n            this.setRenderMode(\"SPRITE\");\n            this.renderScatterPlot();\n        }\n    };\n    ScatterGL.prototype.setSequences = function(sequences) {\n        this.sequences = sequences;\n        this.updatePolylineAttributes();\n        this.setVisualizers();\n        this.renderScatterPlot();\n    };\n    ScatterGL.prototype.setPanMode = function() {\n        this.scatterPlot.setInteractionMode(\"PAN\");\n    };\n    ScatterGL.prototype.setSelectMode = function() {\n        this.scatterPlot.setInteractionMode(\"SELECT\");\n    };\n    ScatterGL.prototype.setDimensions = function(nDimensions) {\n        var outsideRange = nDimensions < 2 || nDimensions > 3;\n        var moreThanDataset = this.dataset && nDimensions > this.dataset.dimensions;\n        if (outsideRange || moreThanDataset) {\n            throw new RangeError(\"Setting invalid dimensionality\");\n        } else {\n            this.scatterPlot.setDimensions(nDimensions);\n            this.renderScatterPlot();\n        }\n    };\n    ScatterGL.prototype.setPointColorer = function(pointColorer) {\n        this.pointColorer = pointColorer;\n        this.updateScatterPlotAttributes();\n        this.renderScatterPlot();\n    };\n    ScatterGL.prototype.callPointColorer = function(pointColorer, index) {\n        return pointColorer(index, this.selectedPointIndices, this.hoverPointIndex);\n    };\n    ScatterGL.prototype.setHoverPointIndex = function(index) {\n        this.hoverPointIndex = index;\n        this.updateScatterPlotAttributes();\n        if (this.scatterPlot.orbitIsAnimating()) return;\n        this.renderScatterPlot();\n    };\n    ScatterGL.prototype.resize = function() {\n        this.scatterPlot.resize();\n    };\n    ScatterGL.prototype.updateDataset = function(dataset) {\n        this.setDataset(dataset);\n        this.scatterPlot.setDimensions(dataset.dimensions);\n        this.updateScatterPlotAttributes();\n        this.updateScatterPlotPositions();\n        this.renderScatterPlot();\n    };\n    ScatterGL.prototype.isOrbiting = function() {\n        return this.scatterPlot.orbitIsAnimating();\n    };\n    ScatterGL.prototype.startOrbitAnimation = function() {\n        this.scatterPlot.startOrbitAnimation();\n    };\n    ScatterGL.prototype.stopOrbitAnimation = function() {\n        this.scatterPlot.stopOrbitAnimation();\n    };\n    ScatterGL.prototype.setDataset = function(dataset) {\n        this.dataset = dataset;\n        if (this.labels3DVisualizer) {\n            this.labels3DVisualizer.setLabelStrings(this.generate3DLabelsArray());\n        }\n    };\n    ScatterGL.prototype.updateScatterPlotPositions = function() {\n        var dataset = this.dataset;\n        if (!dataset) return;\n        var newPositions = this.generatePointPositionArray(dataset);\n        this.scatterPlot.setPointPositions(newPositions);\n    };\n    ScatterGL.prototype.updateScatterPlotAttributes = function() {\n        var dataset = this.dataset;\n        if (!dataset) return;\n        var pointColors = this.generatePointColorArray(dataset);\n        var pointScaleFactors = this.generatePointScaleFactorArray(dataset);\n        var labels = this.generateVisibleLabelRenderParams();\n        this.scatterPlot.setPointColors(pointColors);\n        this.scatterPlot.setPointScaleFactors(pointScaleFactors);\n        this.scatterPlot.setLabels(labels);\n    };\n    ScatterGL.prototype.updatePolylineAttributes = function() {\n        var dataset = this.dataset;\n        if (!dataset) return;\n        var polylineColors = this.generateLineSegmentColorMap(dataset);\n        var polylineOpacities = this.generateLineSegmentOpacityArray(dataset);\n        var polylineWidths = this.generateLineSegmentWidthArray(dataset);\n        this.scatterPlot.setPolylineColors(polylineColors);\n        this.scatterPlot.setPolylineOpacities(polylineOpacities);\n        this.scatterPlot.setPolylineWidths(polylineWidths);\n    };\n    ScatterGL.prototype.generatePointPositionArray = function(dataset) {\n        var xExtent = [\n            0,\n            0\n        ];\n        var yExtent = [\n            0,\n            0\n        ];\n        var zExtent = [\n            0,\n            0\n        ];\n        xExtent = util.extent(dataset.points.map(function(p) {\n            return p[0];\n        }));\n        yExtent = util.extent(dataset.points.map(function(p) {\n            return p[1];\n        }));\n        if (dataset.dimensions === 3) {\n            zExtent = util.extent(dataset.points.map(function(p) {\n                return p[2];\n            }));\n        }\n        var getRange = function(extent) {\n            return Math.abs(extent[1] - extent[0]);\n        };\n        var xRange = getRange(xExtent);\n        var yRange = getRange(yExtent);\n        var zRange = getRange(zExtent);\n        var maxRange = Math.max(xRange, yRange, zRange);\n        var halfCube = constants_1.SCATTER_PLOT_CUBE_LENGTH / 2;\n        var makeScaleRange = function(range, base) {\n            return [\n                -base * (range / maxRange),\n                base * (range / maxRange)\n            ];\n        };\n        var xScale = makeScaleRange(xRange, halfCube);\n        var yScale = makeScaleRange(yRange, halfCube);\n        var zScale = makeScaleRange(zRange, halfCube);\n        var positions = new Float32Array(dataset.points.length * 3);\n        var dst = 0;\n        dataset.points.forEach(function(d, i) {\n            var vector = dataset.points[i];\n            positions[dst++] = util.scaleLinear(vector[0], xExtent, xScale);\n            positions[dst++] = util.scaleLinear(vector[1], yExtent, yScale);\n            if (dataset.dimensions === 3) {\n                positions[dst++] = util.scaleLinear(vector[2], zExtent, zScale);\n            } else {\n                positions[dst++] = 0.0;\n            }\n        });\n        return positions;\n    };\n    ScatterGL.prototype.generateVisibleLabelRenderParams = function() {\n        var _a = this, hoverPointIndex = _a.hoverPointIndex, selectedPointIndices = _a.selectedPointIndices, styles = _a.styles;\n        var n = hoverPointIndex !== null ? 1 : 0;\n        var visibleLabels = new Uint32Array(n);\n        var scale = new Float32Array(n);\n        var opacityFlags = new Int8Array(n);\n        var fillColors = new Uint8Array(n * 3);\n        var strokeColors = new Uint8Array(n * 3);\n        var labelStrings = [];\n        scale.fill(styles.label.scaleDefault);\n        opacityFlags.fill(1);\n        var dst = 0;\n        if (hoverPointIndex !== null) {\n            labelStrings.push(this.getLabelText(hoverPointIndex));\n            visibleLabels[dst] = hoverPointIndex;\n            scale[dst] = styles.label.scaleLarge;\n            opacityFlags[dst] = 0;\n            var fillRgb = util.styleRgbFromHexColor(styles.label.fillColorHover);\n            util.packRgbIntoUint8Array(fillColors, dst, fillRgb[0], fillRgb[1], fillRgb[2]);\n            var strokeRgb = util.styleRgbFromHexColor(styles.label.strokeColorHover);\n            util.packRgbIntoUint8Array(strokeColors, dst, strokeRgb[0], strokeRgb[1], strokeRgb[1]);\n            ++dst;\n        }\n        {\n            var fillRgb = util.styleRgbFromHexColor(styles.label.fillColorSelected);\n            var strokeRgb = util.styleRgbFromHexColor(styles.label.strokeColorSelected);\n            if (selectedPointIndices.size === 1) {\n                var labelIndex = __spread(selectedPointIndices)[0];\n                labelStrings.push(this.getLabelText(labelIndex));\n                visibleLabels[dst] = labelIndex;\n                scale[dst] = styles.label.scaleLarge;\n                opacityFlags[dst] = 0;\n                util.packRgbIntoUint8Array(fillColors, dst, fillRgb[0], fillRgb[1], fillRgb[2]);\n                util.packRgbIntoUint8Array(strokeColors, dst, strokeRgb[0], strokeRgb[1], strokeRgb[2]);\n            }\n        }\n        return new render_1.LabelRenderParams(new Float32Array(visibleLabels), labelStrings, scale, opacityFlags, styles.label.fontSize, fillColors, strokeColors);\n    };\n    ScatterGL.prototype.generatePointScaleFactorArray = function(dataset) {\n        var e_1, _a;\n        var _b = this, hoverPointIndex = _b.hoverPointIndex, selectedPointIndices = _b.selectedPointIndices, styles = _b.styles;\n        var _c = styles.point, scaleDefault = _c.scaleDefault, scaleSelected = _c.scaleSelected, scaleHover = _c.scaleHover;\n        var scale = new Float32Array(dataset.points.length);\n        scale.fill(scaleDefault);\n        var selectedPointCount = selectedPointIndices.size;\n        {\n            try {\n                for(var _d = __values(selectedPointIndices.values()), _e = _d.next(); !_e.done; _e = _d.next()){\n                    var p = _e.value;\n                    scale[p] = scaleSelected;\n                }\n            } catch (e_1_1) {\n                e_1 = {\n                    error: e_1_1\n                };\n            } finally{\n                try {\n                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n                } finally{\n                    if (e_1) throw e_1.error;\n                }\n            }\n        }\n        if (hoverPointIndex != null) {\n            scale[hoverPointIndex] = scaleHover;\n        }\n        return scale;\n    };\n    ScatterGL.prototype.generatePointColorArray = function(dataset) {\n        var e_2, _a;\n        var _b = this, hoverPointIndex = _b.hoverPointIndex, pointColorer = _b.pointColorer, selectedPointIndices = _b.selectedPointIndices, styles = _b.styles;\n        var _c = styles.point, colorHover = _c.colorHover, colorNoSelection = _c.colorNoSelection, colorSelected = _c.colorSelected, colorUnselected = _c.colorUnselected;\n        var colors = new Float32Array(dataset.points.length * constants_1.RGBA_NUM_ELEMENTS);\n        var unselectedColor = colorUnselected;\n        var noSelectionColor = colorNoSelection;\n        if (this.renderMode === \"TEXT\") {\n            unselectedColor = this.styles.label3D.colorUnselected;\n            noSelectionColor = this.styles.label3D.colorNoSelection;\n        }\n        if (this.renderMode === \"SPRITE\") {\n            unselectedColor = this.styles.sprites.colorUnselected;\n            noSelectionColor = this.styles.sprites.colorNoSelection;\n        }\n        var n = dataset.points.length;\n        var selectedPointCount = this.selectedPointIndices.size;\n        if (pointColorer) {\n            var dst = 0;\n            for(var i = 0; i < n; ++i){\n                var c = color_1.parseColor(this.callPointColorer(pointColorer, i) || noSelectionColor);\n                colors[dst++] = c.r;\n                colors[dst++] = c.g;\n                colors[dst++] = c.b;\n                colors[dst++] = c.opacity;\n            }\n        } else {\n            var dst = 0;\n            var c = selectedPointCount > 0 ? color_1.parseColor(unselectedColor) : color_1.parseColor(noSelectionColor);\n            for(var i = 0; i < n; ++i){\n                colors[dst++] = c.r;\n                colors[dst++] = c.g;\n                colors[dst++] = c.b;\n                colors[dst++] = c.opacity;\n            }\n            c = color_1.parseColor(colorSelected);\n            try {\n                for(var _d = __values(selectedPointIndices.values()), _e = _d.next(); !_e.done; _e = _d.next()){\n                    var selectedPointIndex = _e.value;\n                    var dst_1 = selectedPointIndex * constants_1.RGBA_NUM_ELEMENTS;\n                    colors[dst_1++] = c.r;\n                    colors[dst_1++] = c.g;\n                    colors[dst_1++] = c.b;\n                    colors[dst_1++] = c.opacity;\n                }\n            } catch (e_2_1) {\n                e_2 = {\n                    error: e_2_1\n                };\n            } finally{\n                try {\n                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n                } finally{\n                    if (e_2) throw e_2.error;\n                }\n            }\n            if (hoverPointIndex != null) {\n                var c_1 = color_1.parseColor(colorHover);\n                var dst_2 = hoverPointIndex * constants_1.RGBA_NUM_ELEMENTS;\n                colors[dst_2++] = c_1.r;\n                colors[dst_2++] = c_1.g;\n                colors[dst_2++] = c_1.b;\n                colors[dst_2++] = c_1.opacity;\n            }\n        }\n        return colors;\n    };\n    ScatterGL.prototype.generate3DLabelsArray = function() {\n        var dataset = this.dataset;\n        if (!dataset) return [];\n        var labels = [];\n        var n = dataset.points.length;\n        for(var i = 0; i < n; ++i){\n            labels.push(this.getLabelText(i));\n        }\n        return labels;\n    };\n    ScatterGL.prototype.generateLineSegmentColorMap = function(dataset) {\n        var _a = this, pointColorer = _a.pointColorer, styles = _a.styles;\n        var polylineColorArrayMap = {};\n        for(var i = 0; i < this.sequences.length; i++){\n            var sequence = this.sequences[i];\n            var colors = new Float32Array(2 * (sequence.indices.length - 1) * 3);\n            var colorIndex = 0;\n            if (pointColorer) {\n                for(var j = 0; j < sequence.indices.length - 1; j++){\n                    var c1 = color_1.parseColor(this.callPointColorer(pointColorer, sequence.indices[j]));\n                    var c2 = color_1.parseColor(this.callPointColorer(pointColorer, sequence.indices[j + 1]));\n                    colors[colorIndex++] = c1.r;\n                    colors[colorIndex++] = c1.g;\n                    colors[colorIndex++] = c1.b;\n                    colors[colorIndex++] = c2.r;\n                    colors[colorIndex++] = c2.g;\n                    colors[colorIndex++] = c2.b;\n                }\n            } else {\n                for(var j = 0; j < sequence.indices.length - 1; j++){\n                    var c1 = util.getDefaultPointInPolylineColor(j, sequence.indices.length, styles.polyline.startHue, styles.polyline.endHue, styles.polyline.saturation, styles.polyline.lightness);\n                    var c2 = util.getDefaultPointInPolylineColor(j + 1, sequence.indices.length, styles.polyline.startHue, styles.polyline.endHue, styles.polyline.saturation, styles.polyline.lightness);\n                    colors[colorIndex++] = c1.r;\n                    colors[colorIndex++] = c1.g;\n                    colors[colorIndex++] = c1.b;\n                    colors[colorIndex++] = c2.r;\n                    colors[colorIndex++] = c2.g;\n                    colors[colorIndex++] = c2.b;\n                }\n            }\n            polylineColorArrayMap[i] = colors;\n        }\n        return polylineColorArrayMap;\n    };\n    ScatterGL.prototype.generateLineSegmentOpacityArray = function(dataset) {\n        var _a = this, selectedPointIndices = _a.selectedPointIndices, styles = _a.styles;\n        var opacities = new Float32Array(this.sequences.length);\n        var selectedPointCount = selectedPointIndices.size;\n        if (selectedPointCount > 0) {\n            opacities.fill(styles.polyline.deselectedOpacity);\n            var i = this.polylineVisualizer.getPointSequenceIndex(__spread(selectedPointIndices)[0]);\n            if (i !== undefined) opacities[i] = styles.polyline.selectedOpacity;\n        } else {\n            opacities.fill(styles.polyline.defaultOpacity);\n        }\n        return opacities;\n    };\n    ScatterGL.prototype.generateLineSegmentWidthArray = function(dataset) {\n        var _a = this, selectedPointIndices = _a.selectedPointIndices, styles = _a.styles;\n        var widths = new Float32Array(this.sequences.length);\n        widths.fill(styles.polyline.defaultLineWidth);\n        var selectedPointCount = selectedPointIndices.size;\n        if (selectedPointCount > 0) {\n            var i = this.polylineVisualizer.getPointSequenceIndex(__spread(selectedPointIndices)[0]);\n            if (i !== undefined) widths[i] = styles.polyline.selectedLineWidth;\n        }\n        return widths;\n    };\n    ScatterGL.prototype.getLabelText = function(i) {\n        var dataset = this.dataset;\n        if (!dataset) return \"\";\n        var metadata = dataset.metadata[i];\n        return metadata && metadata.label != null ? \"\" + metadata.label : \"\";\n    };\n    ScatterGL.prototype.initializeCanvasLabelsVisualizer = function() {\n        if (!this.canvasLabelsVisualizer) {\n            this.canvasLabelsVisualizer = new scatter_plot_visualizer_canvas_labels_1.ScatterPlotVisualizerCanvasLabels(this.containerElement, this.styles);\n        }\n        return this.canvasLabelsVisualizer;\n    };\n    ScatterGL.prototype.initialize3DLabelsVisualizer = function() {\n        if (!this.labels3DVisualizer) {\n            this.labels3DVisualizer = new scatter_plot_visualizer_3d_labels_1.ScatterPlotVisualizer3DLabels(this.styles);\n        }\n        this.labels3DVisualizer.setLabelStrings(this.generate3DLabelsArray());\n        return this.labels3DVisualizer;\n    };\n    ScatterGL.prototype.initializePointVisualizer = function() {\n        if (!this.pointVisualizer) {\n            this.pointVisualizer = new scatter_plot_visualizer_sprites_1.ScatterPlotVisualizerSprites(this.styles);\n        }\n        return this.pointVisualizer;\n    };\n    ScatterGL.prototype.initializeSpritesheetVisualizer = function() {\n        var _this = this;\n        var styles = this.styles;\n        var dataset = this.dataset;\n        var spriteMetadata = dataset.spriteMetadata;\n        if (!this.spritesheetVisualizer && spriteMetadata) {\n            if (!spriteMetadata.spriteImage || !spriteMetadata.singleSpriteSize) {\n                return;\n            }\n            var n = dataset.points.length;\n            var spriteIndices = void 0;\n            if (spriteMetadata.spriteIndices) {\n                spriteIndices = new Float32Array(spriteMetadata.spriteIndices);\n            } else {\n                spriteIndices = new Float32Array(n);\n                for(var i = 0; i < n; ++i){\n                    spriteIndices[i] = i;\n                }\n            }\n            var onImageLoad = function() {\n                return _this.renderScatterPlot();\n            };\n            var spritesheetVisualizer = new scatter_plot_visualizer_sprites_1.ScatterPlotVisualizerSprites(styles, {\n                spritesheetImage: spriteMetadata.spriteImage,\n                spriteDimensions: spriteMetadata.singleSpriteSize,\n                spriteIndices: spriteIndices,\n                onImageLoad: onImageLoad\n            });\n            spritesheetVisualizer.id = \"SPRITE_SHEET_VISUALIZER\";\n            this.spritesheetVisualizer = spritesheetVisualizer;\n        }\n        return this.spritesheetVisualizer;\n    };\n    ScatterGL.prototype.initializePolylineVisualizer = function() {\n        if (!this.polylineVisualizer) {\n            this.polylineVisualizer = new scatter_plot_visualizer_polylines_1.ScatterPlotVisualizerPolylines();\n        }\n        this.polylineVisualizer.setSequences(this.sequences);\n        return this.polylineVisualizer;\n    };\n    ScatterGL.prototype.setVisualizers = function() {\n        var _a = this, dataset = _a.dataset, renderMode = _a.renderMode;\n        var activeVisualizers = [];\n        if (renderMode === \"TEXT\") {\n            var visualizer = this.initialize3DLabelsVisualizer();\n            activeVisualizers.push(visualizer);\n        } else if (renderMode === \"POINT\") {\n            var visualizer = this.initializePointVisualizer();\n            activeVisualizers.push(visualizer);\n        } else if (renderMode === \"SPRITE\" && dataset.spriteMetadata) {\n            var visualizer = this.initializeSpritesheetVisualizer();\n            if (visualizer) activeVisualizers.push(visualizer);\n        }\n        if (this.sequences.length > 0) {\n            var visualizer = this.initializePolylineVisualizer();\n            activeVisualizers.push(visualizer);\n        }\n        var textLabelsRenderMode = renderMode === \"POINT\" || renderMode === \"SPRITE\";\n        if (textLabelsRenderMode && this.showLabelsOnHover) {\n            var visualizer = this.initializeCanvasLabelsVisualizer();\n            activeVisualizers.push(visualizer);\n        }\n        this.scatterPlot.setActiveVisualizers(activeVisualizers);\n    };\n    ScatterGL.Dataset = data_1.Dataset;\n    return ScatterGL;\n}();\nexports.ScatterGL = ScatterGL;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/scatter_gl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/scatter_plot.js":
/*!******************************************************!*\
  !*** ./node_modules/scatter-gl/dist/scatter_plot.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (void 0) && (void 0).__read || function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nvar __values = (void 0) && (void 0).__values || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\nvar OrbitControls_1 = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls */ \"(ssr)/./node_modules/three/examples/jsm/controls/OrbitControls.js\");\nvar render_1 = __webpack_require__(/*! ./render */ \"(ssr)/./node_modules/scatter-gl/dist/render.js\");\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/scatter-gl/dist/util.js\");\nvar scatter_plot_rectangle_selector_1 = __webpack_require__(/*! ./scatter_plot_rectangle_selector */ \"(ssr)/./node_modules/scatter-gl/dist/scatter_plot_rectangle_selector.js\");\nvar CUBE_LENGTH = 2;\nvar MAX_ZOOM = 5 * CUBE_LENGTH;\nvar MIN_ZOOM = 0.025 * CUBE_LENGTH;\nvar PERSP_CAMERA_FOV_VERTICAL = 70;\nvar PERSP_CAMERA_NEAR_CLIP_PLANE = 0.01;\nvar PERSP_CAMERA_FAR_CLIP_PLANE = 100;\nvar ORTHO_CAMERA_FRUSTUM_HALF_EXTENT = 1.2;\nvar SHIFT_KEY = \"Shift\";\nvar CTRL_KEY = \"Control\";\nvar START_CAMERA_POS_3D = new THREE.Vector3(0.45, 0.9, 1.6);\nvar START_CAMERA_TARGET_3D = new THREE.Vector3(0, 0, 0);\nvar START_CAMERA_POS_2D = new THREE.Vector3(0, 0, 4);\nvar START_CAMERA_TARGET_2D = new THREE.Vector3(0, 0, 0);\nvar DEFAULT_ORBIT_CONTROL_PARAMS = {\n    mouseRotateSpeed: 1,\n    autoRotateSpeed: 2,\n    zoomSpeed: 0.125\n};\nvar ScatterPlot = function() {\n    function ScatterPlot(containerElement, params) {\n        var _this = this;\n        this.clickCallback = function() {};\n        this.hoverCallback = function() {};\n        this.selectCallback = function() {};\n        this.selectEnabled = true;\n        this.visualizers = new Map();\n        this.onCameraMoveListeners = [];\n        this.height = 0;\n        this.width = 0;\n        this.dimensions = 3;\n        this.interactionMode = \"PAN\";\n        this.pickingTexture = new THREE.WebGLRenderTarget(0, 0);\n        this.orbitAnimationOnNextCameraCreation = false;\n        this.orbitAnimationId = null;\n        this.worldSpacePointPositions = new Float32Array(0);\n        this.pointColors = new Float32Array(0);\n        this.pointScaleFactors = new Float32Array(0);\n        this.polylineColors = {};\n        this.polylineOpacities = new Float32Array(0);\n        this.polylineWidths = new Float32Array(0);\n        this.selecting = false;\n        this.nearestPoint = null;\n        this.mouseIsDown = false;\n        this.isDragSequence = false;\n        this.lastHovered = null;\n        this.container = containerElement;\n        this.styles = params.styles;\n        this.setParameters(params);\n        this.computeLayoutValues();\n        this.scene = new THREE.Scene();\n        this.renderer = new THREE.WebGLRenderer({\n            alpha: true,\n            premultipliedAlpha: false,\n            antialias: false\n        });\n        this.renderer.setClearColor(this.styles.backgroundColor, 1);\n        this.container.appendChild(this.renderer.domElement);\n        this.light = new THREE.PointLight(0xffecbf, 1, 0);\n        this.scene.add(this.light);\n        this.orbitControlParams = __assign(__assign({}, DEFAULT_ORBIT_CONTROL_PARAMS), params.orbitControlParams);\n        this.rectangleSelector = new scatter_plot_rectangle_selector_1.ScatterPlotRectangleSelector(this.container, function(boundingBox) {\n            _this.selectBoundingBox(boundingBox);\n        }, this.styles);\n        this.addInteractionListeners();\n        this.setDimensions(3);\n        this.makeCamera(params.camera);\n        this.resize();\n    }\n    ScatterPlot.prototype.setParameters = function(p) {\n        if (p.onClick !== undefined) this.clickCallback = p.onClick;\n        if (p.onHover !== undefined) this.hoverCallback = p.onHover;\n        if (p.onSelect !== undefined) this.selectCallback = p.onSelect;\n        if (p.selectEnabled !== undefined) this.selectEnabled = p.selectEnabled;\n    };\n    ScatterPlot.prototype.addInteractionListeners = function() {\n        this.container.addEventListener(\"pointermove\", this.onMouseMove.bind(this));\n        this.container.addEventListener(\"pointerdown\", this.onMouseDown.bind(this));\n        this.container.addEventListener(\"pointerup\", this.onMouseUp.bind(this));\n        this.container.addEventListener(\"click\", this.onClick.bind(this));\n        window.addEventListener(\"keydown\", this.onKeyDown.bind(this), false);\n        window.addEventListener(\"keyup\", this.onKeyUp.bind(this), false);\n    };\n    ScatterPlot.prototype.addCameraControlsEventListeners = function(cameraControls) {\n        var _this = this;\n        cameraControls.addEventListener(\"start\", function() {\n            _this.stopOrbitAnimation();\n            _this.onCameraMoveListeners.forEach(function(l) {\n                return l(_this.camera.position, cameraControls.target);\n            });\n        });\n        cameraControls.addEventListener(\"change\", function() {\n            _this.render();\n        });\n        cameraControls.addEventListener(\"end\", function() {});\n    };\n    ScatterPlot.prototype.makeOrbitControls = function(camera, cameraIs3D) {\n        if (this.orbitCameraControls != null) {\n            this.orbitCameraControls.dispose();\n        }\n        var occ = new OrbitControls_1.OrbitControls(camera, this.renderer.domElement);\n        occ.zoomSpeed = this.orbitControlParams.zoomSpeed;\n        occ.enableRotate = cameraIs3D;\n        occ.autoRotate = false;\n        occ.enableKeys = false;\n        occ.rotateSpeed = this.orbitControlParams.mouseRotateSpeed;\n        if (cameraIs3D) {\n            occ.mouseButtons.LEFT = THREE.MOUSE.LEFT;\n            occ.mouseButtons.RIGHT = THREE.MOUSE.RIGHT;\n        } else {\n            occ.mouseButtons.LEFT = THREE.MOUSE.RIGHT;\n            occ.mouseButtons.RIGHT = THREE.MOUSE.LEFT;\n        }\n        occ.reset();\n        this.camera = camera;\n        this.orbitCameraControls = occ;\n        this.addCameraControlsEventListeners(this.orbitCameraControls);\n    };\n    ScatterPlot.prototype.makeCamera = function(cameraParams) {\n        if (cameraParams === void 0) {\n            cameraParams = {};\n        }\n        var def = this.makeDefaultCameraDef(this.dimensions, cameraParams);\n        this.recreateCamera(def);\n        if (this.dimensions === 3 && this.styles.axesVisible) {\n            this.add3dAxes();\n        } else {\n            this.remove3dAxesFromScene();\n        }\n    };\n    ScatterPlot.prototype.makeCamera3D = function(cameraDef, w, h) {\n        var camera;\n        {\n            var aspectRatio = w / h;\n            camera = new THREE.PerspectiveCamera(PERSP_CAMERA_FOV_VERTICAL, aspectRatio, PERSP_CAMERA_NEAR_CLIP_PLANE, PERSP_CAMERA_FAR_CLIP_PLANE);\n            camera.position.set(cameraDef.position[0], cameraDef.position[1], cameraDef.position[2]);\n            var at = new THREE.Vector3(cameraDef.target[0], cameraDef.target[1], cameraDef.target[2]);\n            camera.lookAt(at);\n            camera.zoom = cameraDef.zoom;\n            camera.updateProjectionMatrix();\n        }\n        this.camera = camera;\n        this.makeOrbitControls(camera, true);\n    };\n    ScatterPlot.prototype.makeCamera2D = function(cameraDef, w, h) {\n        var camera;\n        var target = new THREE.Vector3(cameraDef.target[0], cameraDef.target[1], cameraDef.target[2]);\n        {\n            var aspectRatio = w / h;\n            var left = -ORTHO_CAMERA_FRUSTUM_HALF_EXTENT;\n            var right = ORTHO_CAMERA_FRUSTUM_HALF_EXTENT;\n            var bottom = -ORTHO_CAMERA_FRUSTUM_HALF_EXTENT;\n            var top_1 = ORTHO_CAMERA_FRUSTUM_HALF_EXTENT;\n            if (aspectRatio > 1) {\n                left *= aspectRatio;\n                right *= aspectRatio;\n            } else {\n                top_1 /= aspectRatio;\n                bottom /= aspectRatio;\n            }\n            camera = new THREE.OrthographicCamera(left, right, top_1, bottom, -1000, 1000);\n            camera.position.set(cameraDef.position[0], cameraDef.position[1], cameraDef.position[2]);\n            camera.up = new THREE.Vector3(0, 0, 1);\n            camera.lookAt(target);\n            camera.zoom = cameraDef.zoom;\n            camera.updateProjectionMatrix();\n        }\n        this.camera = camera;\n        this.makeOrbitControls(camera, false);\n    };\n    ScatterPlot.prototype.makeDefaultCameraDef = function(dimensions, cameraParams) {\n        if (cameraParams === void 0) {\n            cameraParams = {};\n        }\n        var orthographic = dimensions === 2;\n        var position = orthographic ? START_CAMERA_POS_2D : START_CAMERA_POS_3D;\n        var target = orthographic ? START_CAMERA_TARGET_2D : START_CAMERA_TARGET_3D;\n        var def = {\n            orthographic: orthographic,\n            zoom: 1.0,\n            position: [\n                position.x,\n                position.y,\n                position.z\n            ],\n            target: [\n                target.x,\n                target.y,\n                target.z\n            ]\n        };\n        if (cameraParams.zoom) def.zoom = cameraParams.zoom;\n        if (cameraParams.position) def.position = cameraParams.position;\n        if (cameraParams.target) def.target = cameraParams.target;\n        return def;\n    };\n    ScatterPlot.prototype.recreateCamera = function(cameraDef) {\n        if (cameraDef.orthographic) {\n            this.makeCamera2D(cameraDef, this.width, this.height);\n        } else {\n            this.makeCamera3D(cameraDef, this.width, this.height);\n        }\n        this.orbitCameraControls.minDistance = MIN_ZOOM;\n        this.orbitCameraControls.maxDistance = MAX_ZOOM;\n        this.orbitCameraControls.update();\n        if (this.orbitAnimationOnNextCameraCreation) {\n            this.startOrbitAnimation();\n        }\n    };\n    ScatterPlot.prototype.setInteractionMode = function(interactionMode) {\n        this.interactionMode = interactionMode;\n        if (interactionMode === \"SELECT\") {\n            this.selecting = true;\n            this.container.style.cursor = \"crosshair\";\n            this.orbitCameraControls.enabled = false;\n        } else {\n            this.selecting = false;\n            this.container.style.cursor = \"default\";\n            this.orbitCameraControls.enabled = true;\n        }\n    };\n    ScatterPlot.prototype.onClick = function(e, notify) {\n        if (notify === void 0) {\n            notify = true;\n        }\n        if (e && this.selecting) {\n            return;\n        }\n        if (!this.isDragSequence && notify) {\n            if (this.selectEnabled) {\n                var selected = this.nearestPoint != null ? [\n                    this.nearestPoint\n                ] : [];\n                this.selectCallback(selected);\n            }\n            this.clickCallback(this.nearestPoint);\n        }\n        this.isDragSequence = false;\n        this.render();\n    };\n    ScatterPlot.prototype.onMouseDown = function(e) {\n        this.isDragSequence = false;\n        this.mouseIsDown = true;\n        if (this.selecting) {\n            this.rectangleSelector.onMouseDown(e.offsetX, e.offsetY);\n            this.setNearestPointToMouse(e);\n        } else if (!e.ctrlKey && this.sceneIs3D() && this.orbitCameraControls.mouseButtons.ORBIT === THREE.MOUSE.RIGHT) {\n            this.orbitCameraControls.mouseButtons.ORBIT = THREE.MOUSE.LEFT;\n            this.orbitCameraControls.mouseButtons.PAN = THREE.MOUSE.RIGHT;\n        } else if (e.ctrlKey && this.sceneIs3D() && this.orbitCameraControls.mouseButtons.ORBIT === THREE.MOUSE.LEFT) {\n            this.orbitCameraControls.mouseButtons.ORBIT = THREE.MOUSE.RIGHT;\n            this.orbitCameraControls.mouseButtons.PAN = THREE.MOUSE.LEFT;\n        }\n    };\n    ScatterPlot.prototype.onMouseUp = function(e) {\n        if (this.selecting) {\n            this.rectangleSelector.onMouseUp();\n            this.render();\n        }\n        this.mouseIsDown = false;\n    };\n    ScatterPlot.prototype.onMouseMove = function(e) {\n        this.isDragSequence = this.mouseIsDown;\n        if (this.selecting && this.mouseIsDown) {\n            this.rectangleSelector.onMouseMove(e.offsetX, e.offsetY);\n            this.render();\n        } else if (!this.mouseIsDown) {\n            this.setNearestPointToMouse(e);\n            if (this.nearestPoint != this.lastHovered) {\n                this.lastHovered = this.nearestPoint;\n                this.hoverCallback(this.nearestPoint);\n            }\n        }\n    };\n    ScatterPlot.prototype.onKeyDown = function(e) {\n        if (e.key === CTRL_KEY && this.sceneIs3D()) {\n            this.orbitCameraControls.mouseButtons.ORBIT = THREE.MOUSE.RIGHT;\n            this.orbitCameraControls.mouseButtons.PAN = THREE.MOUSE.LEFT;\n        }\n        if (e.key === SHIFT_KEY && this.selectEnabled) {\n            this.selecting = true;\n            this.orbitCameraControls.enabled = false;\n            this.container.style.cursor = \"crosshair\";\n        }\n    };\n    ScatterPlot.prototype.onKeyUp = function(e) {\n        if (e.key === CTRL_KEY && this.sceneIs3D()) {\n            this.orbitCameraControls.mouseButtons.ORBIT = THREE.MOUSE.LEFT;\n            this.orbitCameraControls.mouseButtons.PAN = THREE.MOUSE.RIGHT;\n        }\n        if (e.key === SHIFT_KEY && this.selectEnabled) {\n            this.selecting = false;\n            this.orbitCameraControls.enabled = true;\n            this.container.style.cursor = \"default\";\n            this.render();\n        }\n    };\n    ScatterPlot.prototype.getPointIndicesFromBoundingBox = function(boundingBox) {\n        if (this.worldSpacePointPositions == null) {\n            return [];\n        }\n        this.camera.updateMatrixWorld();\n        var dpr = window.devicePixelRatio || 1;\n        var selectionX = Math.floor(boundingBox.x * dpr);\n        var selectionY = Math.floor(boundingBox.y * dpr);\n        var selectionWidth = Math.max(Math.floor(boundingBox.width * dpr), 1);\n        var selectionHeight = Math.max(Math.floor(boundingBox.height * dpr), 1);\n        if (selectionWidth <= 2 && selectionHeight <= 2) {\n            return this.getPointIndicesFromBoundingBoxPickingTexture(boundingBox);\n        }\n        var canvas = this.renderer.domElement;\n        var canvasWidth = canvas.width;\n        var canvasHeight = canvas.height;\n        var pointIndices = [];\n        var vector3 = new THREE.Vector3();\n        for(var i = 0; i < this.worldSpacePointPositions.length; i++){\n            var start = i * 3;\n            var _a = __read(this.worldSpacePointPositions.slice(start, start + 3), 3), worldX = _a[0], worldY = _a[1], worldZ = _a[2];\n            vector3.x = worldX;\n            vector3.y = worldY;\n            vector3.z = worldZ;\n            var screenVector = vector3.project(this.camera);\n            var x = (screenVector.x + 1) * canvasWidth / 2;\n            var y = -(screenVector.y - 1) * canvasHeight / 2;\n            if (x >= selectionX && x <= selectionX + selectionWidth) {\n                if (y <= selectionY && y >= selectionY - selectionHeight) {\n                    pointIndices.push(i);\n                }\n            }\n        }\n        return pointIndices;\n    };\n    ScatterPlot.prototype.getPointIndicesFromBoundingBoxPickingTexture = function(boundingBox) {\n        if (this.worldSpacePointPositions == null) {\n            return [];\n        }\n        var pointCount = this.worldSpacePointPositions.length / 3;\n        var dpr = window.devicePixelRatio || 1;\n        var x = Math.floor(boundingBox.x * dpr);\n        var y = Math.floor(boundingBox.y * dpr);\n        var width = Math.max(Math.floor(boundingBox.width * dpr), 1);\n        var height = Math.max(Math.floor(boundingBox.height * dpr), 1);\n        var pixelBuffer = new Uint8Array(width * height * 4);\n        this.renderer.readRenderTargetPixels(this.pickingTexture, x, this.pickingTexture.height - y, width, height, pixelBuffer);\n        var pointIndicesSelection = new Uint8Array(this.worldSpacePointPositions.length);\n        for(var i = 0; i < width * height; i++){\n            var id = pixelBuffer[i * 4] << 16 | pixelBuffer[i * 4 + 1] << 8 | pixelBuffer[i * 4 + 2];\n            if (id !== 0xffffff && id < pointCount) {\n                pointIndicesSelection[id] = 1;\n            }\n        }\n        var pointIndices = [];\n        for(var i = 0; i < pointIndicesSelection.length; i++){\n            if (pointIndicesSelection[i] === 1) {\n                pointIndices.push(i);\n            }\n        }\n        return pointIndices;\n    };\n    ScatterPlot.prototype.selectBoundingBox = function(boundingBox) {\n        var pointIndices = this.getPointIndicesFromBoundingBox(boundingBox);\n        this.selectCallback(pointIndices);\n    };\n    ScatterPlot.prototype.setNearestPointToMouse = function(e) {\n        if (this.pickingTexture == null) {\n            this.nearestPoint = null;\n            return;\n        }\n        var boundingBox = {\n            x: e.offsetX,\n            y: e.offsetY,\n            width: 1,\n            height: 1\n        };\n        var pointIndices = this.getPointIndicesFromBoundingBoxPickingTexture(boundingBox);\n        this.nearestPoint = pointIndices.length ? pointIndices[0] : null;\n    };\n    ScatterPlot.prototype.computeLayoutValues = function() {\n        this.width = this.container.offsetWidth;\n        this.height = Math.max(1, this.container.offsetHeight);\n        return [\n            this.width,\n            this.height\n        ];\n    };\n    ScatterPlot.prototype.sceneIs3D = function() {\n        return this.dimensions === 3;\n    };\n    ScatterPlot.prototype.remove3dAxesFromScene = function() {\n        var axes = this.scene.getObjectByName(\"axes\");\n        if (axes != null) {\n            this.scene.remove(axes);\n        }\n        return axes;\n    };\n    ScatterPlot.prototype.add3dAxes = function() {\n        var axes = new THREE.AxesHelper();\n        axes.name = \"axes\";\n        this.scene.add(axes);\n    };\n    ScatterPlot.prototype.setDimensions = function(dimensions) {\n        if (dimensions !== 2 && dimensions !== 3) {\n            throw new RangeError(\"dimensions must be 2 or 3\");\n        }\n        if (this.dimensions !== dimensions) {\n            this.dimensions = dimensions;\n            this.makeCamera();\n        }\n    };\n    ScatterPlot.prototype.getCameraPosition = function() {\n        var currPos = this.camera.position;\n        return [\n            currPos.x,\n            currPos.y,\n            currPos.z\n        ];\n    };\n    ScatterPlot.prototype.getCameraTarget = function() {\n        var currTarget = this.orbitCameraControls.target;\n        return [\n            currTarget.x,\n            currTarget.y,\n            currTarget.z\n        ];\n    };\n    ScatterPlot.prototype.setCameraPositionAndTarget = function(position, target) {\n        this.stopOrbitAnimation();\n        this.camera.position.set(position[0], position[1], position[2]);\n        this.orbitCameraControls.target.set(target[0], target[1], target[2]);\n        this.orbitCameraControls.update();\n        this.render();\n    };\n    ScatterPlot.prototype.startOrbitAnimation = function() {\n        if (!this.sceneIs3D()) {\n            return;\n        }\n        if (this.orbitAnimationId != null) {\n            this.stopOrbitAnimation();\n        }\n        this.orbitCameraControls.autoRotate = true;\n        this.orbitCameraControls.autoRotateSpeed = this.orbitControlParams.autoRotateSpeed;\n        this.updateOrbitAnimation();\n    };\n    ScatterPlot.prototype.orbitIsAnimating = function() {\n        return this.orbitAnimationId != null;\n    };\n    ScatterPlot.prototype.updateOrbitAnimation = function() {\n        var _this = this;\n        this.orbitCameraControls.update();\n        this.orbitAnimationId = requestAnimationFrame(function() {\n            return _this.updateOrbitAnimation();\n        });\n    };\n    ScatterPlot.prototype.stopOrbitAnimation = function() {\n        this.orbitCameraControls.autoRotate = false;\n        this.orbitCameraControls.rotateSpeed = this.orbitControlParams.mouseRotateSpeed;\n        if (this.orbitAnimationId != null) {\n            cancelAnimationFrame(this.orbitAnimationId);\n            this.orbitAnimationId = null;\n        }\n    };\n    ScatterPlot.prototype.setActiveVisualizers = function(visualizers) {\n        var e_1, _a, e_2, _b;\n        var nextVisualizerIds = new Set(visualizers.map(function(v) {\n            return v.id;\n        }));\n        try {\n            for(var _c = __values(this.visualizers.values()), _d = _c.next(); !_d.done; _d = _c.next()){\n                var visualizer = _d.value;\n                if (!nextVisualizerIds.has(visualizer.id)) {\n                    visualizer.dispose();\n                    this.visualizers.delete(visualizer.id);\n                }\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n        try {\n            for(var visualizers_1 = __values(visualizers), visualizers_1_1 = visualizers_1.next(); !visualizers_1_1.done; visualizers_1_1 = visualizers_1.next()){\n                var visualizer = visualizers_1_1.value;\n                this.visualizers.set(visualizer.id, visualizer);\n                visualizer.setScene(this.scene);\n                visualizer.onResize(this.width, this.height);\n                if (this.worldSpacePointPositions) {\n                    visualizer.onPointPositionsChanged(this.worldSpacePointPositions);\n                }\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (visualizers_1_1 && !visualizers_1_1.done && (_b = visualizers_1.return)) _b.call(visualizers_1);\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n    };\n    ScatterPlot.prototype.disposeAllVisualizers = function() {\n        this.visualizers.forEach(function(v) {\n            return v.dispose();\n        });\n        this.visualizers.clear();\n    };\n    ScatterPlot.prototype.setPointPositions = function(worldSpacePointPositions) {\n        this.worldSpacePointPositions = worldSpacePointPositions;\n        this.visualizers.forEach(function(v) {\n            return v.onPointPositionsChanged(worldSpacePointPositions);\n        });\n    };\n    ScatterPlot.prototype.render = function() {\n        {\n            var lightPos = this.camera.position.clone();\n            lightPos.x += 1;\n            lightPos.y += 1;\n            this.light.position.set(lightPos.x, lightPos.y, lightPos.z);\n        }\n        var cameraType = this.camera instanceof THREE.PerspectiveCamera ? render_1.CameraType.Perspective : render_1.CameraType.Orthographic;\n        var cameraSpacePointExtents = [\n            0,\n            0\n        ];\n        if (this.worldSpacePointPositions != null) {\n            cameraSpacePointExtents = util.getNearFarPoints(this.worldSpacePointPositions, this.camera.position, this.orbitCameraControls.target);\n        }\n        var rc = new render_1.RenderContext(this.camera, cameraType, this.orbitCameraControls.target, this.width, this.height, cameraSpacePointExtents[0], cameraSpacePointExtents[1], this.styles.backgroundColor, this.pointColors, this.pointScaleFactors, this.labels, this.polylineColors, this.polylineOpacities, this.polylineWidths);\n        this.visualizers.forEach(function(v) {\n            return v.onPickingRender(rc);\n        });\n        {\n            var axes = this.remove3dAxesFromScene();\n            this.renderer.setRenderTarget(this.pickingTexture);\n            this.renderer.render(this.scene, this.camera);\n            if (axes != null) {\n                this.scene.add(axes);\n            }\n        }\n        this.visualizers.forEach(function(v) {\n            return v.onRender(rc);\n        });\n        this.renderer.setRenderTarget(null);\n        this.renderer.render(this.scene, this.camera);\n    };\n    ScatterPlot.prototype.setPointColors = function(colors) {\n        this.pointColors = colors;\n    };\n    ScatterPlot.prototype.setPointScaleFactors = function(scaleFactors) {\n        this.pointScaleFactors = scaleFactors;\n    };\n    ScatterPlot.prototype.setLabels = function(labels) {\n        this.labels = labels;\n    };\n    ScatterPlot.prototype.setPolylineColors = function(colors) {\n        this.polylineColors = colors;\n    };\n    ScatterPlot.prototype.setPolylineOpacities = function(opacities) {\n        this.polylineOpacities = opacities;\n    };\n    ScatterPlot.prototype.setPolylineWidths = function(widths) {\n        this.polylineWidths = widths;\n    };\n    ScatterPlot.prototype.resetZoom = function() {\n        this.recreateCamera(this.makeDefaultCameraDef(this.dimensions));\n        this.render();\n    };\n    ScatterPlot.prototype.setDayNightMode = function(isNight) {\n        var canvases = this.container.querySelectorAll(\"canvas\");\n        var filterValue = isNight ? \"invert(100%)\" : \"\";\n        for(var i = 0; i < canvases.length; i++){\n            canvases[i].style.filter = filterValue;\n        }\n    };\n    ScatterPlot.prototype.resize = function(render) {\n        if (render === void 0) {\n            render = true;\n        }\n        var _a = __read([\n            this.width,\n            this.height\n        ], 2), oldW = _a[0], oldH = _a[1];\n        var _b = __read(this.computeLayoutValues(), 2), newW = _b[0], newH = _b[1];\n        if (this.dimensions === 3) {\n            var camera = this.camera;\n            camera.aspect = newW / newH;\n            camera.updateProjectionMatrix();\n        } else {\n            var camera = this.camera;\n            var scaleW = newW / oldW;\n            var scaleH = newH / oldH;\n            var newCamHalfWidth = (camera.right - camera.left) * scaleW / 2;\n            var newCamHalfHeight = (camera.top - camera.bottom) * scaleH / 2;\n            camera.top = newCamHalfHeight;\n            camera.bottom = -newCamHalfHeight;\n            camera.left = -newCamHalfWidth;\n            camera.right = newCamHalfWidth;\n            camera.updateProjectionMatrix();\n        }\n        var dpr = window.devicePixelRatio || 1;\n        this.renderer.setPixelRatio(dpr);\n        this.renderer.setSize(newW, newH);\n        {\n            var renderCanvasSize = new THREE.Vector2();\n            this.renderer.getSize(renderCanvasSize);\n            var pixelRatio = this.renderer.getPixelRatio();\n            this.pickingTexture = new THREE.WebGLRenderTarget(renderCanvasSize.width * pixelRatio, renderCanvasSize.height * pixelRatio);\n            this.pickingTexture.texture.minFilter = THREE.LinearFilter;\n        }\n        this.visualizers.forEach(function(v) {\n            return v.onResize(newW, newH);\n        });\n        if (render) {\n            this.render();\n        }\n    };\n    ScatterPlot.prototype.onCameraMove = function(listener) {\n        this.onCameraMoveListeners.push(listener);\n    };\n    ScatterPlot.prototype.clickOnPoint = function(pointIndex) {\n        this.nearestPoint = pointIndex;\n        this.onClick(null, false);\n    };\n    return ScatterPlot;\n}();\nexports.ScatterPlot = ScatterPlot;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/scatter_plot.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/scatter_plot_rectangle_selector.js":
/*!*************************************************************************!*\
  !*** ./node_modules/scatter-gl/dist/scatter_plot_rectangle_selector.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar ScatterPlotRectangleSelector = function() {\n    function ScatterPlotRectangleSelector(container, selectionCallback, styles) {\n        this.startCoordinates = [\n            0,\n            0\n        ];\n        this.svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        this.svgElement.style.display = \"none\";\n        this.svgElement.style.height = \"100%\";\n        this.svgElement.style.width = \"100%\";\n        this.svgElement.style.position = \"absolute\";\n        container.insertAdjacentElement(\"afterbegin\", this.svgElement);\n        this.rectElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n        this.rectElement.style.stroke = styles.select.stroke;\n        this.rectElement.style.strokeDasharray = styles.select.strokeDashArray;\n        this.rectElement.style.strokeWidth = \"\" + styles.select.strokeWidth;\n        this.rectElement.style.fill = styles.select.fill;\n        this.rectElement.style.fillOpacity = \"\" + styles.select.fillOpacity;\n        this.svgElement.appendChild(this.rectElement);\n        this.selectionCallback = selectionCallback;\n        this.isMouseDown = false;\n    }\n    ScatterPlotRectangleSelector.prototype.onMouseDown = function(offsetX, offsetY) {\n        this.isMouseDown = true;\n        this.rectElement.style.display = \"block\";\n        this.svgElement.style.display = \"block\";\n        this.startCoordinates = [\n            offsetX,\n            offsetY\n        ];\n        this.lastBoundingBox = {\n            x: this.startCoordinates[0],\n            y: this.startCoordinates[1],\n            width: 1,\n            height: 1\n        };\n    };\n    ScatterPlotRectangleSelector.prototype.onMouseMove = function(offsetX, offsetY) {\n        if (!this.isMouseDown) {\n            return;\n        }\n        this.lastBoundingBox.x = Math.min(offsetX, this.startCoordinates[0]);\n        this.lastBoundingBox.y = Math.max(offsetY, this.startCoordinates[1]);\n        this.lastBoundingBox.width = Math.max(offsetX, this.startCoordinates[0]) - this.lastBoundingBox.x;\n        this.lastBoundingBox.height = this.lastBoundingBox.y - Math.min(offsetY, this.startCoordinates[1]);\n        this.rectElement.setAttribute(\"x\", \"\" + this.lastBoundingBox.x);\n        this.rectElement.setAttribute(\"y\", \"\" + (this.lastBoundingBox.y - this.lastBoundingBox.height));\n        this.rectElement.setAttribute(\"width\", \"\" + this.lastBoundingBox.width);\n        this.rectElement.setAttribute(\"height\", \"\" + this.lastBoundingBox.height);\n    };\n    ScatterPlotRectangleSelector.prototype.onMouseUp = function() {\n        this.isMouseDown = false;\n        this.svgElement.style.display = \"none\";\n        this.rectElement.style.display = \"none\";\n        this.rectElement.setAttribute(\"width\", \"0\");\n        this.rectElement.setAttribute(\"height\", \"0\");\n        this.selectionCallback(this.lastBoundingBox);\n    };\n    return ScatterPlotRectangleSelector;\n}();\nexports.ScatterPlotRectangleSelector = ScatterPlotRectangleSelector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/scatter_plot_rectangle_selector.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/scatter_plot_visualizer_3d_labels.js":
/*!***************************************************************************!*\
  !*** ./node_modules/scatter-gl/dist/scatter_plot_visualizer_3d_labels.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/scatter-gl/dist/util.js\");\nvar constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/scatter-gl/dist/constants.js\");\nvar MAX_CANVAS_DIMENSION = 8192;\nvar NUM_GLYPHS = 256;\nvar VERTICES_PER_GLYPH = 2 * 3;\nvar makeVertexShader = function(fontSize, scale) {\n    return \"\\n      attribute vec2 posObj;\\n      attribute vec4 color;\\n      varying vec2 vUv;\\n      varying vec4 vColor;\\n\\n      void main() {\\n        vUv = uv;\\n        vColor = color;\\n\\n        // Rotate label to face camera.\\n\\n        vec4 vRight = vec4(\\n          modelViewMatrix[0][0], modelViewMatrix[1][0], modelViewMatrix[2][0], 0);\\n\\n        vec4 vUp = vec4(\\n          modelViewMatrix[0][1], modelViewMatrix[1][1], modelViewMatrix[2][1], 0);\\n\\n        vec4 vAt = -vec4(\\n          modelViewMatrix[0][2], modelViewMatrix[1][2], modelViewMatrix[2][2], 0);\\n\\n        mat4 pointToCamera = mat4(vRight, vUp, vAt, vec4(0, 0, 0, 1));\\n\\n        vec2 scaledPos = posObj * \" + 1 / fontSize + \" * \" + scale + \";\\n\\n        vec4 posRotated = pointToCamera * vec4(scaledPos, 0, 1);\\n        vec4 mvPosition = modelViewMatrix * (vec4(position, 0) + posRotated);\\n        gl_Position = projectionMatrix * mvPosition;\\n      }\";\n};\nvar FRAGMENT_SHADER = \"\\n      uniform sampler2D glyphTexture;\\n      uniform bool picking;\\n      varying vec2 vUv;\\n      varying vec4 vColor;\\n\\n      void main() {\\n        if (picking) {\\n          gl_FragColor = vColor;\\n        } else {\\n          vec4 fromTexture = texture(glyphTexture, vUv);\\n          gl_FragColor = vColor * fromTexture;\\n        }\\n      }\";\nvar ScatterPlotVisualizer3DLabels = function() {\n    function ScatterPlotVisualizer3DLabels(styles) {\n        this.styles = styles;\n        this.id = \"3D_LABELS\";\n        this.labelStrings = [];\n        this.worldSpacePointPositions = new Float32Array(0);\n        this.pickingColors = new Float32Array(0);\n        this.renderColors = new Float32Array(0);\n        this.uniforms = {};\n        this.totalVertexCount = 0;\n        this.labelVertexMap = [];\n    }\n    ScatterPlotVisualizer3DLabels.prototype.createGlyphTexture = function() {\n        var _a = this.styles.label3D, fontSize = _a.fontSize, backgroundColor = _a.backgroundColor, color = _a.color;\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = MAX_CANVAS_DIMENSION;\n        canvas.height = fontSize;\n        var ctx = canvas.getContext(\"2d\");\n        ctx.font = \"bold \" + fontSize + \"px roboto\";\n        ctx.textBaseline = \"top\";\n        ctx.fillStyle = backgroundColor;\n        ctx.rect(0, 0, canvas.width, canvas.height);\n        ctx.fill();\n        ctx.fillStyle = color;\n        var spaceOffset = ctx.measureText(\" \").width;\n        var glyphLengths = new Float32Array(NUM_GLYPHS);\n        var glyphOffset = new Float32Array(NUM_GLYPHS);\n        var leftCoord = 0;\n        for(var i = 0; i < NUM_GLYPHS; i++){\n            var text = \" \" + String.fromCharCode(i);\n            var textLength = ctx.measureText(text).width;\n            glyphLengths[i] = textLength - spaceOffset;\n            glyphOffset[i] = leftCoord;\n            ctx.fillText(text, leftCoord - spaceOffset, 0);\n            leftCoord += textLength;\n        }\n        var tex = util.createTextureFromCanvas(canvas);\n        return {\n            texture: tex,\n            lengths: glyphLengths,\n            offsets: glyphOffset\n        };\n    };\n    ScatterPlotVisualizer3DLabels.prototype.processLabelVerts = function(pointCount) {\n        var numTotalLetters = 0;\n        this.labelVertexMap = [];\n        for(var i = 0; i < pointCount; i++){\n            var label = this.labelStrings[i];\n            var vertsArray = [];\n            for(var j = 0; j < label.length; j++){\n                for(var k = 0; k < VERTICES_PER_GLYPH; k++){\n                    vertsArray.push(numTotalLetters * VERTICES_PER_GLYPH + k);\n                }\n                numTotalLetters++;\n            }\n            this.labelVertexMap.push(vertsArray);\n        }\n        this.totalVertexCount = numTotalLetters * VERTICES_PER_GLYPH;\n    };\n    ScatterPlotVisualizer3DLabels.prototype.createColorBuffers = function(pointCount) {\n        var _this = this;\n        this.pickingColors = new Float32Array(this.totalVertexCount * constants_1.RGB_NUM_ELEMENTS);\n        this.renderColors = new Float32Array(this.totalVertexCount * constants_1.RGB_NUM_ELEMENTS);\n        var _loop_1 = function(i) {\n            var pickingColor = new THREE.Color(i);\n            this_1.labelVertexMap[i].forEach(function(j) {\n                _this.pickingColors[constants_1.RGB_NUM_ELEMENTS * j] = pickingColor.r;\n                _this.pickingColors[constants_1.RGB_NUM_ELEMENTS * j + 1] = pickingColor.g;\n                _this.pickingColors[constants_1.RGB_NUM_ELEMENTS * j + 2] = pickingColor.b;\n                _this.renderColors[constants_1.RGB_NUM_ELEMENTS * j] = 1.0;\n                _this.renderColors[constants_1.RGB_NUM_ELEMENTS * j + 1] = 1.0;\n                _this.renderColors[constants_1.RGB_NUM_ELEMENTS * j + 2] = 1.0;\n            });\n        };\n        var this_1 = this;\n        for(var i = 0; i < pointCount; i++){\n            _loop_1(i);\n        }\n    };\n    ScatterPlotVisualizer3DLabels.prototype.createLabels = function() {\n        var _this = this;\n        var _a = this.styles.label3D, fontSize = _a.fontSize, scale = _a.scale;\n        if (this.labelStrings == null || this.worldSpacePointPositions == null) {\n            return;\n        }\n        var pointCount = this.worldSpacePointPositions.length / constants_1.XYZ_NUM_ELEMENTS;\n        if (pointCount !== this.labelStrings.length) {\n            return;\n        }\n        this.glyphTexture = this.createGlyphTexture();\n        this.uniforms = {\n            glyphTexture: {\n                value: null\n            },\n            picking: {\n                value: false\n            }\n        };\n        this.material = new THREE.ShaderMaterial({\n            uniforms: this.uniforms,\n            transparent: true,\n            vertexShader: makeVertexShader(fontSize, scale),\n            fragmentShader: FRAGMENT_SHADER\n        });\n        this.processLabelVerts(pointCount);\n        this.createColorBuffers(pointCount);\n        var positionArray = new Float32Array(this.totalVertexCount * constants_1.XYZ_NUM_ELEMENTS);\n        this.positions = new THREE.BufferAttribute(positionArray, constants_1.XYZ_NUM_ELEMENTS);\n        var posArray = new Float32Array(this.totalVertexCount * constants_1.XYZ_NUM_ELEMENTS);\n        var uvArray = new Float32Array(this.totalVertexCount * constants_1.UV_NUM_ELEMENTS);\n        var colorsArray = new Float32Array(this.totalVertexCount * constants_1.RGB_NUM_ELEMENTS);\n        var positionObject = new THREE.BufferAttribute(posArray, 2);\n        var uv = new THREE.BufferAttribute(uvArray, constants_1.UV_NUM_ELEMENTS);\n        var colors = new THREE.BufferAttribute(colorsArray, constants_1.RGB_NUM_ELEMENTS);\n        this.geometry = new THREE.BufferGeometry();\n        this.geometry.setAttribute(\"posObj\", positionObject);\n        this.geometry.setAttribute(\"position\", this.positions);\n        this.geometry.setAttribute(\"uv\", uv);\n        this.geometry.setAttribute(\"color\", colors);\n        var lettersSoFar = 0;\n        for(var i = 0; i < pointCount; i++){\n            var label = this.labelStrings[i];\n            var leftOffset = 0;\n            for(var j = 0; j < label.length; j++){\n                var letterCode = label.charCodeAt(j);\n                leftOffset += this.glyphTexture.lengths[letterCode];\n            }\n            leftOffset /= -2;\n            for(var j = 0; j < label.length; j++){\n                var letterCode = label.charCodeAt(j);\n                var letterWidth = this.glyphTexture.lengths[letterCode];\n                var scale_1 = fontSize;\n                var right = (leftOffset + letterWidth) / scale_1;\n                var left = leftOffset / scale_1;\n                var top_1 = fontSize / scale_1;\n                positionObject.setXY(lettersSoFar * VERTICES_PER_GLYPH + 0, left, 0);\n                positionObject.setXY(lettersSoFar * VERTICES_PER_GLYPH + 1, right, 0);\n                positionObject.setXY(lettersSoFar * VERTICES_PER_GLYPH + 2, left, top_1);\n                positionObject.setXY(lettersSoFar * VERTICES_PER_GLYPH + 3, left, top_1);\n                positionObject.setXY(lettersSoFar * VERTICES_PER_GLYPH + 4, right, 0);\n                positionObject.setXY(lettersSoFar * VERTICES_PER_GLYPH + 5, right, top_1);\n                var uLeft = this.glyphTexture.offsets[letterCode];\n                var uRight = this.glyphTexture.offsets[letterCode] + letterWidth;\n                uLeft /= MAX_CANVAS_DIMENSION;\n                uRight /= MAX_CANVAS_DIMENSION;\n                var vTop = 1;\n                var vBottom = 0;\n                uv.setXY(lettersSoFar * VERTICES_PER_GLYPH + 0, uLeft, vTop);\n                uv.setXY(lettersSoFar * VERTICES_PER_GLYPH + 1, uRight, vTop);\n                uv.setXY(lettersSoFar * VERTICES_PER_GLYPH + 2, uLeft, vBottom);\n                uv.setXY(lettersSoFar * VERTICES_PER_GLYPH + 3, uLeft, vBottom);\n                uv.setXY(lettersSoFar * VERTICES_PER_GLYPH + 4, uRight, vTop);\n                uv.setXY(lettersSoFar * VERTICES_PER_GLYPH + 5, uRight, vBottom);\n                lettersSoFar++;\n                leftOffset += letterWidth;\n            }\n        }\n        var _loop_2 = function(i) {\n            var p = util.vector3FromPackedArray(this_2.worldSpacePointPositions, i);\n            this_2.labelVertexMap[i].forEach(function(j) {\n                _this.positions.setXYZ(j, p.x, p.y, p.z);\n            });\n        };\n        var this_2 = this;\n        for(var i = 0; i < pointCount; i++){\n            _loop_2(i);\n        }\n        this.labelsMesh = new THREE.Mesh(this.geometry, this.material);\n        this.labelsMesh.frustumCulled = false;\n        this.scene.add(this.labelsMesh);\n    };\n    ScatterPlotVisualizer3DLabels.prototype.colorLabels = function(pointColors) {\n        if (this.labelStrings == null || this.geometry == null || pointColors == null) {\n            return;\n        }\n        var colors = this.geometry.getAttribute(\"color\");\n        colors.array = this.renderColors;\n        var n = pointColors.length / constants_1.RGBA_NUM_ELEMENTS;\n        var src = 0;\n        for(var i = 0; i < n; ++i){\n            var c = new THREE.Color(pointColors[src], pointColors[src + 1], pointColors[src + 2]);\n            var m = this.labelVertexMap[i].length;\n            for(var j = 0; j < m; ++j){\n                colors.setXYZ(this.labelVertexMap[i][j], c.r, c.g, c.b);\n            }\n            src += constants_1.RGBA_NUM_ELEMENTS;\n        }\n        colors.needsUpdate = true;\n    };\n    ScatterPlotVisualizer3DLabels.prototype.setScene = function(scene) {\n        this.scene = scene;\n    };\n    ScatterPlotVisualizer3DLabels.prototype.dispose = function() {\n        if (this.labelsMesh) {\n            if (this.scene) {\n                this.scene.remove(this.labelsMesh);\n            }\n            this.labelsMesh = null;\n        }\n        if (this.geometry) {\n            this.geometry.dispose();\n            this.geometry = null;\n        }\n        if (this.glyphTexture != null && this.glyphTexture.texture != null) {\n            this.glyphTexture.texture.dispose();\n            this.glyphTexture.texture = null;\n        }\n    };\n    ScatterPlotVisualizer3DLabels.prototype.onPickingRender = function(rc) {\n        if (this.geometry == null) {\n            this.createLabels();\n            return;\n        }\n        this.material.uniforms.glyphTexture.value = this.glyphTexture.texture;\n        this.material.uniforms.picking.value = true;\n        var colors = this.geometry.getAttribute(\"color\");\n        colors.array = this.pickingColors;\n        colors.needsUpdate = true;\n    };\n    ScatterPlotVisualizer3DLabels.prototype.onRender = function(rc) {\n        if (this.geometry == null) {\n            this.createLabels();\n            return;\n        }\n        this.colorLabels(rc.pointColors);\n        this.material.uniforms.glyphTexture.value = this.glyphTexture.texture;\n        this.material.uniforms.picking.value = false;\n        var colors = this.geometry.getAttribute(\"color\");\n        colors.array = this.renderColors;\n        colors.needsUpdate = true;\n    };\n    ScatterPlotVisualizer3DLabels.prototype.onPointPositionsChanged = function(newPositions) {\n        this.worldSpacePointPositions = newPositions;\n        this.dispose();\n    };\n    ScatterPlotVisualizer3DLabels.prototype.setLabelStrings = function(labelStrings) {\n        this.labelStrings = labelStrings;\n        this.dispose();\n    };\n    ScatterPlotVisualizer3DLabels.prototype.onResize = function(newWidth, newHeight) {};\n    return ScatterPlotVisualizer3DLabels;\n}();\nexports.ScatterPlotVisualizer3DLabels = ScatterPlotVisualizer3DLabels;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2NhdHRlci1nbC9kaXN0L3NjYXR0ZXJfcGxvdF92aXN1YWxpemVyXzNkX2xhYmVscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxJQUFJQyxRQUFRQyxtQkFBT0EsQ0FBQywrREFBTztBQUMzQixJQUFJQyxPQUFPRCxtQkFBT0EsQ0FBQyw0REFBUTtBQUMzQixJQUFJRSxjQUFjRixtQkFBT0EsQ0FBQyxzRUFBYTtBQUN2QyxJQUFJRyx1QkFBdUI7QUFDM0IsSUFBSUMsYUFBYTtBQUNqQixJQUFJQyxxQkFBcUIsSUFBSTtBQUM3QixJQUFJQyxtQkFBbUIsU0FBVUMsUUFBUSxFQUFFQyxLQUFLO0lBQUksT0FBTyx1cUJBQXVxQixJQUFJRCxXQUFXLFFBQVFDLFFBQVE7QUFBdU47QUFDeDlCLElBQUlDLGtCQUFrQjtBQUN0QixJQUFJQyxnQ0FBaUM7SUFDakMsU0FBU0EsOEJBQThCQyxNQUFNO1FBQ3pDLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsRUFBRSxHQUFHO1FBQ1YsSUFBSSxDQUFDQyxZQUFZLEdBQUcsRUFBRTtRQUN0QixJQUFJLENBQUNDLHdCQUF3QixHQUFHLElBQUlDLGFBQWE7UUFDakQsSUFBSSxDQUFDQyxhQUFhLEdBQUcsSUFBSUQsYUFBYTtRQUN0QyxJQUFJLENBQUNFLFlBQVksR0FBRyxJQUFJRixhQUFhO1FBQ3JDLElBQUksQ0FBQ0csUUFBUSxHQUFHLENBQUM7UUFDakIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRztRQUN4QixJQUFJLENBQUNDLGNBQWMsR0FBRyxFQUFFO0lBQzVCO0lBQ0FWLDhCQUE4QlcsU0FBUyxDQUFDQyxrQkFBa0IsR0FBRztRQUN6RCxJQUFJQyxLQUFLLElBQUksQ0FBQ1osTUFBTSxDQUFDYSxPQUFPLEVBQUVqQixXQUFXZ0IsR0FBR2hCLFFBQVEsRUFBRWtCLGtCQUFrQkYsR0FBR0Us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QyxPQUFPa0MsS0FBSyxHQUFHLElBQUksQ0FBQy9HLGFBQWE7UUFDakM2RSxPQUFPd0MsV0FBVyxHQUFHO0lBQ3pCO0lBQ0EzSCw4QkFBOEJXLFNBQVMsQ0FBQ3NILFFBQVEsR0FBRyxTQUFVRCxFQUFFO1FBQzNELElBQUksSUFBSSxDQUFDNUMsUUFBUSxJQUFJLE1BQU07WUFDdkIsSUFBSSxDQUFDbkIsWUFBWTtZQUNqQjtRQUNKO1FBQ0EsSUFBSSxDQUFDaUQsV0FBVyxDQUFDYyxHQUFHYixXQUFXO1FBQy9CLElBQUksQ0FBQzlDLFFBQVEsQ0FBQzdELFFBQVEsQ0FBQzJELFlBQVksQ0FBQy9FLEtBQUssR0FBRyxJQUFJLENBQUMrRSxZQUFZLENBQUN6QixPQUFPO1FBQ3JFLElBQUksQ0FBQzJCLFFBQVEsQ0FBQzdELFFBQVEsQ0FBQzRELE9BQU8sQ0FBQ2hGLEtBQUssR0FBRztRQUN2QyxJQUFJK0YsU0FBUyxJQUFJLENBQUNDLFFBQVEsQ0FBQ2dDLFlBQVksQ0FBQztRQUN4Q2pDLE9BQU9rQyxLQUFLLEdBQUcsSUFBSSxDQUFDOUcsWUFBWTtRQUNoQzRFLE9BQU93QyxXQUFXLEdBQUc7SUFDekI7SUFDQTNILDhCQUE4QlcsU0FBUyxDQUFDdUgsdUJBQXVCLEdBQUcsU0FBVUMsWUFBWTtRQUNwRixJQUFJLENBQUMvSCx3QkFBd0IsR0FBRytIO1FBQ2hDLElBQUksQ0FBQ04sT0FBTztJQUNoQjtJQUNBN0gsOEJBQThCVyxTQUFTLENBQUN5SCxlQUFlLEdBQUcsU0FBVWpJLFlBQVk7UUFDNUUsSUFBSSxDQUFDQSxZQUFZLEdBQUdBO1FBQ3BCLElBQUksQ0FBQzBILE9BQU87SUFDaEI7SUFDQTdILDhCQUE4QlcsU0FBUyxDQUFDMEgsUUFBUSxHQUFHLFNBQVVDLFFBQVEsRUFBRUMsU0FBUyxHQUFJO0lBQ3BGLE9BQU92STtBQUNYO0FBQ0FiLHFDQUFxQyxHQUFHYSIsInNvdXJjZXMiOlsid2VicGFjazovL3lvZ2Fwb3NlcGVyZmVjdC8uL25vZGVfbW9kdWxlcy9zY2F0dGVyLWdsL2Rpc3Qvc2NhdHRlcl9wbG90X3Zpc3VhbGl6ZXJfM2RfbGFiZWxzLmpzP2YyMzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVEhSRUUgPSByZXF1aXJlKFwidGhyZWVcIik7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG52YXIgTUFYX0NBTlZBU19ESU1FTlNJT04gPSA4MTkyO1xudmFyIE5VTV9HTFlQSFMgPSAyNTY7XG52YXIgVkVSVElDRVNfUEVSX0dMWVBIID0gMiAqIDM7XG52YXIgbWFrZVZlcnRleFNoYWRlciA9IGZ1bmN0aW9uIChmb250U2l6ZSwgc2NhbGUpIHsgcmV0dXJuIFwiXFxuICAgICAgYXR0cmlidXRlIHZlYzIgcG9zT2JqO1xcbiAgICAgIGF0dHJpYnV0ZSB2ZWM0IGNvbG9yO1xcbiAgICAgIHZhcnlpbmcgdmVjMiB2VXY7XFxuICAgICAgdmFyeWluZyB2ZWM0IHZDb2xvcjtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICB2VXYgPSB1djtcXG4gICAgICAgIHZDb2xvciA9IGNvbG9yO1xcblxcbiAgICAgICAgLy8gUm90YXRlIGxhYmVsIHRvIGZhY2UgY2FtZXJhLlxcblxcbiAgICAgICAgdmVjNCB2UmlnaHQgPSB2ZWM0KFxcbiAgICAgICAgICBtb2RlbFZpZXdNYXRyaXhbMF1bMF0sIG1vZGVsVmlld01hdHJpeFsxXVswXSwgbW9kZWxWaWV3TWF0cml4WzJdWzBdLCAwKTtcXG5cXG4gICAgICAgIHZlYzQgdlVwID0gdmVjNChcXG4gICAgICAgICAgbW9kZWxWaWV3TWF0cml4WzBdWzFdLCBtb2RlbFZpZXdNYXRyaXhbMV1bMV0sIG1vZGVsVmlld01hdHJpeFsyXVsxXSwgMCk7XFxuXFxuICAgICAgICB2ZWM0IHZBdCA9IC12ZWM0KFxcbiAgICAgICAgICBtb2RlbFZpZXdNYXRyaXhbMF1bMl0sIG1vZGVsVmlld01hdHJpeFsxXVsyXSwgbW9kZWxWaWV3TWF0cml4WzJdWzJdLCAwKTtcXG5cXG4gICAgICAgIG1hdDQgcG9pbnRUb0NhbWVyYSA9IG1hdDQodlJpZ2h0LCB2VXAsIHZBdCwgdmVjNCgwLCAwLCAwLCAxKSk7XFxuXFxuICAgICAgICB2ZWMyIHNjYWxlZFBvcyA9IHBvc09iaiAqIFwiICsgMSAvIGZvbnRTaXplICsgXCIgKiBcIiArIHNjYWxlICsgXCI7XFxuXFxuICAgICAgICB2ZWM0IHBvc1JvdGF0ZWQgPSBwb2ludFRvQ2FtZXJhICogdmVjNChzY2FsZWRQb3MsIDAsIDEpO1xcbiAgICAgICAgdmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogKHZlYzQocG9zaXRpb24sIDApICsgcG9zUm90YXRlZCk7XFxuICAgICAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xcbiAgICAgIH1cIjsgfTtcbnZhciBGUkFHTUVOVF9TSEFERVIgPSBcIlxcbiAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIGdseXBoVGV4dHVyZTtcXG4gICAgICB1bmlmb3JtIGJvb2wgcGlja2luZztcXG4gICAgICB2YXJ5aW5nIHZlYzIgdlV2O1xcbiAgICAgIHZhcnlpbmcgdmVjNCB2Q29sb3I7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaWYgKHBpY2tpbmcpIHtcXG4gICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdkNvbG9yO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgdmVjNCBmcm9tVGV4dHVyZSA9IHRleHR1cmUoZ2x5cGhUZXh0dXJlLCB2VXYpO1xcbiAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB2Q29sb3IgKiBmcm9tVGV4dHVyZTtcXG4gICAgICAgIH1cXG4gICAgICB9XCI7XG52YXIgU2NhdHRlclBsb3RWaXN1YWxpemVyM0RMYWJlbHMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjYXR0ZXJQbG90VmlzdWFsaXplcjNETGFiZWxzKHN0eWxlcykge1xuICAgICAgICB0aGlzLnN0eWxlcyA9IHN0eWxlcztcbiAgICAgICAgdGhpcy5pZCA9ICczRF9MQUJFTFMnO1xuICAgICAgICB0aGlzLmxhYmVsU3RyaW5ncyA9IFtdO1xuICAgICAgICB0aGlzLndvcmxkU3BhY2VQb2ludFBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoMCk7XG4gICAgICAgIHRoaXMucGlja2luZ0NvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoMCk7XG4gICAgICAgIHRoaXMucmVuZGVyQ29sb3JzID0gbmV3IEZsb2F0MzJBcnJheSgwKTtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IHt9O1xuICAgICAgICB0aGlzLnRvdGFsVmVydGV4Q291bnQgPSAwO1xuICAgICAgICB0aGlzLmxhYmVsVmVydGV4TWFwID0gW107XG4gICAgfVxuICAgIFNjYXR0ZXJQbG90VmlzdWFsaXplcjNETGFiZWxzLnByb3RvdHlwZS5jcmVhdGVHbHlwaFRleHR1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuc3R5bGVzLmxhYmVsM0QsIGZvbnRTaXplID0gX2EuZm9udFNpemUsIGJhY2tncm91bmRDb2xvciA9IF9hLmJhY2tncm91bmRDb2xvciwgY29sb3IgPSBfYS5jb2xvcjtcbiAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICBjYW52YXMud2lkdGggPSBNQVhfQ0FOVkFTX0RJTUVOU0lPTjtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGZvbnRTaXplO1xuICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGN0eC5mb250ID0gJ2JvbGQgJyArIGZvbnRTaXplICsgJ3B4IHJvYm90byc7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LnJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgICAgICB2YXIgc3BhY2VPZmZzZXQgPSBjdHgubWVhc3VyZVRleHQoJyAnKS53aWR0aDtcbiAgICAgICAgdmFyIGdseXBoTGVuZ3RocyA9IG5ldyBGbG9hdDMyQXJyYXkoTlVNX0dMWVBIUyk7XG4gICAgICAgIHZhciBnbHlwaE9mZnNldCA9IG5ldyBGbG9hdDMyQXJyYXkoTlVNX0dMWVBIUyk7XG4gICAgICAgIHZhciBsZWZ0Q29vcmQgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IE5VTV9HTFlQSFM7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRleHQgPSAnICcgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpO1xuICAgICAgICAgICAgdmFyIHRleHRMZW5ndGggPSBjdHgubWVhc3VyZVRleHQodGV4dCkud2lkdGg7XG4gICAgICAgICAgICBnbHlwaExlbmd0aHNbaV0gPSB0ZXh0TGVuZ3RoIC0gc3BhY2VPZmZzZXQ7XG4gICAgICAgICAgICBnbHlwaE9mZnNldFtpXSA9IGxlZnRDb29yZDtcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dCh0ZXh0LCBsZWZ0Q29vcmQgLSBzcGFjZU9mZnNldCwgMCk7XG4gICAgICAgICAgICBsZWZ0Q29vcmQgKz0gdGV4dExlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGV4ID0gdXRpbC5jcmVhdGVUZXh0dXJlRnJvbUNhbnZhcyhjYW52YXMpO1xuICAgICAgICByZXR1cm4geyB0ZXh0dXJlOiB0ZXgsIGxlbmd0aHM6IGdseXBoTGVuZ3Rocywgb2Zmc2V0czogZ2x5cGhPZmZzZXQgfTtcbiAgICB9O1xuICAgIFNjYXR0ZXJQbG90VmlzdWFsaXplcjNETGFiZWxzLnByb3RvdHlwZS5wcm9jZXNzTGFiZWxWZXJ0cyA9IGZ1bmN0aW9uIChwb2ludENvdW50KSB7XG4gICAgICAgIHZhciBudW1Ub3RhbExldHRlcnMgPSAwO1xuICAgICAgICB0aGlzLmxhYmVsVmVydGV4TWFwID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSB0aGlzLmxhYmVsU3RyaW5nc1tpXTtcbiAgICAgICAgICAgIHZhciB2ZXJ0c0FycmF5ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxhYmVsLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBWRVJUSUNFU19QRVJfR0xZUEg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICB2ZXJ0c0FycmF5LnB1c2gobnVtVG90YWxMZXR0ZXJzICogVkVSVElDRVNfUEVSX0dMWVBIICsgayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG51bVRvdGFsTGV0dGVycysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5sYWJlbFZlcnRleE1hcC5wdXNoKHZlcnRzQXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG90YWxWZXJ0ZXhDb3VudCA9IG51bVRvdGFsTGV0dGVycyAqIFZFUlRJQ0VTX1BFUl9HTFlQSDtcbiAgICB9O1xuICAgIFNjYXR0ZXJQbG90VmlzdWFsaXplcjNETGFiZWxzLnByb3RvdHlwZS5jcmVhdGVDb2xvckJ1ZmZlcnMgPSBmdW5jdGlvbiAocG9pbnRDb3VudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnBpY2tpbmdDb2xvcnMgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMudG90YWxWZXJ0ZXhDb3VudCAqIGNvbnN0YW50c18xLlJHQl9OVU1fRUxFTUVOVFMpO1xuICAgICAgICB0aGlzLnJlbmRlckNvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy50b3RhbFZlcnRleENvdW50ICogY29uc3RhbnRzXzEuUkdCX05VTV9FTEVNRU5UUyk7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciBwaWNraW5nQ29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoaSk7XG4gICAgICAgICAgICB0aGlzXzEubGFiZWxWZXJ0ZXhNYXBbaV0uZm9yRWFjaChmdW5jdGlvbiAoaikge1xuICAgICAgICAgICAgICAgIF90aGlzLnBpY2tpbmdDb2xvcnNbY29uc3RhbnRzXzEuUkdCX05VTV9FTEVNRU5UUyAqIGpdID0gcGlja2luZ0NvbG9yLnI7XG4gICAgICAgICAgICAgICAgX3RoaXMucGlja2luZ0NvbG9yc1tjb25zdGFudHNfMS5SR0JfTlVNX0VMRU1FTlRTICogaiArIDFdID0gcGlja2luZ0NvbG9yLmc7XG4gICAgICAgICAgICAgICAgX3RoaXMucGlja2luZ0NvbG9yc1tjb25zdGFudHNfMS5SR0JfTlVNX0VMRU1FTlRTICogaiArIDJdID0gcGlja2luZ0NvbG9yLmI7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVuZGVyQ29sb3JzW2NvbnN0YW50c18xLlJHQl9OVU1fRUxFTUVOVFMgKiBqXSA9IDEuMDtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZW5kZXJDb2xvcnNbY29uc3RhbnRzXzEuUkdCX05VTV9FTEVNRU5UUyAqIGogKyAxXSA9IDEuMDtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZW5kZXJDb2xvcnNbY29uc3RhbnRzXzEuUkdCX05VTV9FTEVNRU5UUyAqIGogKyAyXSA9IDEuMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgdGhpc18xID0gdGhpcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjYXR0ZXJQbG90VmlzdWFsaXplcjNETGFiZWxzLnByb3RvdHlwZS5jcmVhdGVMYWJlbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuc3R5bGVzLmxhYmVsM0QsIGZvbnRTaXplID0gX2EuZm9udFNpemUsIHNjYWxlID0gX2Euc2NhbGU7XG4gICAgICAgIGlmICh0aGlzLmxhYmVsU3RyaW5ncyA9PSBudWxsIHx8IHRoaXMud29ybGRTcGFjZVBvaW50UG9zaXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcG9pbnRDb3VudCA9IHRoaXMud29ybGRTcGFjZVBvaW50UG9zaXRpb25zLmxlbmd0aCAvIGNvbnN0YW50c18xLlhZWl9OVU1fRUxFTUVOVFM7XG4gICAgICAgIGlmIChwb2ludENvdW50ICE9PSB0aGlzLmxhYmVsU3RyaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdseXBoVGV4dHVyZSA9IHRoaXMuY3JlYXRlR2x5cGhUZXh0dXJlKCk7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSB7XG4gICAgICAgICAgICBnbHlwaFRleHR1cmU6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgIHBpY2tpbmc6IHsgdmFsdWU6IGZhbHNlIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe1xuICAgICAgICAgICAgdW5pZm9ybXM6IHRoaXMudW5pZm9ybXMsXG4gICAgICAgICAgICB0cmFuc3BhcmVudDogdHJ1ZSxcbiAgICAgICAgICAgIHZlcnRleFNoYWRlcjogbWFrZVZlcnRleFNoYWRlcihmb250U2l6ZSwgc2NhbGUpLFxuICAgICAgICAgICAgZnJhZ21lbnRTaGFkZXI6IEZSQUdNRU5UX1NIQURFUixcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucHJvY2Vzc0xhYmVsVmVydHMocG9pbnRDb3VudCk7XG4gICAgICAgIHRoaXMuY3JlYXRlQ29sb3JCdWZmZXJzKHBvaW50Q291bnQpO1xuICAgICAgICB2YXIgcG9zaXRpb25BcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy50b3RhbFZlcnRleENvdW50ICogY29uc3RhbnRzXzEuWFlaX05VTV9FTEVNRU5UUyk7XG4gICAgICAgIHRoaXMucG9zaXRpb25zID0gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbkFycmF5LCBjb25zdGFudHNfMS5YWVpfTlVNX0VMRU1FTlRTKTtcbiAgICAgICAgdmFyIHBvc0FycmF5ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLnRvdGFsVmVydGV4Q291bnQgKiBjb25zdGFudHNfMS5YWVpfTlVNX0VMRU1FTlRTKTtcbiAgICAgICAgdmFyIHV2QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMudG90YWxWZXJ0ZXhDb3VudCAqIGNvbnN0YW50c18xLlVWX05VTV9FTEVNRU5UUyk7XG4gICAgICAgIHZhciBjb2xvcnNBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy50b3RhbFZlcnRleENvdW50ICogY29uc3RhbnRzXzEuUkdCX05VTV9FTEVNRU5UUyk7XG4gICAgICAgIHZhciBwb3NpdGlvbk9iamVjdCA9IG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocG9zQXJyYXksIDIpO1xuICAgICAgICB2YXIgdXYgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHV2QXJyYXksIGNvbnN0YW50c18xLlVWX05VTV9FTEVNRU5UUyk7XG4gICAgICAgIHZhciBjb2xvcnMgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGNvbG9yc0FycmF5LCBjb25zdGFudHNfMS5SR0JfTlVNX0VMRU1FTlRTKTtcbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgICAgICB0aGlzLmdlb21ldHJ5LnNldEF0dHJpYnV0ZSgncG9zT2JqJywgcG9zaXRpb25PYmplY3QpO1xuICAgICAgICB0aGlzLmdlb21ldHJ5LnNldEF0dHJpYnV0ZSgncG9zaXRpb24nLCB0aGlzLnBvc2l0aW9ucyk7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCd1dicsIHV2KTtcbiAgICAgICAgdGhpcy5nZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ2NvbG9yJywgY29sb3JzKTtcbiAgICAgICAgdmFyIGxldHRlcnNTb0ZhciA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSB0aGlzLmxhYmVsU3RyaW5nc1tpXTtcbiAgICAgICAgICAgIHZhciBsZWZ0T2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGFiZWwubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbGV0dGVyQ29kZSA9IGxhYmVsLmNoYXJDb2RlQXQoaik7XG4gICAgICAgICAgICAgICAgbGVmdE9mZnNldCArPSB0aGlzLmdseXBoVGV4dHVyZS5sZW5ndGhzW2xldHRlckNvZGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGVmdE9mZnNldCAvPSAtMjtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGFiZWwubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbGV0dGVyQ29kZSA9IGxhYmVsLmNoYXJDb2RlQXQoaik7XG4gICAgICAgICAgICAgICAgdmFyIGxldHRlcldpZHRoID0gdGhpcy5nbHlwaFRleHR1cmUubGVuZ3Roc1tsZXR0ZXJDb2RlXTtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGVfMSA9IGZvbnRTaXplO1xuICAgICAgICAgICAgICAgIHZhciByaWdodCA9IChsZWZ0T2Zmc2V0ICsgbGV0dGVyV2lkdGgpIC8gc2NhbGVfMTtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdCA9IGxlZnRPZmZzZXQgLyBzY2FsZV8xO1xuICAgICAgICAgICAgICAgIHZhciB0b3BfMSA9IGZvbnRTaXplIC8gc2NhbGVfMTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbk9iamVjdC5zZXRYWShsZXR0ZXJzU29GYXIgKiBWRVJUSUNFU19QRVJfR0xZUEggKyAwLCBsZWZ0LCAwKTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbk9iamVjdC5zZXRYWShsZXR0ZXJzU29GYXIgKiBWRVJUSUNFU19QRVJfR0xZUEggKyAxLCByaWdodCwgMCk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25PYmplY3Quc2V0WFkobGV0dGVyc1NvRmFyICogVkVSVElDRVNfUEVSX0dMWVBIICsgMiwgbGVmdCwgdG9wXzEpO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uT2JqZWN0LnNldFhZKGxldHRlcnNTb0ZhciAqIFZFUlRJQ0VTX1BFUl9HTFlQSCArIDMsIGxlZnQsIHRvcF8xKTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbk9iamVjdC5zZXRYWShsZXR0ZXJzU29GYXIgKiBWRVJUSUNFU19QRVJfR0xZUEggKyA0LCByaWdodCwgMCk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25PYmplY3Quc2V0WFkobGV0dGVyc1NvRmFyICogVkVSVElDRVNfUEVSX0dMWVBIICsgNSwgcmlnaHQsIHRvcF8xKTtcbiAgICAgICAgICAgICAgICB2YXIgdUxlZnQgPSB0aGlzLmdseXBoVGV4dHVyZS5vZmZzZXRzW2xldHRlckNvZGVdO1xuICAgICAgICAgICAgICAgIHZhciB1UmlnaHQgPSB0aGlzLmdseXBoVGV4dHVyZS5vZmZzZXRzW2xldHRlckNvZGVdICsgbGV0dGVyV2lkdGg7XG4gICAgICAgICAgICAgICAgdUxlZnQgLz0gTUFYX0NBTlZBU19ESU1FTlNJT047XG4gICAgICAgICAgICAgICAgdVJpZ2h0IC89IE1BWF9DQU5WQVNfRElNRU5TSU9OO1xuICAgICAgICAgICAgICAgIHZhciB2VG9wID0gMTtcbiAgICAgICAgICAgICAgICB2YXIgdkJvdHRvbSA9IDA7XG4gICAgICAgICAgICAgICAgdXYuc2V0WFkobGV0dGVyc1NvRmFyICogVkVSVElDRVNfUEVSX0dMWVBIICsgMCwgdUxlZnQsIHZUb3ApO1xuICAgICAgICAgICAgICAgIHV2LnNldFhZKGxldHRlcnNTb0ZhciAqIFZFUlRJQ0VTX1BFUl9HTFlQSCArIDEsIHVSaWdodCwgdlRvcCk7XG4gICAgICAgICAgICAgICAgdXYuc2V0WFkobGV0dGVyc1NvRmFyICogVkVSVElDRVNfUEVSX0dMWVBIICsgMiwgdUxlZnQsIHZCb3R0b20pO1xuICAgICAgICAgICAgICAgIHV2LnNldFhZKGxldHRlcnNTb0ZhciAqIFZFUlRJQ0VTX1BFUl9HTFlQSCArIDMsIHVMZWZ0LCB2Qm90dG9tKTtcbiAgICAgICAgICAgICAgICB1di5zZXRYWShsZXR0ZXJzU29GYXIgKiBWRVJUSUNFU19QRVJfR0xZUEggKyA0LCB1UmlnaHQsIHZUb3ApO1xuICAgICAgICAgICAgICAgIHV2LnNldFhZKGxldHRlcnNTb0ZhciAqIFZFUlRJQ0VTX1BFUl9HTFlQSCArIDUsIHVSaWdodCwgdkJvdHRvbSk7XG4gICAgICAgICAgICAgICAgbGV0dGVyc1NvRmFyKys7XG4gICAgICAgICAgICAgICAgbGVmdE9mZnNldCArPSBsZXR0ZXJXaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgX2xvb3BfMiA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHV0aWwudmVjdG9yM0Zyb21QYWNrZWRBcnJheSh0aGlzXzIud29ybGRTcGFjZVBvaW50UG9zaXRpb25zLCBpKTtcbiAgICAgICAgICAgIHRoaXNfMi5sYWJlbFZlcnRleE1hcFtpXS5mb3JFYWNoKGZ1bmN0aW9uIChqKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucG9zaXRpb25zLnNldFhZWihqLCBwLngsIHAueSwgcC56KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgdGhpc18yID0gdGhpcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIF9sb29wXzIoaSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYWJlbHNNZXNoID0gbmV3IFRIUkVFLk1lc2godGhpcy5nZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCk7XG4gICAgICAgIHRoaXMubGFiZWxzTWVzaC5mcnVzdHVtQ3VsbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMubGFiZWxzTWVzaCk7XG4gICAgfTtcbiAgICBTY2F0dGVyUGxvdFZpc3VhbGl6ZXIzRExhYmVscy5wcm90b3R5cGUuY29sb3JMYWJlbHMgPSBmdW5jdGlvbiAocG9pbnRDb2xvcnMpIHtcbiAgICAgICAgaWYgKHRoaXMubGFiZWxTdHJpbmdzID09IG51bGwgfHxcbiAgICAgICAgICAgIHRoaXMuZ2VvbWV0cnkgPT0gbnVsbCB8fFxuICAgICAgICAgICAgcG9pbnRDb2xvcnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb2xvcnMgPSB0aGlzLmdlb21ldHJ5LmdldEF0dHJpYnV0ZSgnY29sb3InKTtcbiAgICAgICAgY29sb3JzLmFycmF5ID0gdGhpcy5yZW5kZXJDb2xvcnM7XG4gICAgICAgIHZhciBuID0gcG9pbnRDb2xvcnMubGVuZ3RoIC8gY29uc3RhbnRzXzEuUkdCQV9OVU1fRUxFTUVOVFM7XG4gICAgICAgIHZhciBzcmMgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgdmFyIGMgPSBuZXcgVEhSRUUuQ29sb3IocG9pbnRDb2xvcnNbc3JjXSwgcG9pbnRDb2xvcnNbc3JjICsgMV0sIHBvaW50Q29sb3JzW3NyYyArIDJdKTtcbiAgICAgICAgICAgIHZhciBtID0gdGhpcy5sYWJlbFZlcnRleE1hcFtpXS5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICAgICAgICAgIGNvbG9ycy5zZXRYWVoodGhpcy5sYWJlbFZlcnRleE1hcFtpXVtqXSwgYy5yLCBjLmcsIGMuYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcmMgKz0gY29uc3RhbnRzXzEuUkdCQV9OVU1fRUxFTUVOVFM7XG4gICAgICAgIH1cbiAgICAgICAgY29sb3JzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNjYXR0ZXJQbG90VmlzdWFsaXplcjNETGFiZWxzLnByb3RvdHlwZS5zZXRTY2VuZSA9IGZ1bmN0aW9uIChzY2VuZSkge1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgfTtcbiAgICBTY2F0dGVyUGxvdFZpc3VhbGl6ZXIzRExhYmVscy5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubGFiZWxzTWVzaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2NlbmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLnJlbW92ZSh0aGlzLmxhYmVsc01lc2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5sYWJlbHNNZXNoID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5nZW9tZXRyeSkge1xuICAgICAgICAgICAgdGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLmdlb21ldHJ5ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5nbHlwaFRleHR1cmUgIT0gbnVsbCAmJiB0aGlzLmdseXBoVGV4dHVyZS50ZXh0dXJlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZ2x5cGhUZXh0dXJlLnRleHR1cmUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5nbHlwaFRleHR1cmUudGV4dHVyZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNjYXR0ZXJQbG90VmlzdWFsaXplcjNETGFiZWxzLnByb3RvdHlwZS5vblBpY2tpbmdSZW5kZXIgPSBmdW5jdGlvbiAocmMpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2VvbWV0cnkgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVMYWJlbHMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hdGVyaWFsLnVuaWZvcm1zLmdseXBoVGV4dHVyZS52YWx1ZSA9IHRoaXMuZ2x5cGhUZXh0dXJlLnRleHR1cmU7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwudW5pZm9ybXMucGlja2luZy52YWx1ZSA9IHRydWU7XG4gICAgICAgIHZhciBjb2xvcnMgPSB0aGlzLmdlb21ldHJ5LmdldEF0dHJpYnV0ZSgnY29sb3InKTtcbiAgICAgICAgY29sb3JzLmFycmF5ID0gdGhpcy5waWNraW5nQ29sb3JzO1xuICAgICAgICBjb2xvcnMubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIH07XG4gICAgU2NhdHRlclBsb3RWaXN1YWxpemVyM0RMYWJlbHMucHJvdG90eXBlLm9uUmVuZGVyID0gZnVuY3Rpb24gKHJjKSB7XG4gICAgICAgIGlmICh0aGlzLmdlb21ldHJ5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlTGFiZWxzKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb2xvckxhYmVscyhyYy5wb2ludENvbG9ycyk7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwudW5pZm9ybXMuZ2x5cGhUZXh0dXJlLnZhbHVlID0gdGhpcy5nbHlwaFRleHR1cmUudGV4dHVyZTtcbiAgICAgICAgdGhpcy5tYXRlcmlhbC51bmlmb3Jtcy5waWNraW5nLnZhbHVlID0gZmFsc2U7XG4gICAgICAgIHZhciBjb2xvcnMgPSB0aGlzLmdlb21ldHJ5LmdldEF0dHJpYnV0ZSgnY29sb3InKTtcbiAgICAgICAgY29sb3JzLmFycmF5ID0gdGhpcy5yZW5kZXJDb2xvcnM7XG4gICAgICAgIGNvbG9ycy5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgfTtcbiAgICBTY2F0dGVyUGxvdFZpc3VhbGl6ZXIzRExhYmVscy5wcm90b3R5cGUub25Qb2ludFBvc2l0aW9uc0NoYW5nZWQgPSBmdW5jdGlvbiAobmV3UG9zaXRpb25zKSB7XG4gICAgICAgIHRoaXMud29ybGRTcGFjZVBvaW50UG9zaXRpb25zID0gbmV3UG9zaXRpb25zO1xuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgICB9O1xuICAgIFNjYXR0ZXJQbG90VmlzdWFsaXplcjNETGFiZWxzLnByb3RvdHlwZS5zZXRMYWJlbFN0cmluZ3MgPSBmdW5jdGlvbiAobGFiZWxTdHJpbmdzKSB7XG4gICAgICAgIHRoaXMubGFiZWxTdHJpbmdzID0gbGFiZWxTdHJpbmdzO1xuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgICB9O1xuICAgIFNjYXR0ZXJQbG90VmlzdWFsaXplcjNETGFiZWxzLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uIChuZXdXaWR0aCwgbmV3SGVpZ2h0KSB7IH07XG4gICAgcmV0dXJuIFNjYXR0ZXJQbG90VmlzdWFsaXplcjNETGFiZWxzO1xufSgpKTtcbmV4cG9ydHMuU2NhdHRlclBsb3RWaXN1YWxpemVyM0RMYWJlbHMgPSBTY2F0dGVyUGxvdFZpc3VhbGl6ZXIzRExhYmVscztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlRIUkVFIiwicmVxdWlyZSIsInV0aWwiLCJjb25zdGFudHNfMSIsIk1BWF9DQU5WQVNfRElNRU5TSU9OIiwiTlVNX0dMWVBIUyIsIlZFUlRJQ0VTX1BFUl9HTFlQSCIsIm1ha2VWZXJ0ZXhTaGFkZXIiLCJmb250U2l6ZSIsInNjYWxlIiwiRlJBR01FTlRfU0hBREVSIiwiU2NhdHRlclBsb3RWaXN1YWxpemVyM0RMYWJlbHMiLCJzdHlsZXMiLCJpZCIsImxhYmVsU3RyaW5ncyIsIndvcmxkU3BhY2VQb2ludFBvc2l0aW9ucyIsIkZsb2F0MzJBcnJheSIsInBpY2tpbmdDb2xvcnMiLCJyZW5kZXJDb2xvcnMiLCJ1bmlmb3JtcyIsInRvdGFsVmVydGV4Q291bnQiLCJsYWJlbFZlcnRleE1hcCIsInByb3RvdHlwZSIsImNyZWF0ZUdseXBoVGV4dHVyZSIsIl9hIiwibGFiZWwzRCIsImJhY2tncm91bmRDb2xvciIsImNvbG9yIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwid2lkdGgiLCJoZWlnaHQiLCJjdHgiLCJnZXRDb250ZXh0IiwiZm9udCIsInRleHRCYXNlbGluZSIsImZpbGxTdHlsZSIsInJlY3QiLCJmaWxsIiwic3BhY2VPZmZzZXQiLCJtZWFzdXJlVGV4dCIsImdseXBoTGVuZ3RocyIsImdseXBoT2Zmc2V0IiwibGVmdENvb3JkIiwiaSIsInRleHQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ0ZXh0TGVuZ3RoIiwiZmlsbFRleHQiLCJ0ZXgiLCJjcmVhdGVUZXh0dXJlRnJvbUNhbnZhcyIsInRleHR1cmUiLCJsZW5ndGhzIiwib2Zmc2V0cyIsInByb2Nlc3NMYWJlbFZlcnRzIiwicG9pbnRDb3VudCIsIm51bVRvdGFsTGV0dGVycyIsImxhYmVsIiwidmVydHNBcnJheSIsImoiLCJsZW5ndGgiLCJrIiwicHVzaCIsImNyZWF0ZUNvbG9yQnVmZmVycyIsIl90aGlzIiwiUkdCX05VTV9FTEVNRU5UUyIsIl9sb29wXzEiLCJwaWNraW5nQ29sb3IiLCJDb2xvciIsInRoaXNfMSIsImZvckVhY2giLCJyIiwiZyIsImIiLCJjcmVhdGVMYWJlbHMiLCJYWVpfTlVNX0VMRU1FTlRTIiwiZ2x5cGhUZXh0dXJlIiwicGlja2luZyIsIm1hdGVyaWFsIiwiU2hhZGVyTWF0ZXJpYWwiLCJ0cmFuc3BhcmVudCIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwicG9zaXRpb25BcnJheSIsInBvc2l0aW9ucyIsIkJ1ZmZlckF0dHJpYnV0ZSIsInBvc0FycmF5IiwidXZBcnJheSIsIlVWX05VTV9FTEVNRU5UUyIsImNvbG9yc0FycmF5IiwicG9zaXRpb25PYmplY3QiLCJ1diIsImNvbG9ycyIsImdlb21ldHJ5IiwiQnVmZmVyR2VvbWV0cnkiLCJzZXRBdHRyaWJ1dGUiLCJsZXR0ZXJzU29GYXIiLCJsZWZ0T2Zmc2V0IiwibGV0dGVyQ29kZSIsImNoYXJDb2RlQXQiLCJsZXR0ZXJXaWR0aCIsInNjYWxlXzEiLCJyaWdodCIsImxlZnQiLCJ0b3BfMSIsInNldFhZIiwidUxlZnQiLCJ1UmlnaHQiLCJ2VG9wIiwidkJvdHRvbSIsIl9sb29wXzIiLCJwIiwidmVjdG9yM0Zyb21QYWNrZWRBcnJheSIsInRoaXNfMiIsInNldFhZWiIsIngiLCJ5IiwieiIsImxhYmVsc01lc2giLCJNZXNoIiwiZnJ1c3R1bUN1bGxlZCIsInNjZW5lIiwiYWRkIiwiY29sb3JMYWJlbHMiLCJwb2ludENvbG9ycyIsImdldEF0dHJpYnV0ZSIsImFycmF5IiwibiIsIlJHQkFfTlVNX0VMRU1FTlRTIiwic3JjIiwiYyIsIm0iLCJuZWVkc1VwZGF0ZSIsInNldFNjZW5lIiwiZGlzcG9zZSIsInJlbW92ZSIsIm9uUGlja2luZ1JlbmRlciIsInJjIiwib25SZW5kZXIiLCJvblBvaW50UG9zaXRpb25zQ2hhbmdlZCIsIm5ld1Bvc2l0aW9ucyIsInNldExhYmVsU3RyaW5ncyIsIm9uUmVzaXplIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/scatter_plot_visualizer_3d_labels.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/scatter_plot_visualizer_canvas_labels.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/scatter-gl/dist/scatter_plot_visualizer_canvas_labels.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __read = (void 0) && (void 0).__read || function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\nvar render_1 = __webpack_require__(/*! ./render */ \"(ssr)/./node_modules/scatter-gl/dist/render.js\");\nvar label_1 = __webpack_require__(/*! ./label */ \"(ssr)/./node_modules/scatter-gl/dist/label.js\");\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/scatter-gl/dist/util.js\");\nvar MAX_LABELS_ON_SCREEN = 10000;\nvar ScatterPlotVisualizerCanvasLabels = function() {\n    function ScatterPlotVisualizerCanvasLabels(container, styles) {\n        this.styles = styles;\n        this.id = \"CANVAS_LABELS\";\n        this.worldSpacePointPositions = new Float32Array(0);\n        this.labelsActive = true;\n        this.canvas = document.createElement(\"canvas\");\n        container.appendChild(this.canvas);\n        this.gc = this.canvas.getContext(\"2d\");\n        this.canvas.style.position = \"absolute\";\n        this.canvas.style.left = \"0\";\n        this.canvas.style.top = \"0\";\n        this.canvas.style.pointerEvents = \"none\";\n    }\n    ScatterPlotVisualizerCanvasLabels.prototype.removeAllLabels = function() {\n        var pixelWidth = this.canvas.width * window.devicePixelRatio;\n        var pixelHeight = this.canvas.height * window.devicePixelRatio;\n        this.gc.clearRect(0, 0, pixelWidth, pixelHeight);\n    };\n    ScatterPlotVisualizerCanvasLabels.prototype.makeLabels = function(rc) {\n        if (rc.labels == null || rc.labels.pointIndices.length === 0) {\n            return;\n        }\n        if (this.worldSpacePointPositions == null) {\n            return;\n        }\n        var lrc = rc.labels;\n        var sceneIs3D = rc.cameraType === render_1.CameraType.Perspective;\n        var labelHeight = parseInt(this.gc.font, 10);\n        var dpr = window.devicePixelRatio;\n        var grid;\n        {\n            var pixw = this.canvas.width * dpr;\n            var pixh = this.canvas.height * dpr;\n            var bb = {\n                loX: 0,\n                hiX: pixw,\n                loY: 0,\n                hiY: pixh\n            };\n            grid = new label_1.CollisionGrid(bb, pixw / 25, pixh / 50);\n        }\n        var cameraDomain = [\n            rc.farthestCameraSpacePointZ,\n            rc.nearestCameraSpacePointZ\n        ];\n        var opacityMap = function(x) {\n            return util.scaleExponential(x, cameraDomain, [\n                0.1,\n                1\n            ]);\n        };\n        var camPos = rc.camera.position;\n        var camToTarget = camPos.clone().sub(rc.cameraTarget);\n        var camToPoint = new THREE.Vector3();\n        this.gc.textBaseline = \"middle\";\n        this.gc.miterLimit = 2;\n        var labelMargin = 2;\n        var xShift = 4;\n        var n = Math.min(MAX_LABELS_ON_SCREEN, lrc.pointIndices.length);\n        for(var i = 0; i < n; ++i){\n            var point = void 0;\n            {\n                var pi = lrc.pointIndices[i];\n                point = util.vector3FromPackedArray(this.worldSpacePointPositions, pi);\n            }\n            camToPoint.copy(camPos).sub(point);\n            if (camToTarget.dot(camToPoint) < 0) {\n                continue;\n            }\n            var _a = __read(util.vector3DToScreenCoords(rc.camera, rc.screenWidth, rc.screenHeight, point), 2), x = _a[0], y = _a[1];\n            x += xShift;\n            var textBoundingBox = {\n                loX: x - labelMargin,\n                hiX: x + 1 + labelMargin,\n                loY: y - labelHeight / 2 - labelMargin,\n                hiY: y + labelHeight / 2 + labelMargin\n            };\n            if (grid.insert(textBoundingBox, true)) {\n                var text = lrc.labelStrings[i];\n                var fontSize = lrc.defaultFontSize * lrc.scaleFactors[i] * dpr;\n                this.gc.font = fontSize + \"px roboto\";\n                textBoundingBox.hiX += this.gc.measureText(text).width - 1;\n                if (grid.insert(textBoundingBox)) {\n                    var opacity = 1;\n                    if (sceneIs3D && lrc.useSceneOpacityFlags[i] === 1) {\n                        opacity = opacityMap(camToPoint.length());\n                    }\n                    this.gc.fillStyle = this.styleStringFromPackedRgba(lrc.fillColors, i, opacity);\n                    this.gc.strokeStyle = this.styleStringFromPackedRgba(lrc.strokeColors, i, opacity);\n                    this.gc.lineWidth = this.styles.label.strokeWidth;\n                    this.gc.strokeText(text, x, y);\n                    this.gc.lineWidth = this.styles.label.fillWidth;\n                    this.gc.fillText(text, x, y);\n                }\n            }\n        }\n    };\n    ScatterPlotVisualizerCanvasLabels.prototype.styleStringFromPackedRgba = function(packedRgbaArray, colorIndex, opacity) {\n        var offset = colorIndex * 3;\n        var r = packedRgbaArray[offset];\n        var g = packedRgbaArray[offset + 1];\n        var b = packedRgbaArray[offset + 2];\n        return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + opacity + \")\";\n    };\n    ScatterPlotVisualizerCanvasLabels.prototype.onResize = function(newWidth, newHeight) {\n        var dpr = window.devicePixelRatio;\n        this.canvas.width = newWidth * dpr;\n        this.canvas.height = newHeight * dpr;\n        this.canvas.style.width = newWidth + \"px\";\n        this.canvas.style.height = newHeight + \"px\";\n    };\n    ScatterPlotVisualizerCanvasLabels.prototype.dispose = function() {\n        this.removeAllLabels();\n    };\n    ScatterPlotVisualizerCanvasLabels.prototype.onPointPositionsChanged = function(newPositions) {\n        this.worldSpacePointPositions = newPositions;\n        this.removeAllLabels();\n    };\n    ScatterPlotVisualizerCanvasLabels.prototype.onRender = function(rc) {\n        if (!this.labelsActive) {\n            return;\n        }\n        this.removeAllLabels();\n        this.makeLabels(rc);\n    };\n    ScatterPlotVisualizerCanvasLabels.prototype.setScene = function(scene) {};\n    ScatterPlotVisualizerCanvasLabels.prototype.onPickingRender = function(renderContext) {};\n    return ScatterPlotVisualizerCanvasLabels;\n}();\nexports.ScatterPlotVisualizerCanvasLabels = ScatterPlotVisualizerCanvasLabels;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/scatter_plot_visualizer_canvas_labels.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/scatter_plot_visualizer_polylines.js":
/*!***************************************************************************!*\
  !*** ./node_modules/scatter-gl/dist/scatter_plot_visualizer_polylines.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __values = (void 0) && (void 0).__values || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/scatter-gl/dist/util.js\");\nvar constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/scatter-gl/dist/constants.js\");\nvar ScatterPlotVisualizerPolylines = function() {\n    function ScatterPlotVisualizerPolylines() {\n        this.id = \"POLYLINES\";\n        this.sequences = [];\n        this.polylines = [];\n        this.polylinePositionBuffer = {};\n        this.polylineColorBuffer = {};\n        this.pointSequenceIndices = new Map();\n    }\n    ScatterPlotVisualizerPolylines.prototype.getPointSequenceIndex = function(pointIndex) {\n        return this.pointSequenceIndices.get(pointIndex);\n    };\n    ScatterPlotVisualizerPolylines.prototype.updateSequenceIndices = function() {\n        for(var i = 0; i < this.sequences.length; i++){\n            var sequence = this.sequences[i];\n            for(var j = 0; j < sequence.indices.length - 1; j++){\n                var pointIndex = sequence.indices[j];\n                this.pointSequenceIndices.set(pointIndex, i);\n                this.pointSequenceIndices.set(pointIndex + 1, i);\n            }\n        }\n    };\n    ScatterPlotVisualizerPolylines.prototype.createPolylines = function() {\n        var e_1, _a;\n        this.updateSequenceIndices();\n        try {\n            for(var _b = __values(this.polylines), _c = _b.next(); !_c.done; _c = _b.next()){\n                var polyline = _c.value;\n                this.scene.remove(polyline);\n                polyline.geometry.dispose();\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n        this.polylines = [];\n        for(var i = 0; i < this.sequences.length; i++){\n            var geometry = new THREE.BufferGeometry();\n            geometry.addAttribute(\"position\", this.polylinePositionBuffer[i]);\n            geometry.addAttribute(\"color\", this.polylineColorBuffer[i]);\n            var material = new THREE.LineBasicMaterial({\n                linewidth: 1,\n                opacity: 1.0,\n                transparent: true,\n                vertexColors: true\n            });\n            var polyline = new THREE.LineSegments(geometry, material);\n            polyline.frustumCulled = false;\n            this.polylines.push(polyline);\n            this.scene.add(polyline);\n        }\n    };\n    ScatterPlotVisualizerPolylines.prototype.dispose = function() {\n        var e_2, _a;\n        try {\n            for(var _b = __values(this.polylines), _c = _b.next(); !_c.done; _c = _b.next()){\n                var polyline = _c.value;\n                this.scene.remove(polyline);\n                polyline.geometry.dispose();\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n        this.polylines = [];\n        this.polylinePositionBuffer = {};\n        this.polylineColorBuffer = {};\n    };\n    ScatterPlotVisualizerPolylines.prototype.setScene = function(scene) {\n        this.scene = scene;\n    };\n    ScatterPlotVisualizerPolylines.prototype.setSequences = function(sequences) {\n        this.sequences = sequences;\n    };\n    ScatterPlotVisualizerPolylines.prototype.onPointPositionsChanged = function(newPositions) {\n        if (newPositions == null) this.dispose();\n        if (newPositions == null || this.sequences.length === 0) {\n            return;\n        }\n        for(var i = 0; i < this.sequences.length; i++){\n            var sequence = this.sequences[i];\n            var vertexCount = 2 * (sequence.indices.length - 1);\n            var polylines = new Float32Array(vertexCount * constants_1.XYZ_NUM_ELEMENTS);\n            this.polylinePositionBuffer[i] = new THREE.BufferAttribute(polylines, constants_1.XYZ_NUM_ELEMENTS);\n            var colors = new Float32Array(vertexCount * constants_1.RGBA_NUM_ELEMENTS);\n            this.polylineColorBuffer[i] = new THREE.BufferAttribute(colors, constants_1.RGBA_NUM_ELEMENTS);\n        }\n        for(var i = 0; i < this.sequences.length; i++){\n            var sequence = this.sequences[i];\n            var src = 0;\n            for(var j = 0; j < sequence.indices.length - 1; j++){\n                var p1Index = sequence.indices[j];\n                var p2Index = sequence.indices[j + 1];\n                var p1 = util.vector3FromPackedArray(newPositions, p1Index);\n                var p2 = util.vector3FromPackedArray(newPositions, p2Index);\n                this.polylinePositionBuffer[i].setXYZ(src, p1.x, p1.y, p1.z);\n                this.polylinePositionBuffer[i].setXYZ(src + 1, p2.x, p2.y, p2.z);\n                src += 2;\n            }\n            this.polylinePositionBuffer[i].needsUpdate = true;\n        }\n        this.createPolylines();\n    };\n    ScatterPlotVisualizerPolylines.prototype.onRender = function(renderContext) {\n        for(var i = 0; i < this.polylines.length; i++){\n            var material = this.polylines[i].material;\n            material.opacity = renderContext.polylineOpacities[i];\n            material.linewidth = renderContext.polylineWidths[i];\n            this.polylineColorBuffer[i].array = renderContext.polylineColors[i];\n            this.polylineColorBuffer[i].needsUpdate = true;\n        }\n    };\n    ScatterPlotVisualizerPolylines.prototype.onPickingRender = function(renderContext) {};\n    ScatterPlotVisualizerPolylines.prototype.onResize = function(newWidth, newHeight) {};\n    return ScatterPlotVisualizerPolylines;\n}();\nexports.ScatterPlotVisualizerPolylines = ScatterPlotVisualizerPolylines;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/scatter_plot_visualizer_polylines.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js":
/*!*************************************************************************!*\
  !*** ./node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\nvar render_1 = __webpack_require__(/*! ./render */ \"(ssr)/./node_modules/scatter-gl/dist/render.js\");\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/scatter-gl/dist/util.js\");\nvar constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/scatter-gl/dist/constants.js\");\nvar makeVertexShader = function(minPointSize) {\n    return \"\\n    // Index of the specific vertex (passed in as bufferAttribute), and the\\n    // variable that will be used to pass it to the fragment shader.\\n    attribute float spriteIndex;\\n    attribute vec4 color;\\n    attribute float scaleFactor;\\n\\n    varying vec2 xyIndex;\\n    varying vec4 vColor;\\n\\n    uniform bool sizeAttenuation;\\n    uniform float pointSize;\\n    uniform float spritesPerRow;\\n    uniform float spritesPerColumn;\\n\\n    varying float fogDepth;\\n\\n    void main() {\\n      // Pass index and color values to fragment shader.\\n      vColor = color;\\n      xyIndex = vec2(mod(spriteIndex, spritesPerRow),\\n                floor(spriteIndex / spritesPerColumn));\\n\\n      // Transform current vertex by modelViewMatrix (model world position and\\n      // camera world position matrix).\\n      vec4 cameraSpacePos = modelViewMatrix * vec4(position, 1.0);\\n\\n      // Project vertex in camera-space to screen coordinates using the camera's\\n      // projection matrix.\\n      gl_Position = projectionMatrix * cameraSpacePos;\\n\\n      // Create size attenuation (if we're in 3D mode) by making the size of\\n      // each point inversly proportional to its distance to the camera.\\n      float outputPointSize = pointSize;\\n      if (sizeAttenuation) {\\n        outputPointSize = -pointSize / cameraSpacePos.z;\\n        fogDepth = pointSize / outputPointSize * 1.2;\\n      } else {  // Create size attenuation (if we're in 2D mode)\\n        const float PI = 3.1415926535897932384626433832795;\\n        const float minScale = 0.1;  // minimum scaling factor\\n        const float outSpeed = 2.0;  // shrink speed when zooming out\\n        const float outNorm = (1. - minScale) / atan(outSpeed);\\n        const float maxScale = 15.0;  // maximum scaling factor\\n        const float inSpeed = 0.02;  // enlarge speed when zooming in\\n        const float zoomOffset = 0.3;  // offset zoom pivot\\n        float zoom = projectionMatrix[0][0] + zoomOffset;  // zoom pivot\\n        float scale = zoom < 1. ? 1. + outNorm * atan(outSpeed * (zoom - 1.)) :\\n                      1. + 2. / PI * (maxScale - 1.) * atan(inSpeed * (zoom - 1.));\\n        outputPointSize = pointSize * scale;\\n      }\\n\\n      gl_PointSize =\\n        max(outputPointSize * scaleFactor, \" + minPointSize.toFixed(1) + \");\\n    }\";\n};\nvar FRAGMENT_SHADER_POINT_TEST_CHUNK = \"\\n    bool point_in_unit_circle(vec2 spriteCoord) {\\n      vec2 centerToP = spriteCoord - vec2(0.5, 0.5);\\n      return dot(centerToP, centerToP) < (0.5 * 0.5);\\n    }\\n\\n    bool point_in_unit_equilateral_triangle(vec2 spriteCoord) {\\n      vec3 v0 = vec3(0, 1, 0);\\n      vec3 v1 = vec3(0.5, 0, 0);\\n      vec3 v2 = vec3(1, 1, 0);\\n      vec3 p = vec3(spriteCoord, 0);\\n      float p_in_v0_v1 = cross(v1 - v0, p - v0).z;\\n      float p_in_v1_v2 = cross(v2 - v1, p - v1).z;\\n      return (p_in_v0_v1 > 0.0) && (p_in_v1_v2 > 0.0);\\n    }\\n\\n    bool point_in_unit_square(vec2 spriteCoord) {\\n      return true;\\n    }\\n  \";\nvar FRAGMENT_SHADER = \"\\n    varying vec2 xyIndex;\\n    varying vec4 vColor;\\n\\n    uniform sampler2D spriteTexture;\\n    uniform float spritesPerRow;\\n    uniform float spritesPerColumn;\\n    uniform bool isImage;\\n\\n    \" + THREE.ShaderChunk[\"common\"] + \"\\n    \" + FRAGMENT_SHADER_POINT_TEST_CHUNK + \"\\n    uniform vec3 fogColor;\\n    varying float fogDepth;\\n\t\tuniform float fogNear;\\n    uniform float fogFar;\\n\\n    void main() {\\n      if (isImage) {\\n        // Coordinates of the vertex within the entire sprite image.\\n        vec2 coords =\\n          (gl_PointCoord + xyIndex) / vec2(spritesPerRow, spritesPerColumn);\\n        gl_FragColor = vColor * texture(spriteTexture, coords);\\n      } else {\\n        bool inside = point_in_unit_circle(gl_PointCoord);\\n        if (!inside) {\\n          discard;\\n        }\\n        gl_FragColor = vColor;\\n      }\\n      float fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n      gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n    }\";\nvar FRAGMENT_SHADER_PICKING = \"\\n    varying vec2 xyIndex;\\n    varying vec4 vColor;\\n    uniform bool isImage;\\n\\n    \" + FRAGMENT_SHADER_POINT_TEST_CHUNK + \"\\n\\n    varying float fogDepth;\\n\\n    void main() {\\n      xyIndex; // Silence 'unused variable' warning.\\n      fogDepth; // Silence 'unused variable' warning.\\n      if (isImage) {\\n        gl_FragColor = vColor;\\n      } else {\\n        bool inside = point_in_unit_circle(gl_PointCoord);\\n        if (!inside) {\\n          discard;\\n        }\\n        gl_FragColor = vColor;\\n      }\\n    }\";\nvar ScatterPlotVisualizerSprites = function() {\n    function ScatterPlotVisualizerSprites(styles, spriteSheetParams) {\n        this.styles = styles;\n        this.id = \"SPRITES\";\n        this.isSpriteSheetMode = false;\n        this.spritesPerRow = 0;\n        this.spritesPerColumn = 0;\n        this.spriteDimensions = [\n            0,\n            0\n        ];\n        this.worldSpacePointPositions = new Float32Array(0);\n        this.pickingColors = new Float32Array(0);\n        this.renderColors = new Float32Array(0);\n        this.standinTextureForPoints = util.createTextureFromCanvas(document.createElement(\"canvas\"));\n        if (spriteSheetParams) {\n            this.spriteSheetParams = spriteSheetParams;\n            this.setSpriteSheet(spriteSheetParams);\n            this.isSpriteSheetMode = true;\n        }\n        this.renderMaterial = this.createRenderMaterial();\n        this.pickingMaterial = this.createPickingMaterial();\n    }\n    ScatterPlotVisualizerSprites.prototype.createUniforms = function() {\n        return {\n            spriteTexture: {\n                type: \"t\"\n            },\n            spritesPerRow: {\n                type: \"f\"\n            },\n            spritesPerColumn: {\n                type: \"f\"\n            },\n            fogColor: {\n                type: \"c\"\n            },\n            fogNear: {\n                type: \"f\"\n            },\n            fogFar: {\n                type: \"f\"\n            },\n            isImage: {\n                type: \"bool\"\n            },\n            sizeAttenuation: {\n                type: \"bool\"\n            },\n            pointSize: {\n                type: \"f\"\n            }\n        };\n    };\n    ScatterPlotVisualizerSprites.prototype.createRenderMaterial = function() {\n        var isSpriteSheetMode = this.isSpriteSheetMode;\n        var uniforms = this.createUniforms();\n        return new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: makeVertexShader(this.styles.sprites.minPointSize),\n            fragmentShader: FRAGMENT_SHADER,\n            transparent: true,\n            depthFunc: THREE.LessDepth,\n            fog: this.styles.fog.enabled,\n            blending: THREE.NormalBlending\n        });\n    };\n    ScatterPlotVisualizerSprites.prototype.createPickingMaterial = function() {\n        var uniforms = this.createUniforms();\n        return new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: makeVertexShader(this.styles.sprites.minPointSize),\n            fragmentShader: FRAGMENT_SHADER_PICKING,\n            transparent: true,\n            depthTest: true,\n            depthWrite: true,\n            fog: false,\n            blending: THREE.NormalBlending\n        });\n    };\n    ScatterPlotVisualizerSprites.prototype.createPointSprites = function(scene, positions) {\n        var pointCount = positions != null ? positions.length / constants_1.XYZ_NUM_ELEMENTS : 0;\n        var geometry = this.createGeometry(pointCount);\n        this.fog = new THREE.Fog(0xffffff);\n        this.points = new THREE.Points(geometry, this.renderMaterial);\n        this.points.frustumCulled = false;\n        if (this.spriteIndexBufferAttribute != null) {\n            this.points.geometry.setAttribute(\"spriteIndex\", this.spriteIndexBufferAttribute);\n        }\n        scene.add(this.points);\n    };\n    ScatterPlotVisualizerSprites.prototype.calculatePointSize = function(sceneIs3D) {\n        var imageSize = this.styles.sprites.imageSize;\n        if (this.texture) {\n            return sceneIs3D ? imageSize : this.spriteDimensions[0];\n        }\n        var n = this.worldSpacePointPositions != null ? this.worldSpacePointPositions.length / constants_1.XYZ_NUM_ELEMENTS : 1;\n        var SCALE = 200;\n        var LOG_BASE = 8;\n        var DIVISOR = 1.5;\n        var pointSize = SCALE / Math.log(n) / Math.log(LOG_BASE);\n        return sceneIs3D ? pointSize : pointSize / DIVISOR;\n    };\n    ScatterPlotVisualizerSprites.prototype.createGeometry = function(pointCount) {\n        var n = pointCount;\n        this.pickingColors = new Float32Array(n * constants_1.RGBA_NUM_ELEMENTS);\n        {\n            var dst = 0;\n            for(var i = 0; i < n; i++){\n                var c = new THREE.Color(i);\n                this.pickingColors[dst++] = c.r;\n                this.pickingColors[dst++] = c.g;\n                this.pickingColors[dst++] = c.b;\n                this.pickingColors[dst++] = 1;\n            }\n        }\n        var geometry = new THREE.BufferGeometry();\n        geometry.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array([]), constants_1.XYZ_NUM_ELEMENTS));\n        geometry.setAttribute(\"color\", new THREE.BufferAttribute(new Float32Array([]), constants_1.RGBA_NUM_ELEMENTS));\n        geometry.setAttribute(\"scaleFactor\", new THREE.BufferAttribute(new Float32Array([]), constants_1.INDEX_NUM_ELEMENTS));\n        geometry.computeVertexNormals();\n        return geometry;\n    };\n    ScatterPlotVisualizerSprites.prototype.setFogDistances = function(sceneIs3D, nearestPointZ, farthestPointZ) {\n        var _a = this.styles.fog, threshold = _a.threshold, enabled = _a.enabled;\n        if (sceneIs3D && enabled) {\n            this.fog.near = nearestPointZ;\n            var delta = nearestPointZ - farthestPointZ;\n            this.fog.far = nearestPointZ - threshold * delta;\n        } else {\n            this.fog.near = Infinity;\n            this.fog.far = Infinity;\n        }\n    };\n    ScatterPlotVisualizerSprites.prototype.dispose = function() {\n        this.disposeGeometry();\n        this.disposeSpriteSheet();\n    };\n    ScatterPlotVisualizerSprites.prototype.disposeGeometry = function() {\n        if (this.points != null) {\n            this.scene.remove(this.points);\n            this.points.geometry.dispose();\n            this.points = null;\n            this.worldSpacePointPositions = null;\n        }\n    };\n    ScatterPlotVisualizerSprites.prototype.disposeSpriteSheet = function() {\n        if (this.texture) {\n            this.texture.dispose();\n        }\n        this.texture = null;\n        this.renderMaterial = null;\n        this.pickingMaterial = null;\n        this.spriteSheetImage = null;\n    };\n    ScatterPlotVisualizerSprites.prototype.setScene = function(scene) {\n        this.scene = scene;\n    };\n    ScatterPlotVisualizerSprites.prototype.setSpriteSheet = function(spriteSheetParams) {\n        var _this = this;\n        var spriteDimensions = spriteSheetParams.spriteDimensions, onImageLoad = spriteSheetParams.onImageLoad;\n        var spriteSheet = spriteSheetParams.spritesheetImage;\n        if (typeof spriteSheet === \"string\") {\n            var spriteSheetUrl = spriteSheet;\n            spriteSheet = new Image();\n            spriteSheet.src = spriteSheetUrl;\n        }\n        this.spriteSheetImage = spriteSheet;\n        this.texture = util.createTextureFromImage(this.spriteSheetImage, function() {\n            _this.spritesPerRow = _this.spriteSheetImage.width / spriteDimensions[0];\n            _this.spritesPerColumn = _this.spriteSheetImage.height / spriteDimensions[1];\n            onImageLoad();\n        });\n        this.spriteDimensions = spriteDimensions;\n        this.setSpriteIndexBuffer();\n    };\n    ScatterPlotVisualizerSprites.prototype.setSpriteIndexBuffer = function() {\n        var spriteIndices = this.spriteSheetParams.spriteIndices;\n        this.spriteIndexBufferAttribute = new THREE.BufferAttribute(spriteIndices, constants_1.INDEX_NUM_ELEMENTS);\n        if (this.points != null) {\n            this.points.geometry.setAttribute(\"spriteIndex\", this.spriteIndexBufferAttribute);\n        }\n    };\n    ScatterPlotVisualizerSprites.prototype.onPointPositionsChanged = function(newPositions) {\n        if (this.points != null) {\n            if (this.worldSpacePointPositions.length !== newPositions.length) {\n                this.disposeGeometry();\n            }\n        }\n        this.worldSpacePointPositions = newPositions;\n        if (this.points == null) {\n            this.createPointSprites(this.scene, newPositions);\n        }\n        if (this.spriteSheetParams) {\n            this.setSpriteIndexBuffer();\n        }\n        this.renderMaterial = this.createRenderMaterial();\n        this.pickingMaterial = this.createPickingMaterial();\n        var positions = this.points.geometry.getAttribute(\"position\");\n        positions.array = newPositions;\n        positions.count = newPositions.length / constants_1.XYZ_NUM_ELEMENTS;\n        positions.needsUpdate = true;\n    };\n    ScatterPlotVisualizerSprites.prototype.onPickingRender = function(rc) {\n        var sceneIs3D = rc.cameraType === render_1.CameraType.Perspective;\n        this.pickingMaterial.uniforms.spritesPerRow.value = this.spritesPerRow;\n        this.pickingMaterial.uniforms.spritesPerRow.value = this.spritesPerColumn;\n        this.pickingMaterial.uniforms.sizeAttenuation.value = sceneIs3D;\n        this.pickingMaterial.uniforms.pointSize.value = this.calculatePointSize(sceneIs3D);\n        this.points.material = this.pickingMaterial;\n        var colors = this.points.geometry.getAttribute(\"color\");\n        colors.array = this.pickingColors;\n        colors.count = this.pickingColors.length / constants_1.RGBA_NUM_ELEMENTS;\n        colors.needsUpdate = true;\n        var scaleFactors = this.points.geometry.getAttribute(\"scaleFactor\");\n        scaleFactors.array = rc.pointScaleFactors;\n        scaleFactors.count = rc.pointScaleFactors.length;\n        scaleFactors.count = rc.pointScaleFactors.length / constants_1.INDEX_NUM_ELEMENTS;\n        scaleFactors.needsUpdate = true;\n    };\n    ScatterPlotVisualizerSprites.prototype.onRender = function(rc) {\n        var sceneIs3D = rc.camera instanceof THREE.PerspectiveCamera;\n        this.setFogDistances(sceneIs3D, rc.nearestCameraSpacePointZ, rc.farthestCameraSpacePointZ);\n        this.scene.fog = this.fog;\n        this.scene.fog.color = new THREE.Color(rc.backgroundColor);\n        this.renderMaterial.uniforms.fogColor.value = this.scene.fog.color;\n        this.renderMaterial.uniforms.fogNear.value = this.fog.near;\n        this.renderMaterial.uniforms.fogFar.value = this.fog.far;\n        this.renderMaterial.uniforms.spritesPerRow.value = this.spritesPerRow;\n        this.renderMaterial.uniforms.spritesPerColumn.value = this.spritesPerColumn;\n        this.renderMaterial.uniforms.isImage.value = this.texture != null;\n        this.renderMaterial.uniforms.spriteTexture.value = this.texture != null ? this.texture : this.standinTextureForPoints;\n        this.renderMaterial.uniforms.sizeAttenuation.value = sceneIs3D;\n        this.renderMaterial.uniforms.pointSize.value = this.calculatePointSize(sceneIs3D);\n        this.points.material = this.renderMaterial;\n        var colors = this.points.geometry.getAttribute(\"color\");\n        this.renderColors = rc.pointColors;\n        colors.array = this.renderColors;\n        colors.count = this.renderColors.length / constants_1.RGBA_NUM_ELEMENTS;\n        colors.needsUpdate = true;\n        var scaleFactors = this.points.geometry.getAttribute(\"scaleFactor\");\n        scaleFactors.array = rc.pointScaleFactors;\n        scaleFactors.count = rc.pointScaleFactors.length / constants_1.INDEX_NUM_ELEMENTS;\n        scaleFactors.needsUpdate = true;\n    };\n    ScatterPlotVisualizerSprites.prototype.onResize = function(newWidth, newHeight) {};\n    return ScatterPlotVisualizerSprites;\n}();\nexports.ScatterPlotVisualizerSprites = ScatterPlotVisualizerSprites;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/styles.js":
/*!************************************************!*\
  !*** ./node_modules/scatter-gl/dist/styles.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar makeDefaultStyles = function() {\n    var defaultStyles = {\n        backgroundColor: \"#ffffff\",\n        axesVisible: true,\n        fog: {\n            color: \"#ffffff\",\n            enabled: true,\n            threshold: 5000\n        },\n        label: {\n            fontSize: 10,\n            scaleDefault: 1,\n            scaleLarge: 2,\n            fillColorSelected: \"#000000\",\n            fillColorHover: \"#000000\",\n            strokeColorSelected: \"#ffffff\",\n            strokeColorHover: \"#ffffff\",\n            strokeWidth: 3,\n            fillWidth: 6\n        },\n        label3D: {\n            fontSize: 80,\n            scale: 2.2,\n            color: \"black\",\n            backgroundColor: \"#ffffff\",\n            colorUnselected: \"#ffffff\",\n            colorNoSelection: \"#ffffff\"\n        },\n        point: {\n            colorUnselected: \"rgba(227, 227, 227, 0.7)\",\n            colorNoSelection: \"rgba(117, 117, 217, 0.7)\",\n            colorSelected: \"rgba(250, 102, 102, 0.7)\",\n            colorHover: \"rgba(118, 11, 79, 0.7)\",\n            scaleDefault: 1.0,\n            scaleSelected: 1.2,\n            scaleHover: 1.2\n        },\n        polyline: {\n            startHue: 60,\n            endHue: 360,\n            saturation: 1,\n            lightness: 0.3,\n            defaultOpacity: 0.2,\n            defaultLineWidth: 2,\n            selectedOpacity: 0.9,\n            selectedLineWidth: 3,\n            deselectedOpacity: 0.05\n        },\n        select: {\n            fill: \"#dddddd\",\n            fillOpacity: 0.2,\n            stroke: \"#aaaaaa\",\n            strokeWidth: 2,\n            strokeDashArray: \"10 5\"\n        },\n        sprites: {\n            minPointSize: 5.0,\n            imageSize: 30,\n            colorUnselected: \"#ffffff\",\n            colorNoSelection: \"#ffffff\"\n        }\n    };\n    return defaultStyles;\n};\nfunction makeStyles(userStyles) {\n    var defaultStyles = makeDefaultStyles();\n    if (userStyles === undefined) {\n        return defaultStyles;\n    }\n    for(var key in defaultStyles){\n        var _key = key;\n        if (typeof defaultStyles[_key] === \"object\" && typeof userStyles[_key] === \"object\") {\n            defaultStyles[_key] = Object.assign(defaultStyles[_key], userStyles[_key]);\n        } else if (userStyles[_key] !== undefined) {\n            defaultStyles[_key] = userStyles[_key];\n        }\n    }\n    return defaultStyles;\n}\nexports.makeStyles = makeStyles;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2NhdHRlci1nbC9kaXN0L3N0eWxlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxJQUFJQyxvQkFBb0I7SUFDcEIsSUFBSUMsZ0JBQWdCO1FBQ2hCQyxpQkFBaUI7UUFDakJDLGFBQWE7UUFDYkMsS0FBSztZQUNEQyxPQUFPO1lBQ1BDLFNBQVM7WUFDVEMsV0FBVztRQUNmO1FBQ0FDLE9BQU87WUFDSEMsVUFBVTtZQUNWQyxjQUFjO1lBQ2RDLFlBQVk7WUFDWkMsbUJBQW1CO1lBQ25CQyxnQkFBZ0I7WUFDaEJDLHFCQUFxQjtZQUNyQkMsa0JBQWtCO1lBQ2xCQyxhQUFhO1lBQ2JDLFdBQVc7UUFDZjtRQUNBQyxTQUFTO1lBQ0xULFVBQVU7WUFDVlUsT0FBTztZQUNQZCxPQUFPO1lBQ1BILGlCQUFpQjtZQUNqQmtCLGlCQUFpQjtZQUNqQkMsa0JBQWtCO1FBQ3RCO1FBQ0FDLE9BQU87WUFDSEYsaUJBQWlCO1lBQ2pCQyxrQkFBa0I7WUFDbEJFLGVBQWU7WUFDZkMsWUFBWTtZQUNaZCxjQUFjO1lBQ2RlLGVBQWU7WUFDZkMsWUFBWTtRQUNoQjtRQUNBQyxVQUFVO1lBQ05DLFVBQVU7WUFDVkMsUUFBUTtZQUNSQyxZQUFZO1lBQ1pDLFdBQVc7WUFDWEMsZ0JBQWdCO1lBQ2hCQyxrQkFBa0I7WUFDbEJDLGlCQUFpQjtZQUNqQkMsbUJBQW1CO1lBQ25CQyxtQkFBbUI7UUFDdkI7UUFDQUMsUUFBUTtZQUNKQyxNQUFNO1lBQ05DLGFBQWE7WUFDYkMsUUFBUTtZQUNSeEIsYUFBYTtZQUNieUIsaUJBQWlCO1FBQ3JCO1FBQ0FDLFNBQVM7WUFDTEMsY0FBYztZQUNkQyxXQUFXO1lBQ1h4QixpQkFBaUI7WUFDakJDLGtCQUFrQjtRQUN0QjtJQUNKO0lBQ0EsT0FBT3BCO0FBQ1g7QUFDQSxTQUFTNEMsV0FBV0MsVUFBVTtJQUMxQixJQUFJN0MsZ0JBQWdCRDtJQUNwQixJQUFJOEMsZUFBZUMsV0FBVztRQUMxQixPQUFPOUM7SUFDWDtJQUNBLElBQUssSUFBSStDLE9BQU8vQyxjQUFlO1FBQzNCLElBQUlnRCxPQUFPRDtRQUNYLElBQUksT0FBTy9DLGFBQWEsQ0FBQ2dELEtBQUssS0FBSyxZQUMvQixPQUFPSCxVQUFVLENBQUNHLEtBQUssS0FBSyxVQUFVO1lBQ3RDaEQsYUFBYSxDQUFDZ0QsS0FBSyxHQUFHckQsT0FBT3NELE1BQU0sQ0FBQ2pELGFBQWEsQ0FBQ2dELEtBQUssRUFBRUgsVUFBVSxDQUFDRyxLQUFLO1FBQzdFLE9BQ0ssSUFBSUgsVUFBVSxDQUFDRyxLQUFLLEtBQUtGLFdBQVc7WUFDckM5QyxhQUFhLENBQUNnRCxLQUFLLEdBQUdILFVBQVUsQ0FBQ0csS0FBSztRQUMxQztJQUNKO0lBQ0EsT0FBT2hEO0FBQ1g7QUFDQUgsa0JBQWtCLEdBQUcrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3lvZ2Fwb3NlcGVyZmVjdC8uL25vZGVfbW9kdWxlcy9zY2F0dGVyLWdsL2Rpc3Qvc3R5bGVzLmpzPzQwNzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbWFrZURlZmF1bHRTdHlsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlZmF1bHRTdHlsZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmZmZmYnLFxuICAgICAgICBheGVzVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgZm9nOiB7XG4gICAgICAgICAgICBjb2xvcjogJyNmZmZmZmYnLFxuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIHRocmVzaG9sZDogNTAwMCxcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAxMCxcbiAgICAgICAgICAgIHNjYWxlRGVmYXVsdDogMSxcbiAgICAgICAgICAgIHNjYWxlTGFyZ2U6IDIsXG4gICAgICAgICAgICBmaWxsQ29sb3JTZWxlY3RlZDogJyMwMDAwMDAnLFxuICAgICAgICAgICAgZmlsbENvbG9ySG92ZXI6ICcjMDAwMDAwJyxcbiAgICAgICAgICAgIHN0cm9rZUNvbG9yU2VsZWN0ZWQ6ICcjZmZmZmZmJyxcbiAgICAgICAgICAgIHN0cm9rZUNvbG9ySG92ZXI6ICcjZmZmZmZmJyxcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzLFxuICAgICAgICAgICAgZmlsbFdpZHRoOiA2LFxuICAgICAgICB9LFxuICAgICAgICBsYWJlbDNEOiB7XG4gICAgICAgICAgICBmb250U2l6ZTogODAsXG4gICAgICAgICAgICBzY2FsZTogMi4yLFxuICAgICAgICAgICAgY29sb3I6ICdibGFjaycsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmZmZmJyxcbiAgICAgICAgICAgIGNvbG9yVW5zZWxlY3RlZDogJyNmZmZmZmYnLFxuICAgICAgICAgICAgY29sb3JOb1NlbGVjdGlvbjogJyNmZmZmZmYnLFxuICAgICAgICB9LFxuICAgICAgICBwb2ludDoge1xuICAgICAgICAgICAgY29sb3JVbnNlbGVjdGVkOiAncmdiYSgyMjcsIDIyNywgMjI3LCAwLjcpJyxcbiAgICAgICAgICAgIGNvbG9yTm9TZWxlY3Rpb246ICdyZ2JhKDExNywgMTE3LCAyMTcsIDAuNyknLFxuICAgICAgICAgICAgY29sb3JTZWxlY3RlZDogJ3JnYmEoMjUwLCAxMDIsIDEwMiwgMC43KScsXG4gICAgICAgICAgICBjb2xvckhvdmVyOiAncmdiYSgxMTgsIDExLCA3OSwgMC43KScsXG4gICAgICAgICAgICBzY2FsZURlZmF1bHQ6IDEuMCxcbiAgICAgICAgICAgIHNjYWxlU2VsZWN0ZWQ6IDEuMixcbiAgICAgICAgICAgIHNjYWxlSG92ZXI6IDEuMixcbiAgICAgICAgfSxcbiAgICAgICAgcG9seWxpbmU6IHtcbiAgICAgICAgICAgIHN0YXJ0SHVlOiA2MCxcbiAgICAgICAgICAgIGVuZEh1ZTogMzYwLFxuICAgICAgICAgICAgc2F0dXJhdGlvbjogMSxcbiAgICAgICAgICAgIGxpZ2h0bmVzczogMC4zLFxuICAgICAgICAgICAgZGVmYXVsdE9wYWNpdHk6IDAuMixcbiAgICAgICAgICAgIGRlZmF1bHRMaW5lV2lkdGg6IDIsXG4gICAgICAgICAgICBzZWxlY3RlZE9wYWNpdHk6IDAuOSxcbiAgICAgICAgICAgIHNlbGVjdGVkTGluZVdpZHRoOiAzLFxuICAgICAgICAgICAgZGVzZWxlY3RlZE9wYWNpdHk6IDAuMDUsXG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgZmlsbDogJyNkZGRkZGQnLFxuICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuMixcbiAgICAgICAgICAgIHN0cm9rZTogJyNhYWFhYWEnLFxuICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDIsXG4gICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6ICcxMCA1JyxcbiAgICAgICAgfSxcbiAgICAgICAgc3ByaXRlczoge1xuICAgICAgICAgICAgbWluUG9pbnRTaXplOiA1LjAsXG4gICAgICAgICAgICBpbWFnZVNpemU6IDMwLFxuICAgICAgICAgICAgY29sb3JVbnNlbGVjdGVkOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICBjb2xvck5vU2VsZWN0aW9uOiAnI2ZmZmZmZicsXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZGVmYXVsdFN0eWxlcztcbn07XG5mdW5jdGlvbiBtYWtlU3R5bGVzKHVzZXJTdHlsZXMpIHtcbiAgICB2YXIgZGVmYXVsdFN0eWxlcyA9IG1ha2VEZWZhdWx0U3R5bGVzKCk7XG4gICAgaWYgKHVzZXJTdHlsZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFN0eWxlcztcbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIGRlZmF1bHRTdHlsZXMpIHtcbiAgICAgICAgdmFyIF9rZXkgPSBrZXk7XG4gICAgICAgIGlmICh0eXBlb2YgZGVmYXVsdFN0eWxlc1tfa2V5XSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIHR5cGVvZiB1c2VyU3R5bGVzW19rZXldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZGVmYXVsdFN0eWxlc1tfa2V5XSA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdFN0eWxlc1tfa2V5XSwgdXNlclN0eWxlc1tfa2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodXNlclN0eWxlc1tfa2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkZWZhdWx0U3R5bGVzW19rZXldID0gdXNlclN0eWxlc1tfa2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0eWxlcztcbn1cbmV4cG9ydHMubWFrZVN0eWxlcyA9IG1ha2VTdHlsZXM7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtYWtlRGVmYXVsdFN0eWxlcyIsImRlZmF1bHRTdHlsZXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJheGVzVmlzaWJsZSIsImZvZyIsImNvbG9yIiwiZW5hYmxlZCIsInRocmVzaG9sZCIsImxhYmVsIiwiZm9udFNpemUiLCJzY2FsZURlZmF1bHQiLCJzY2FsZUxhcmdlIiwiZmlsbENvbG9yU2VsZWN0ZWQiLCJmaWxsQ29sb3JIb3ZlciIsInN0cm9rZUNvbG9yU2VsZWN0ZWQiLCJzdHJva2VDb2xvckhvdmVyIiwic3Ryb2tlV2lkdGgiLCJmaWxsV2lkdGgiLCJsYWJlbDNEIiwic2NhbGUiLCJjb2xvclVuc2VsZWN0ZWQiLCJjb2xvck5vU2VsZWN0aW9uIiwicG9pbnQiLCJjb2xvclNlbGVjdGVkIiwiY29sb3JIb3ZlciIsInNjYWxlU2VsZWN0ZWQiLCJzY2FsZUhvdmVyIiwicG9seWxpbmUiLCJzdGFydEh1ZSIsImVuZEh1ZSIsInNhdHVyYXRpb24iLCJsaWdodG5lc3MiLCJkZWZhdWx0T3BhY2l0eSIsImRlZmF1bHRMaW5lV2lkdGgiLCJzZWxlY3RlZE9wYWNpdHkiLCJzZWxlY3RlZExpbmVXaWR0aCIsImRlc2VsZWN0ZWRPcGFjaXR5Iiwic2VsZWN0IiwiZmlsbCIsImZpbGxPcGFjaXR5Iiwic3Ryb2tlIiwic3Ryb2tlRGFzaEFycmF5Iiwic3ByaXRlcyIsIm1pblBvaW50U2l6ZSIsImltYWdlU2l6ZSIsIm1ha2VTdHlsZXMiLCJ1c2VyU3R5bGVzIiwidW5kZWZpbmVkIiwia2V5IiwiX2tleSIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/styles.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/scatter-gl/dist/util.js":
/*!**********************************************!*\
  !*** ./node_modules/scatter-gl/dist/util.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar THREE = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\nfunction vector3DToScreenCoords(cam, w, h, v) {\n    var dpr = window.devicePixelRatio;\n    var pv = new THREE.Vector3().copy(v).project(cam);\n    var coords = [\n        (pv.x + 1) / 2 * w * dpr,\n        -((pv.y - 1) / 2 * h) * dpr\n    ];\n    return coords;\n}\nexports.vector3DToScreenCoords = vector3DToScreenCoords;\nfunction vector3FromPackedArray(a, pointIndex) {\n    var offset = pointIndex * 3;\n    return new THREE.Vector3(a[offset], a[offset + 1], a[offset + 2]);\n}\nexports.vector3FromPackedArray = vector3FromPackedArray;\nfunction getNearFarPoints(worldSpacePoints, cameraPos, cameraTarget) {\n    var shortestDist = Infinity;\n    var furthestDist = 0;\n    var camToTarget = new THREE.Vector3().copy(cameraTarget).sub(cameraPos);\n    var camPlaneNormal = new THREE.Vector3().copy(camToTarget).normalize();\n    var n = worldSpacePoints.length / 3;\n    var src = 0;\n    var p = new THREE.Vector3();\n    var camToPoint = new THREE.Vector3();\n    for(var i = 0; i < n; i++){\n        p.x = worldSpacePoints[src];\n        p.y = worldSpacePoints[src + 1];\n        p.z = worldSpacePoints[src + 2];\n        src += 3;\n        camToPoint.copy(p).sub(cameraPos);\n        var dist = camPlaneNormal.dot(camToPoint);\n        if (dist < 0) {\n            continue;\n        }\n        furthestDist = dist > furthestDist ? dist : furthestDist;\n        shortestDist = dist < shortestDist ? dist : shortestDist;\n    }\n    return [\n        shortestDist,\n        furthestDist\n    ];\n}\nexports.getNearFarPoints = getNearFarPoints;\nfunction prepareTexture(texture, needsUpdate) {\n    if (needsUpdate === void 0) {\n        needsUpdate = true;\n    }\n    texture.needsUpdate = needsUpdate;\n    texture.minFilter = THREE.LinearFilter;\n    texture.generateMipmaps = false;\n    texture.flipY = false;\n    return texture;\n}\nfunction createTextureFromCanvas(image) {\n    var texture = new THREE.Texture(image);\n    return prepareTexture(texture);\n}\nexports.createTextureFromCanvas = createTextureFromCanvas;\nfunction createTextureFromImage(image, onImageLoad) {\n    var texture = new THREE.Texture(image);\n    if (image.complete) {\n        texture.needsUpdate = true;\n        onImageLoad();\n    } else {\n        image.onload = function() {\n            texture.needsUpdate = true;\n            onImageLoad();\n        };\n    }\n    return prepareTexture(texture, false);\n}\nexports.createTextureFromImage = createTextureFromImage;\nfunction hasWebGLSupport() {\n    try {\n        var c = document.createElement(\"canvas\");\n        var gl = c.getContext(\"webgl\") || c.getContext(\"experimental-webgl\");\n        return gl != null;\n    } catch (e) {\n        return false;\n    }\n}\nexports.hasWebGLSupport = hasWebGLSupport;\nfunction extent(data) {\n    var minimum = Infinity;\n    var maximum = -Infinity;\n    for(var i = 0; i < data.length; i++){\n        var item = data[i];\n        if (item < minimum) minimum = item;\n        if (item > maximum) maximum = item;\n    }\n    return [\n        minimum,\n        maximum\n    ];\n}\nexports.extent = extent;\nfunction scaleLinear(value, domain, range) {\n    var domainDifference = domain[1] - domain[0];\n    var rangeDifference = range[1] - range[0];\n    var percentDomain = (value - domain[0]) / domainDifference;\n    return percentDomain * rangeDifference + range[0];\n}\nexports.scaleLinear = scaleLinear;\nfunction scaleExponential(value, domain, range) {\n    var domainDifference = Math.pow(domain[1], Math.E) - Math.pow(domain[0], Math.E);\n    var rangeDifference = range[1] - range[0];\n    var percentDomain = (Math.pow(value, Math.E) - domain[0]) / domainDifference;\n    return percentDomain * rangeDifference + range[0];\n}\nexports.scaleExponential = scaleExponential;\nfunction packRgbIntoUint8Array(rgbArray, labelIndex, r, g, b) {\n    rgbArray[labelIndex * 3] = r;\n    rgbArray[labelIndex * 3 + 1] = g;\n    rgbArray[labelIndex * 3 + 2] = b;\n}\nexports.packRgbIntoUint8Array = packRgbIntoUint8Array;\nfunction styleRgbFromHexColor(hex) {\n    var c = new THREE.Color(hex);\n    return [\n        c.r * 255 | 0,\n        c.g * 255 | 0,\n        c.b * 255 | 0\n    ];\n}\nexports.styleRgbFromHexColor = styleRgbFromHexColor;\nvar toPercent = function(percent) {\n    return 100 * percent + \"%\";\n};\nfunction getDefaultPointInPolylineColor(index, totalPoints, startHue, endHue, saturation, lightness) {\n    var hue = startHue + (endHue - startHue) * index / totalPoints;\n    var hsl = \"hsl(\" + hue + \", \" + toPercent(saturation) + \", \" + toPercent(lightness) + \")\";\n    return new THREE.Color(hsl);\n}\nexports.getDefaultPointInPolylineColor = getDefaultPointInPolylineColor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/scatter-gl/dist/util.js\n");

/***/ })

};
;